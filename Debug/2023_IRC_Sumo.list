
2023_IRC_Sumo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000042ec  080001c8  080001c8  000101c8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  080044b4  080044b4  000144b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080044c4  080044c4  0002005c  2**0
                  CONTENTS
  4 .ARM          00000000  080044c4  080044c4  0002005c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080044c4  080044c4  0002005c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080044c4  080044c4  000144c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080044c8  080044c8  000144c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000005c  20000000  080044cc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000318  2000005c  08004528  0002005c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000374  08004528  00020374  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000ead9  00000000  00000000  000200cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000283b  00000000  00000000  0002eba8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001040  00000000  00000000  000313e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000c52  00000000  00000000  00032428  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00026d00  00000000  00000000  0003307a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00011556  00000000  00000000  00059d7a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ecce1  00000000  00000000  0006b2d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000470c  00000000  00000000  00157fb4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000052  00000000  00000000  0015c6c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c8 <__do_global_dtors_aux>:
 80001c8:	b510      	push	{r4, lr}
 80001ca:	4c05      	ldr	r4, [pc, #20]	; (80001e0 <__do_global_dtors_aux+0x18>)
 80001cc:	7823      	ldrb	r3, [r4, #0]
 80001ce:	b933      	cbnz	r3, 80001de <__do_global_dtors_aux+0x16>
 80001d0:	4b04      	ldr	r3, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x1c>)
 80001d2:	b113      	cbz	r3, 80001da <__do_global_dtors_aux+0x12>
 80001d4:	4804      	ldr	r0, [pc, #16]	; (80001e8 <__do_global_dtors_aux+0x20>)
 80001d6:	f3af 8000 	nop.w
 80001da:	2301      	movs	r3, #1
 80001dc:	7023      	strb	r3, [r4, #0]
 80001de:	bd10      	pop	{r4, pc}
 80001e0:	2000005c 	.word	0x2000005c
 80001e4:	00000000 	.word	0x00000000
 80001e8:	0800449c 	.word	0x0800449c

080001ec <frame_dummy>:
 80001ec:	b508      	push	{r3, lr}
 80001ee:	4b03      	ldr	r3, [pc, #12]	; (80001fc <frame_dummy+0x10>)
 80001f0:	b11b      	cbz	r3, 80001fa <frame_dummy+0xe>
 80001f2:	4903      	ldr	r1, [pc, #12]	; (8000200 <frame_dummy+0x14>)
 80001f4:	4803      	ldr	r0, [pc, #12]	; (8000204 <frame_dummy+0x18>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	bd08      	pop	{r3, pc}
 80001fc:	00000000 	.word	0x00000000
 8000200:	20000060 	.word	0x20000060
 8000204:	0800449c 	.word	0x0800449c

08000208 <__aeabi_drsub>:
 8000208:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800020c:	e002      	b.n	8000214 <__adddf3>
 800020e:	bf00      	nop

08000210 <__aeabi_dsub>:
 8000210:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000214 <__adddf3>:
 8000214:	b530      	push	{r4, r5, lr}
 8000216:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800021a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800021e:	ea94 0f05 	teq	r4, r5
 8000222:	bf08      	it	eq
 8000224:	ea90 0f02 	teqeq	r0, r2
 8000228:	bf1f      	itttt	ne
 800022a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800022e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000232:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000236:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800023a:	f000 80e2 	beq.w	8000402 <__adddf3+0x1ee>
 800023e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000242:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000246:	bfb8      	it	lt
 8000248:	426d      	neglt	r5, r5
 800024a:	dd0c      	ble.n	8000266 <__adddf3+0x52>
 800024c:	442c      	add	r4, r5
 800024e:	ea80 0202 	eor.w	r2, r0, r2
 8000252:	ea81 0303 	eor.w	r3, r1, r3
 8000256:	ea82 0000 	eor.w	r0, r2, r0
 800025a:	ea83 0101 	eor.w	r1, r3, r1
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	2d36      	cmp	r5, #54	; 0x36
 8000268:	bf88      	it	hi
 800026a:	bd30      	pophi	{r4, r5, pc}
 800026c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000270:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000274:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000278:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800027c:	d002      	beq.n	8000284 <__adddf3+0x70>
 800027e:	4240      	negs	r0, r0
 8000280:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000284:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000288:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800028c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000290:	d002      	beq.n	8000298 <__adddf3+0x84>
 8000292:	4252      	negs	r2, r2
 8000294:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000298:	ea94 0f05 	teq	r4, r5
 800029c:	f000 80a7 	beq.w	80003ee <__adddf3+0x1da>
 80002a0:	f1a4 0401 	sub.w	r4, r4, #1
 80002a4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002a8:	db0d      	blt.n	80002c6 <__adddf3+0xb2>
 80002aa:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002ae:	fa22 f205 	lsr.w	r2, r2, r5
 80002b2:	1880      	adds	r0, r0, r2
 80002b4:	f141 0100 	adc.w	r1, r1, #0
 80002b8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002bc:	1880      	adds	r0, r0, r2
 80002be:	fa43 f305 	asr.w	r3, r3, r5
 80002c2:	4159      	adcs	r1, r3
 80002c4:	e00e      	b.n	80002e4 <__adddf3+0xd0>
 80002c6:	f1a5 0520 	sub.w	r5, r5, #32
 80002ca:	f10e 0e20 	add.w	lr, lr, #32
 80002ce:	2a01      	cmp	r2, #1
 80002d0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002d4:	bf28      	it	cs
 80002d6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002da:	fa43 f305 	asr.w	r3, r3, r5
 80002de:	18c0      	adds	r0, r0, r3
 80002e0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002e4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002e8:	d507      	bpl.n	80002fa <__adddf3+0xe6>
 80002ea:	f04f 0e00 	mov.w	lr, #0
 80002ee:	f1dc 0c00 	rsbs	ip, ip, #0
 80002f2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002f6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002fa:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002fe:	d31b      	bcc.n	8000338 <__adddf3+0x124>
 8000300:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000304:	d30c      	bcc.n	8000320 <__adddf3+0x10c>
 8000306:	0849      	lsrs	r1, r1, #1
 8000308:	ea5f 0030 	movs.w	r0, r0, rrx
 800030c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000310:	f104 0401 	add.w	r4, r4, #1
 8000314:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000318:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800031c:	f080 809a 	bcs.w	8000454 <__adddf3+0x240>
 8000320:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000324:	bf08      	it	eq
 8000326:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800032a:	f150 0000 	adcs.w	r0, r0, #0
 800032e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000332:	ea41 0105 	orr.w	r1, r1, r5
 8000336:	bd30      	pop	{r4, r5, pc}
 8000338:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800033c:	4140      	adcs	r0, r0
 800033e:	eb41 0101 	adc.w	r1, r1, r1
 8000342:	3c01      	subs	r4, #1
 8000344:	bf28      	it	cs
 8000346:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800034a:	d2e9      	bcs.n	8000320 <__adddf3+0x10c>
 800034c:	f091 0f00 	teq	r1, #0
 8000350:	bf04      	itt	eq
 8000352:	4601      	moveq	r1, r0
 8000354:	2000      	moveq	r0, #0
 8000356:	fab1 f381 	clz	r3, r1
 800035a:	bf08      	it	eq
 800035c:	3320      	addeq	r3, #32
 800035e:	f1a3 030b 	sub.w	r3, r3, #11
 8000362:	f1b3 0220 	subs.w	r2, r3, #32
 8000366:	da0c      	bge.n	8000382 <__adddf3+0x16e>
 8000368:	320c      	adds	r2, #12
 800036a:	dd08      	ble.n	800037e <__adddf3+0x16a>
 800036c:	f102 0c14 	add.w	ip, r2, #20
 8000370:	f1c2 020c 	rsb	r2, r2, #12
 8000374:	fa01 f00c 	lsl.w	r0, r1, ip
 8000378:	fa21 f102 	lsr.w	r1, r1, r2
 800037c:	e00c      	b.n	8000398 <__adddf3+0x184>
 800037e:	f102 0214 	add.w	r2, r2, #20
 8000382:	bfd8      	it	le
 8000384:	f1c2 0c20 	rsble	ip, r2, #32
 8000388:	fa01 f102 	lsl.w	r1, r1, r2
 800038c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000390:	bfdc      	itt	le
 8000392:	ea41 010c 	orrle.w	r1, r1, ip
 8000396:	4090      	lslle	r0, r2
 8000398:	1ae4      	subs	r4, r4, r3
 800039a:	bfa2      	ittt	ge
 800039c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003a0:	4329      	orrge	r1, r5
 80003a2:	bd30      	popge	{r4, r5, pc}
 80003a4:	ea6f 0404 	mvn.w	r4, r4
 80003a8:	3c1f      	subs	r4, #31
 80003aa:	da1c      	bge.n	80003e6 <__adddf3+0x1d2>
 80003ac:	340c      	adds	r4, #12
 80003ae:	dc0e      	bgt.n	80003ce <__adddf3+0x1ba>
 80003b0:	f104 0414 	add.w	r4, r4, #20
 80003b4:	f1c4 0220 	rsb	r2, r4, #32
 80003b8:	fa20 f004 	lsr.w	r0, r0, r4
 80003bc:	fa01 f302 	lsl.w	r3, r1, r2
 80003c0:	ea40 0003 	orr.w	r0, r0, r3
 80003c4:	fa21 f304 	lsr.w	r3, r1, r4
 80003c8:	ea45 0103 	orr.w	r1, r5, r3
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	f1c4 040c 	rsb	r4, r4, #12
 80003d2:	f1c4 0220 	rsb	r2, r4, #32
 80003d6:	fa20 f002 	lsr.w	r0, r0, r2
 80003da:	fa01 f304 	lsl.w	r3, r1, r4
 80003de:	ea40 0003 	orr.w	r0, r0, r3
 80003e2:	4629      	mov	r1, r5
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ea:	4629      	mov	r1, r5
 80003ec:	bd30      	pop	{r4, r5, pc}
 80003ee:	f094 0f00 	teq	r4, #0
 80003f2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003f6:	bf06      	itte	eq
 80003f8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003fc:	3401      	addeq	r4, #1
 80003fe:	3d01      	subne	r5, #1
 8000400:	e74e      	b.n	80002a0 <__adddf3+0x8c>
 8000402:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000406:	bf18      	it	ne
 8000408:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800040c:	d029      	beq.n	8000462 <__adddf3+0x24e>
 800040e:	ea94 0f05 	teq	r4, r5
 8000412:	bf08      	it	eq
 8000414:	ea90 0f02 	teqeq	r0, r2
 8000418:	d005      	beq.n	8000426 <__adddf3+0x212>
 800041a:	ea54 0c00 	orrs.w	ip, r4, r0
 800041e:	bf04      	itt	eq
 8000420:	4619      	moveq	r1, r3
 8000422:	4610      	moveq	r0, r2
 8000424:	bd30      	pop	{r4, r5, pc}
 8000426:	ea91 0f03 	teq	r1, r3
 800042a:	bf1e      	ittt	ne
 800042c:	2100      	movne	r1, #0
 800042e:	2000      	movne	r0, #0
 8000430:	bd30      	popne	{r4, r5, pc}
 8000432:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000436:	d105      	bne.n	8000444 <__adddf3+0x230>
 8000438:	0040      	lsls	r0, r0, #1
 800043a:	4149      	adcs	r1, r1
 800043c:	bf28      	it	cs
 800043e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000442:	bd30      	pop	{r4, r5, pc}
 8000444:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000448:	bf3c      	itt	cc
 800044a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800044e:	bd30      	popcc	{r4, r5, pc}
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000454:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000458:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800045c:	f04f 0000 	mov.w	r0, #0
 8000460:	bd30      	pop	{r4, r5, pc}
 8000462:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000466:	bf1a      	itte	ne
 8000468:	4619      	movne	r1, r3
 800046a:	4610      	movne	r0, r2
 800046c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000470:	bf1c      	itt	ne
 8000472:	460b      	movne	r3, r1
 8000474:	4602      	movne	r2, r0
 8000476:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800047a:	bf06      	itte	eq
 800047c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000480:	ea91 0f03 	teqeq	r1, r3
 8000484:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000488:	bd30      	pop	{r4, r5, pc}
 800048a:	bf00      	nop

0800048c <__aeabi_ui2d>:
 800048c:	f090 0f00 	teq	r0, #0
 8000490:	bf04      	itt	eq
 8000492:	2100      	moveq	r1, #0
 8000494:	4770      	bxeq	lr
 8000496:	b530      	push	{r4, r5, lr}
 8000498:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800049c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004a0:	f04f 0500 	mov.w	r5, #0
 80004a4:	f04f 0100 	mov.w	r1, #0
 80004a8:	e750      	b.n	800034c <__adddf3+0x138>
 80004aa:	bf00      	nop

080004ac <__aeabi_i2d>:
 80004ac:	f090 0f00 	teq	r0, #0
 80004b0:	bf04      	itt	eq
 80004b2:	2100      	moveq	r1, #0
 80004b4:	4770      	bxeq	lr
 80004b6:	b530      	push	{r4, r5, lr}
 80004b8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004bc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004c0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004c4:	bf48      	it	mi
 80004c6:	4240      	negmi	r0, r0
 80004c8:	f04f 0100 	mov.w	r1, #0
 80004cc:	e73e      	b.n	800034c <__adddf3+0x138>
 80004ce:	bf00      	nop

080004d0 <__aeabi_f2d>:
 80004d0:	0042      	lsls	r2, r0, #1
 80004d2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004d6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004da:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004de:	bf1f      	itttt	ne
 80004e0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004e4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004e8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ec:	4770      	bxne	lr
 80004ee:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004f2:	bf08      	it	eq
 80004f4:	4770      	bxeq	lr
 80004f6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004fa:	bf04      	itt	eq
 80004fc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000500:	4770      	bxeq	lr
 8000502:	b530      	push	{r4, r5, lr}
 8000504:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000510:	e71c      	b.n	800034c <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_ul2d>:
 8000514:	ea50 0201 	orrs.w	r2, r0, r1
 8000518:	bf08      	it	eq
 800051a:	4770      	bxeq	lr
 800051c:	b530      	push	{r4, r5, lr}
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	e00a      	b.n	800053a <__aeabi_l2d+0x16>

08000524 <__aeabi_l2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000532:	d502      	bpl.n	800053a <__aeabi_l2d+0x16>
 8000534:	4240      	negs	r0, r0
 8000536:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800053a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800053e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000542:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000546:	f43f aed8 	beq.w	80002fa <__adddf3+0xe6>
 800054a:	f04f 0203 	mov.w	r2, #3
 800054e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000552:	bf18      	it	ne
 8000554:	3203      	addne	r2, #3
 8000556:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800055a:	bf18      	it	ne
 800055c:	3203      	addne	r2, #3
 800055e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000562:	f1c2 0320 	rsb	r3, r2, #32
 8000566:	fa00 fc03 	lsl.w	ip, r0, r3
 800056a:	fa20 f002 	lsr.w	r0, r0, r2
 800056e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000572:	ea40 000e 	orr.w	r0, r0, lr
 8000576:	fa21 f102 	lsr.w	r1, r1, r2
 800057a:	4414      	add	r4, r2
 800057c:	e6bd      	b.n	80002fa <__adddf3+0xe6>
 800057e:	bf00      	nop

08000580 <__aeabi_d2iz>:
 8000580:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000584:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000588:	d215      	bcs.n	80005b6 <__aeabi_d2iz+0x36>
 800058a:	d511      	bpl.n	80005b0 <__aeabi_d2iz+0x30>
 800058c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000590:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000594:	d912      	bls.n	80005bc <__aeabi_d2iz+0x3c>
 8000596:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800059a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800059e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80005a2:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80005a6:	fa23 f002 	lsr.w	r0, r3, r2
 80005aa:	bf18      	it	ne
 80005ac:	4240      	negne	r0, r0
 80005ae:	4770      	bx	lr
 80005b0:	f04f 0000 	mov.w	r0, #0
 80005b4:	4770      	bx	lr
 80005b6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80005ba:	d105      	bne.n	80005c8 <__aeabi_d2iz+0x48>
 80005bc:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 80005c0:	bf08      	it	eq
 80005c2:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 80005c6:	4770      	bx	lr
 80005c8:	f04f 0000 	mov.w	r0, #0
 80005cc:	4770      	bx	lr
 80005ce:	bf00      	nop

080005d0 <LL_TIM_OC_SetCompareCH1>:
  * @param  TIMx Timer instance
  * @param  CompareValue between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_SetCompareCH1(TIM_TypeDef *TIMx, uint32_t CompareValue)
{
 80005d0:	b480      	push	{r7}
 80005d2:	b083      	sub	sp, #12
 80005d4:	af00      	add	r7, sp, #0
 80005d6:	6078      	str	r0, [r7, #4]
 80005d8:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR1, CompareValue);
 80005da:	687b      	ldr	r3, [r7, #4]
 80005dc:	683a      	ldr	r2, [r7, #0]
 80005de:	635a      	str	r2, [r3, #52]	; 0x34
}
 80005e0:	bf00      	nop
 80005e2:	370c      	adds	r7, #12
 80005e4:	46bd      	mov	sp, r7
 80005e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ea:	4770      	bx	lr

080005ec <LL_TIM_OC_SetCompareCH2>:
  * @param  TIMx Timer instance
  * @param  CompareValue between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_SetCompareCH2(TIM_TypeDef *TIMx, uint32_t CompareValue)
{
 80005ec:	b480      	push	{r7}
 80005ee:	b083      	sub	sp, #12
 80005f0:	af00      	add	r7, sp, #0
 80005f2:	6078      	str	r0, [r7, #4]
 80005f4:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR2, CompareValue);
 80005f6:	687b      	ldr	r3, [r7, #4]
 80005f8:	683a      	ldr	r2, [r7, #0]
 80005fa:	639a      	str	r2, [r3, #56]	; 0x38
}
 80005fc:	bf00      	nop
 80005fe:	370c      	adds	r7, #12
 8000600:	46bd      	mov	sp, r7
 8000602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000606:	4770      	bx	lr

08000608 <LL_TIM_OC_SetCompareCH3>:
  * @param  TIMx Timer instance
  * @param  CompareValue between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_SetCompareCH3(TIM_TypeDef *TIMx, uint32_t CompareValue)
{
 8000608:	b480      	push	{r7}
 800060a:	b083      	sub	sp, #12
 800060c:	af00      	add	r7, sp, #0
 800060e:	6078      	str	r0, [r7, #4]
 8000610:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR3, CompareValue);
 8000612:	687b      	ldr	r3, [r7, #4]
 8000614:	683a      	ldr	r2, [r7, #0]
 8000616:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8000618:	bf00      	nop
 800061a:	370c      	adds	r7, #12
 800061c:	46bd      	mov	sp, r7
 800061e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000622:	4770      	bx	lr

08000624 <LL_TIM_OC_SetCompareCH4>:
  * @param  TIMx Timer instance
  * @param  CompareValue between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_SetCompareCH4(TIM_TypeDef *TIMx, uint32_t CompareValue)
{
 8000624:	b480      	push	{r7}
 8000626:	b083      	sub	sp, #12
 8000628:	af00      	add	r7, sp, #0
 800062a:	6078      	str	r0, [r7, #4]
 800062c:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR4, CompareValue);
 800062e:	687b      	ldr	r3, [r7, #4]
 8000630:	683a      	ldr	r2, [r7, #0]
 8000632:	641a      	str	r2, [r3, #64]	; 0x40
}
 8000634:	bf00      	nop
 8000636:	370c      	adds	r7, #12
 8000638:	46bd      	mov	sp, r7
 800063a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800063e:	4770      	bx	lr

08000640 <LL_GPIO_SetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8000640:	b480      	push	{r7}
 8000642:	b083      	sub	sp, #12
 8000644:	af00      	add	r7, sp, #0
 8000646:	6078      	str	r0, [r7, #4]
 8000648:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 800064a:	687b      	ldr	r3, [r7, #4]
 800064c:	683a      	ldr	r2, [r7, #0]
 800064e:	619a      	str	r2, [r3, #24]
}
 8000650:	bf00      	nop
 8000652:	370c      	adds	r7, #12
 8000654:	46bd      	mov	sp, r7
 8000656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800065a:	4770      	bx	lr

0800065c <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 800065c:	b480      	push	{r7}
 800065e:	b083      	sub	sp, #12
 8000660:	af00      	add	r7, sp, #0
 8000662:	6078      	str	r0, [r7, #4]
 8000664:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 8000666:	683b      	ldr	r3, [r7, #0]
 8000668:	041a      	lsls	r2, r3, #16
 800066a:	687b      	ldr	r3, [r7, #4]
 800066c:	619a      	str	r2, [r3, #24]
}
 800066e:	bf00      	nop
 8000670:	370c      	adds	r7, #12
 8000672:	46bd      	mov	sp, r7
 8000674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000678:	4770      	bx	lr
	...

0800067c <Duty_Control_Velocity>:
	dst->RPM = (60.0 * dst->m1) / (Tc * CPR);
	dst->DEGREE += (dst->m1 / (CPR / 360.0));
}

void Duty_Control_Velocity(DUTY* dst, DIRECTION* DIRx, GPIO_TypeDef* GPIOx, uint16_t PINx, TIM_TypeDef* TIMx, uint8_t CHx, int target)
{
 800067c:	b580      	push	{r7, lr}
 800067e:	b084      	sub	sp, #16
 8000680:	af00      	add	r7, sp, #0
 8000682:	60f8      	str	r0, [r7, #12]
 8000684:	60b9      	str	r1, [r7, #8]
 8000686:	607a      	str	r2, [r7, #4]
 8000688:	807b      	strh	r3, [r7, #2]
	dst->duty = target;
 800068a:	68fb      	ldr	r3, [r7, #12]
 800068c:	6a3a      	ldr	r2, [r7, #32]
 800068e:	601a      	str	r2, [r3, #0]

	if(dst->duty > dst->dutylimit)
 8000690:	68fb      	ldr	r3, [r7, #12]
 8000692:	681a      	ldr	r2, [r3, #0]
 8000694:	68fb      	ldr	r3, [r7, #12]
 8000696:	685b      	ldr	r3, [r3, #4]
 8000698:	429a      	cmp	r2, r3
 800069a:	dd04      	ble.n	80006a6 <Duty_Control_Velocity+0x2a>
	{
		dst->duty = dst->dutylimit;
 800069c:	68fb      	ldr	r3, [r7, #12]
 800069e:	685a      	ldr	r2, [r3, #4]
 80006a0:	68fb      	ldr	r3, [r7, #12]
 80006a2:	601a      	str	r2, [r3, #0]
 80006a4:	e00b      	b.n	80006be <Duty_Control_Velocity+0x42>
	}
	else if(dst->duty < -dst->dutylimit)
 80006a6:	68fb      	ldr	r3, [r7, #12]
 80006a8:	681a      	ldr	r2, [r3, #0]
 80006aa:	68fb      	ldr	r3, [r7, #12]
 80006ac:	685b      	ldr	r3, [r3, #4]
 80006ae:	425b      	negs	r3, r3
 80006b0:	429a      	cmp	r2, r3
 80006b2:	da04      	bge.n	80006be <Duty_Control_Velocity+0x42>
	{
		dst->duty = -dst->dutylimit;
 80006b4:	68fb      	ldr	r3, [r7, #12]
 80006b6:	685b      	ldr	r3, [r3, #4]
 80006b8:	425a      	negs	r2, r3
 80006ba:	68fb      	ldr	r3, [r7, #12]
 80006bc:	601a      	str	r2, [r3, #0]
	}

	if(dst->duty < 0)
 80006be:	68fb      	ldr	r3, [r7, #12]
 80006c0:	681b      	ldr	r3, [r3, #0]
 80006c2:	2b00      	cmp	r3, #0
 80006c4:	da6e      	bge.n	80007a4 <Duty_Control_Velocity+0x128>
	{
		if(DIRx->FrontMotorDirection == RESET)
 80006c6:	68bb      	ldr	r3, [r7, #8]
 80006c8:	681b      	ldr	r3, [r3, #0]
 80006ca:	2b00      	cmp	r3, #0
 80006cc:	d134      	bne.n	8000738 <Duty_Control_Velocity+0xbc>
		{
			LL_GPIO_SetOutputPin(GPIOx, PINx);
 80006ce:	887b      	ldrh	r3, [r7, #2]
 80006d0:	4619      	mov	r1, r3
 80006d2:	6878      	ldr	r0, [r7, #4]
 80006d4:	f7ff ffb4 	bl	8000640 <LL_GPIO_SetOutputPin>
			//HAL_GPIO_WritePin(GPIOx, PINx, GPIO_PIN_SET);

			switch(CHx)
 80006d8:	7f3b      	ldrb	r3, [r7, #28]
 80006da:	3b01      	subs	r3, #1
 80006dc:	2b03      	cmp	r3, #3
 80006de:	f200 80c5 	bhi.w	800086c <Duty_Control_Velocity+0x1f0>
 80006e2:	a201      	add	r2, pc, #4	; (adr r2, 80006e8 <Duty_Control_Velocity+0x6c>)
 80006e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80006e8:	080006f9 	.word	0x080006f9
 80006ec:	08000709 	.word	0x08000709
 80006f0:	08000719 	.word	0x08000719
 80006f4:	08000729 	.word	0x08000729
			{
			case 1:
			{
				LL_TIM_OC_SetCompareCH1(TIMx, -dst->duty);
 80006f8:	68fb      	ldr	r3, [r7, #12]
 80006fa:	681b      	ldr	r3, [r3, #0]
 80006fc:	425b      	negs	r3, r3
 80006fe:	4619      	mov	r1, r3
 8000700:	69b8      	ldr	r0, [r7, #24]
 8000702:	f7ff ff65 	bl	80005d0 <LL_TIM_OC_SetCompareCH1>
				//TIMx->CCR1 = -dst->duty;
				break;
 8000706:	e0b1      	b.n	800086c <Duty_Control_Velocity+0x1f0>
			}
			case 2:
			{
				LL_TIM_OC_SetCompareCH2(TIMx, -dst->duty);
 8000708:	68fb      	ldr	r3, [r7, #12]
 800070a:	681b      	ldr	r3, [r3, #0]
 800070c:	425b      	negs	r3, r3
 800070e:	4619      	mov	r1, r3
 8000710:	69b8      	ldr	r0, [r7, #24]
 8000712:	f7ff ff6b 	bl	80005ec <LL_TIM_OC_SetCompareCH2>
				//TIMx->CCR2 = -dst->duty;
				break;
 8000716:	e0a9      	b.n	800086c <Duty_Control_Velocity+0x1f0>
			}
			case 3:
			{
				LL_TIM_OC_SetCompareCH3(TIMx, -dst->duty);
 8000718:	68fb      	ldr	r3, [r7, #12]
 800071a:	681b      	ldr	r3, [r3, #0]
 800071c:	425b      	negs	r3, r3
 800071e:	4619      	mov	r1, r3
 8000720:	69b8      	ldr	r0, [r7, #24]
 8000722:	f7ff ff71 	bl	8000608 <LL_TIM_OC_SetCompareCH3>
				//TIMx->CCR3 = -dst->duty;
				break;
 8000726:	e0a1      	b.n	800086c <Duty_Control_Velocity+0x1f0>
			}
			case 4:
			{
				LL_TIM_OC_SetCompareCH4(TIMx, -dst->duty);
 8000728:	68fb      	ldr	r3, [r7, #12]
 800072a:	681b      	ldr	r3, [r3, #0]
 800072c:	425b      	negs	r3, r3
 800072e:	4619      	mov	r1, r3
 8000730:	69b8      	ldr	r0, [r7, #24]
 8000732:	f7ff ff77 	bl	8000624 <LL_TIM_OC_SetCompareCH4>
				//TIMx->CCR4 = -dst->duty;
				break;
 8000736:	e099      	b.n	800086c <Duty_Control_Velocity+0x1f0>
			}
			}
		}
		else
		{
			LL_GPIO_ResetOutputPin(GPIOx, PINx);
 8000738:	887b      	ldrh	r3, [r7, #2]
 800073a:	4619      	mov	r1, r3
 800073c:	6878      	ldr	r0, [r7, #4]
 800073e:	f7ff ff8d 	bl	800065c <LL_GPIO_ResetOutputPin>
			//HAL_GPIO_WritePin(GPIOx, PINx, GPIO_PIN_RESET);

			switch(CHx)
 8000742:	7f3b      	ldrb	r3, [r7, #28]
 8000744:	3b01      	subs	r3, #1
 8000746:	2b03      	cmp	r3, #3
 8000748:	f200 8090 	bhi.w	800086c <Duty_Control_Velocity+0x1f0>
 800074c:	a201      	add	r2, pc, #4	; (adr r2, 8000754 <Duty_Control_Velocity+0xd8>)
 800074e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000752:	bf00      	nop
 8000754:	08000765 	.word	0x08000765
 8000758:	08000775 	.word	0x08000775
 800075c:	08000785 	.word	0x08000785
 8000760:	08000795 	.word	0x08000795
			{
			case 1:
			{
				LL_TIM_OC_SetCompareCH1(TIMx, -dst->duty);
 8000764:	68fb      	ldr	r3, [r7, #12]
 8000766:	681b      	ldr	r3, [r3, #0]
 8000768:	425b      	negs	r3, r3
 800076a:	4619      	mov	r1, r3
 800076c:	69b8      	ldr	r0, [r7, #24]
 800076e:	f7ff ff2f 	bl	80005d0 <LL_TIM_OC_SetCompareCH1>
				//TIMx->CCR1 = -dst->duty;
				break;
 8000772:	e07b      	b.n	800086c <Duty_Control_Velocity+0x1f0>
			}
			case 2:
			{
				LL_TIM_OC_SetCompareCH2(TIMx, -dst->duty);
 8000774:	68fb      	ldr	r3, [r7, #12]
 8000776:	681b      	ldr	r3, [r3, #0]
 8000778:	425b      	negs	r3, r3
 800077a:	4619      	mov	r1, r3
 800077c:	69b8      	ldr	r0, [r7, #24]
 800077e:	f7ff ff35 	bl	80005ec <LL_TIM_OC_SetCompareCH2>
				//TIMx->CCR2 = -dst->duty;
				break;
 8000782:	e073      	b.n	800086c <Duty_Control_Velocity+0x1f0>
			}
			case 3:
			{
				LL_TIM_OC_SetCompareCH3(TIMx, -dst->duty);
 8000784:	68fb      	ldr	r3, [r7, #12]
 8000786:	681b      	ldr	r3, [r3, #0]
 8000788:	425b      	negs	r3, r3
 800078a:	4619      	mov	r1, r3
 800078c:	69b8      	ldr	r0, [r7, #24]
 800078e:	f7ff ff3b 	bl	8000608 <LL_TIM_OC_SetCompareCH3>
				//TIMx->CCR3 = -dst->duty;
				break;
 8000792:	e06b      	b.n	800086c <Duty_Control_Velocity+0x1f0>
			}
			case 4:
			{
				LL_TIM_OC_SetCompareCH4(TIMx, -dst->duty);
 8000794:	68fb      	ldr	r3, [r7, #12]
 8000796:	681b      	ldr	r3, [r3, #0]
 8000798:	425b      	negs	r3, r3
 800079a:	4619      	mov	r1, r3
 800079c:	69b8      	ldr	r0, [r7, #24]
 800079e:	f7ff ff41 	bl	8000624 <LL_TIM_OC_SetCompareCH4>
				//TIMx->CCR4 = -dst->duty;
				break;
 80007a2:	e063      	b.n	800086c <Duty_Control_Velocity+0x1f0>
			}
		}
	}
	else
	{
		if(DIRx->FrontMotorDirection == RESET)
 80007a4:	68bb      	ldr	r3, [r7, #8]
 80007a6:	681b      	ldr	r3, [r3, #0]
 80007a8:	2b00      	cmp	r3, #0
 80007aa:	d12f      	bne.n	800080c <Duty_Control_Velocity+0x190>
		{
			LL_GPIO_ResetOutputPin(GPIOx, PINx);
 80007ac:	887b      	ldrh	r3, [r7, #2]
 80007ae:	4619      	mov	r1, r3
 80007b0:	6878      	ldr	r0, [r7, #4]
 80007b2:	f7ff ff53 	bl	800065c <LL_GPIO_ResetOutputPin>
			//HAL_GPIO_WritePin(GPIOx, PINx, GPIO_PIN_RESET);

			switch(CHx)
 80007b6:	7f3b      	ldrb	r3, [r7, #28]
 80007b8:	3b01      	subs	r3, #1
 80007ba:	2b03      	cmp	r3, #3
 80007bc:	d856      	bhi.n	800086c <Duty_Control_Velocity+0x1f0>
 80007be:	a201      	add	r2, pc, #4	; (adr r2, 80007c4 <Duty_Control_Velocity+0x148>)
 80007c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80007c4:	080007d5 	.word	0x080007d5
 80007c8:	080007e3 	.word	0x080007e3
 80007cc:	080007f1 	.word	0x080007f1
 80007d0:	080007ff 	.word	0x080007ff
			{
			case 1:
			{
				LL_TIM_OC_SetCompareCH1(TIMx, dst->duty);
 80007d4:	68fb      	ldr	r3, [r7, #12]
 80007d6:	681b      	ldr	r3, [r3, #0]
 80007d8:	4619      	mov	r1, r3
 80007da:	69b8      	ldr	r0, [r7, #24]
 80007dc:	f7ff fef8 	bl	80005d0 <LL_TIM_OC_SetCompareCH1>
				//TIMx->CCR1 = dst->duty;
				break;
 80007e0:	e044      	b.n	800086c <Duty_Control_Velocity+0x1f0>
			}
			case 2:
			{
				LL_TIM_OC_SetCompareCH2(TIMx, dst->duty);
 80007e2:	68fb      	ldr	r3, [r7, #12]
 80007e4:	681b      	ldr	r3, [r3, #0]
 80007e6:	4619      	mov	r1, r3
 80007e8:	69b8      	ldr	r0, [r7, #24]
 80007ea:	f7ff feff 	bl	80005ec <LL_TIM_OC_SetCompareCH2>
				//TIMx->CCR2 = dst->duty;
				break;
 80007ee:	e03d      	b.n	800086c <Duty_Control_Velocity+0x1f0>
			}
			case 3:
			{
				LL_TIM_OC_SetCompareCH3(TIMx, dst->duty);
 80007f0:	68fb      	ldr	r3, [r7, #12]
 80007f2:	681b      	ldr	r3, [r3, #0]
 80007f4:	4619      	mov	r1, r3
 80007f6:	69b8      	ldr	r0, [r7, #24]
 80007f8:	f7ff ff06 	bl	8000608 <LL_TIM_OC_SetCompareCH3>
				//TIMx->CCR3 = dst->duty;
				break;
 80007fc:	e036      	b.n	800086c <Duty_Control_Velocity+0x1f0>
			}
			case 4:
			{
				LL_TIM_OC_SetCompareCH4(TIMx, dst->duty);
 80007fe:	68fb      	ldr	r3, [r7, #12]
 8000800:	681b      	ldr	r3, [r3, #0]
 8000802:	4619      	mov	r1, r3
 8000804:	69b8      	ldr	r0, [r7, #24]
 8000806:	f7ff ff0d 	bl	8000624 <LL_TIM_OC_SetCompareCH4>
				//TIMx->CCR4 = dst->duty;
				break;
 800080a:	e02f      	b.n	800086c <Duty_Control_Velocity+0x1f0>
			}
			}
		}
		else
		{
			LL_GPIO_SetOutputPin(GPIOx, PINx);
 800080c:	887b      	ldrh	r3, [r7, #2]
 800080e:	4619      	mov	r1, r3
 8000810:	6878      	ldr	r0, [r7, #4]
 8000812:	f7ff ff15 	bl	8000640 <LL_GPIO_SetOutputPin>
			//HAL_GPIO_WritePin(GPIOx, PINx, GPIO_PIN_SET);

			switch(CHx)
 8000816:	7f3b      	ldrb	r3, [r7, #28]
 8000818:	3b01      	subs	r3, #1
 800081a:	2b03      	cmp	r3, #3
 800081c:	d826      	bhi.n	800086c <Duty_Control_Velocity+0x1f0>
 800081e:	a201      	add	r2, pc, #4	; (adr r2, 8000824 <Duty_Control_Velocity+0x1a8>)
 8000820:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000824:	08000835 	.word	0x08000835
 8000828:	08000843 	.word	0x08000843
 800082c:	08000851 	.word	0x08000851
 8000830:	0800085f 	.word	0x0800085f
			{
			case 1:
			{
				LL_TIM_OC_SetCompareCH1(TIMx, dst->duty);
 8000834:	68fb      	ldr	r3, [r7, #12]
 8000836:	681b      	ldr	r3, [r3, #0]
 8000838:	4619      	mov	r1, r3
 800083a:	69b8      	ldr	r0, [r7, #24]
 800083c:	f7ff fec8 	bl	80005d0 <LL_TIM_OC_SetCompareCH1>
				//TIMx->CCR1 = dst->duty;
				break;
 8000840:	e014      	b.n	800086c <Duty_Control_Velocity+0x1f0>
			}
			case 2:
			{
				LL_TIM_OC_SetCompareCH2(TIMx, dst->duty);
 8000842:	68fb      	ldr	r3, [r7, #12]
 8000844:	681b      	ldr	r3, [r3, #0]
 8000846:	4619      	mov	r1, r3
 8000848:	69b8      	ldr	r0, [r7, #24]
 800084a:	f7ff fecf 	bl	80005ec <LL_TIM_OC_SetCompareCH2>
				//TIMx->CCR2 = dst->duty;
				break;
 800084e:	e00d      	b.n	800086c <Duty_Control_Velocity+0x1f0>
			}
			case 3:
			{
				LL_TIM_OC_SetCompareCH3(TIMx, dst->duty);
 8000850:	68fb      	ldr	r3, [r7, #12]
 8000852:	681b      	ldr	r3, [r3, #0]
 8000854:	4619      	mov	r1, r3
 8000856:	69b8      	ldr	r0, [r7, #24]
 8000858:	f7ff fed6 	bl	8000608 <LL_TIM_OC_SetCompareCH3>
				//TIMx->CCR3 = dst->duty;
				break;
 800085c:	e006      	b.n	800086c <Duty_Control_Velocity+0x1f0>
			}
			case 4:
			{
				LL_TIM_OC_SetCompareCH4(TIMx, dst->duty);
 800085e:	68fb      	ldr	r3, [r7, #12]
 8000860:	681b      	ldr	r3, [r3, #0]
 8000862:	4619      	mov	r1, r3
 8000864:	69b8      	ldr	r0, [r7, #24]
 8000866:	f7ff fedd 	bl	8000624 <LL_TIM_OC_SetCompareCH4>
				//TIMx->CCR4 = dst->duty;
				break;
 800086a:	bf00      	nop
			}
			}
		}
	}
}
 800086c:	bf00      	nop
 800086e:	3710      	adds	r7, #16
 8000870:	46bd      	mov	sp, r7
 8000872:	bd80      	pop	{r7, pc}

08000874 <MAF_Init>:
 */

#include "JSensing.h"

void MAF_Init(MAF* maf, int n_maf)
{
 8000874:	b580      	push	{r7, lr}
 8000876:	b082      	sub	sp, #8
 8000878:	af00      	add	r7, sp, #0
 800087a:	6078      	str	r0, [r7, #4]
 800087c:	6039      	str	r1, [r7, #0]
	maf->n_maf = n_maf;
 800087e:	687b      	ldr	r3, [r7, #4]
 8000880:	683a      	ldr	r2, [r7, #0]
 8000882:	601a      	str	r2, [r3, #0]

	maf->buffer = (float*)malloc(sizeof(float)*(n_maf+1));
 8000884:	683b      	ldr	r3, [r7, #0]
 8000886:	3301      	adds	r3, #1
 8000888:	009b      	lsls	r3, r3, #2
 800088a:	4618      	mov	r0, r3
 800088c:	f003 fd0e 	bl	80042ac <malloc>
 8000890:	4603      	mov	r3, r0
 8000892:	461a      	mov	r2, r3
 8000894:	687b      	ldr	r3, [r7, #4]
 8000896:	609a      	str	r2, [r3, #8]
}
 8000898:	bf00      	nop
 800089a:	3708      	adds	r7, #8
 800089c:	46bd      	mov	sp, r7
 800089e:	bd80      	pop	{r7, pc}

080008a0 <MAF_Filter>:

void MAF_Filter(MAF* maf, float rawdata)
{
 80008a0:	b480      	push	{r7}
 80008a2:	b085      	sub	sp, #20
 80008a4:	af00      	add	r7, sp, #0
 80008a6:	6078      	str	r0, [r7, #4]
 80008a8:	ed87 0a00 	vstr	s0, [r7]
	maf->buffer[maf->count] = rawdata;
 80008ac:	687b      	ldr	r3, [r7, #4]
 80008ae:	689a      	ldr	r2, [r3, #8]
 80008b0:	687b      	ldr	r3, [r7, #4]
 80008b2:	685b      	ldr	r3, [r3, #4]
 80008b4:	009b      	lsls	r3, r3, #2
 80008b6:	4413      	add	r3, r2
 80008b8:	683a      	ldr	r2, [r7, #0]
 80008ba:	601a      	str	r2, [r3, #0]

	float sum = 0.0;
 80008bc:	f04f 0300 	mov.w	r3, #0
 80008c0:	60fb      	str	r3, [r7, #12]
	for(int i = 0; i < maf->n_maf; i++)
 80008c2:	2300      	movs	r3, #0
 80008c4:	60bb      	str	r3, [r7, #8]
 80008c6:	e00f      	b.n	80008e8 <MAF_Filter+0x48>
	{
		sum += maf->buffer[i];
 80008c8:	687b      	ldr	r3, [r7, #4]
 80008ca:	689a      	ldr	r2, [r3, #8]
 80008cc:	68bb      	ldr	r3, [r7, #8]
 80008ce:	009b      	lsls	r3, r3, #2
 80008d0:	4413      	add	r3, r2
 80008d2:	edd3 7a00 	vldr	s15, [r3]
 80008d6:	ed97 7a03 	vldr	s14, [r7, #12]
 80008da:	ee77 7a27 	vadd.f32	s15, s14, s15
 80008de:	edc7 7a03 	vstr	s15, [r7, #12]
	for(int i = 0; i < maf->n_maf; i++)
 80008e2:	68bb      	ldr	r3, [r7, #8]
 80008e4:	3301      	adds	r3, #1
 80008e6:	60bb      	str	r3, [r7, #8]
 80008e8:	687b      	ldr	r3, [r7, #4]
 80008ea:	681b      	ldr	r3, [r3, #0]
 80008ec:	68ba      	ldr	r2, [r7, #8]
 80008ee:	429a      	cmp	r2, r3
 80008f0:	dbea      	blt.n	80008c8 <MAF_Filter+0x28>
	}

	maf->output = sum / maf->n_maf;
 80008f2:	687b      	ldr	r3, [r7, #4]
 80008f4:	681b      	ldr	r3, [r3, #0]
 80008f6:	ee07 3a90 	vmov	s15, r3
 80008fa:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80008fe:	edd7 6a03 	vldr	s13, [r7, #12]
 8000902:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000906:	687b      	ldr	r3, [r7, #4]
 8000908:	edc3 7a03 	vstr	s15, [r3, #12]

	maf->count++;
 800090c:	687b      	ldr	r3, [r7, #4]
 800090e:	685b      	ldr	r3, [r3, #4]
 8000910:	1c5a      	adds	r2, r3, #1
 8000912:	687b      	ldr	r3, [r7, #4]
 8000914:	605a      	str	r2, [r3, #4]
	if(maf->count >= maf->n_maf)
 8000916:	687b      	ldr	r3, [r7, #4]
 8000918:	685a      	ldr	r2, [r3, #4]
 800091a:	687b      	ldr	r3, [r7, #4]
 800091c:	681b      	ldr	r3, [r3, #0]
 800091e:	429a      	cmp	r2, r3
 8000920:	db02      	blt.n	8000928 <MAF_Filter+0x88>
	{
		maf->count = 0;
 8000922:	687b      	ldr	r3, [r7, #4]
 8000924:	2200      	movs	r2, #0
 8000926:	605a      	str	r2, [r3, #4]
	}
}
 8000928:	bf00      	nop
 800092a:	3714      	adds	r7, #20
 800092c:	46bd      	mov	sp, r7
 800092e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000932:	4770      	bx	lr

08000934 <LL_ADC_REG_SetSequencerRanks>:
  *         (1) On STM32F4, parameter available only on ADC instance: ADC1.\n
  *         (2) On devices STM32F42x and STM32F43x, limitation: this internal channel is shared between temperature sensor and Vbat, only 1 measurement path must be enabled.
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8000934:	b480      	push	{r7}
 8000936:	b089      	sub	sp, #36	; 0x24
 8000938:	af00      	add	r7, sp, #0
 800093a:	60f8      	str	r0, [r7, #12]
 800093c:	60b9      	str	r1, [r7, #8]
 800093e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, __ADC_MASK_SHIFT(Rank, ADC_REG_SQRX_REGOFFSET_MASK));
 8000940:	68fb      	ldr	r3, [r7, #12]
 8000942:	332c      	adds	r3, #44	; 0x2c
 8000944:	4619      	mov	r1, r3
 8000946:	68bb      	ldr	r3, [r7, #8]
 8000948:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800094c:	f44f 7240 	mov.w	r2, #768	; 0x300
 8000950:	61ba      	str	r2, [r7, #24]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000952:	69ba      	ldr	r2, [r7, #24]
 8000954:	fa92 f2a2 	rbit	r2, r2
 8000958:	617a      	str	r2, [r7, #20]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800095a:	697a      	ldr	r2, [r7, #20]
 800095c:	fab2 f282 	clz	r2, r2
 8000960:	b2d2      	uxtb	r2, r2
 8000962:	40d3      	lsrs	r3, r2
 8000964:	009b      	lsls	r3, r3, #2
 8000966:	440b      	add	r3, r1
 8000968:	61fb      	str	r3, [r7, #28]
  
  MODIFY_REG(*preg,
 800096a:	69fb      	ldr	r3, [r7, #28]
 800096c:	681a      	ldr	r2, [r3, #0]
 800096e:	68bb      	ldr	r3, [r7, #8]
 8000970:	f003 031f 	and.w	r3, r3, #31
 8000974:	211f      	movs	r1, #31
 8000976:	fa01 f303 	lsl.w	r3, r1, r3
 800097a:	43db      	mvns	r3, r3
 800097c:	401a      	ands	r2, r3
 800097e:	687b      	ldr	r3, [r7, #4]
 8000980:	f003 011f 	and.w	r1, r3, #31
 8000984:	68bb      	ldr	r3, [r7, #8]
 8000986:	f003 031f 	and.w	r3, r3, #31
 800098a:	fa01 f303 	lsl.w	r3, r1, r3
 800098e:	431a      	orrs	r2, r3
 8000990:	69fb      	ldr	r3, [r7, #28]
 8000992:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             (Channel & ADC_CHANNEL_ID_NUMBER_MASK) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8000994:	bf00      	nop
 8000996:	3724      	adds	r7, #36	; 0x24
 8000998:	46bd      	mov	sp, r7
 800099a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800099e:	4770      	bx	lr

080009a0 <LL_ADC_REG_SetFlagEndOfConversion>:
  *         @arg @ref LL_ADC_REG_FLAG_EOC_SEQUENCE_CONV
  *         @arg @ref LL_ADC_REG_FLAG_EOC_UNITARY_CONV
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetFlagEndOfConversion(ADC_TypeDef *ADCx, uint32_t EocSelection)
{
 80009a0:	b480      	push	{r7}
 80009a2:	b083      	sub	sp, #12
 80009a4:	af00      	add	r7, sp, #0
 80009a6:	6078      	str	r0, [r7, #4]
 80009a8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR2, ADC_CR2_EOCS, EocSelection);
 80009aa:	687b      	ldr	r3, [r7, #4]
 80009ac:	689b      	ldr	r3, [r3, #8]
 80009ae:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80009b2:	683b      	ldr	r3, [r7, #0]
 80009b4:	431a      	orrs	r2, r3
 80009b6:	687b      	ldr	r3, [r7, #4]
 80009b8:	609a      	str	r2, [r3, #8]
}
 80009ba:	bf00      	nop
 80009bc:	370c      	adds	r7, #12
 80009be:	46bd      	mov	sp, r7
 80009c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009c4:	4770      	bx	lr

080009c6 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_144CYCLES
  *         @arg @ref LL_ADC_SAMPLINGTIME_480CYCLES
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80009c6:	b480      	push	{r7}
 80009c8:	b08d      	sub	sp, #52	; 0x34
 80009ca:	af00      	add	r7, sp, #0
 80009cc:	60f8      	str	r0, [r7, #12]
 80009ce:	60b9      	str	r1, [r7, #8]
 80009d0:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, __ADC_MASK_SHIFT(Channel, ADC_CHANNEL_SMPRX_REGOFFSET_MASK));
 80009d2:	68fb      	ldr	r3, [r7, #12]
 80009d4:	330c      	adds	r3, #12
 80009d6:	4619      	mov	r1, r3
 80009d8:	68bb      	ldr	r3, [r7, #8]
 80009da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80009de:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80009e2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80009e4:	69ba      	ldr	r2, [r7, #24]
 80009e6:	fa92 f2a2 	rbit	r2, r2
 80009ea:	617a      	str	r2, [r7, #20]
  return result;
 80009ec:	697a      	ldr	r2, [r7, #20]
 80009ee:	fab2 f282 	clz	r2, r2
 80009f2:	b2d2      	uxtb	r2, r2
 80009f4:	40d3      	lsrs	r3, r2
 80009f6:	009b      	lsls	r3, r3, #2
 80009f8:	440b      	add	r3, r1
 80009fa:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  MODIFY_REG(*preg,
 80009fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80009fe:	681a      	ldr	r2, [r3, #0]
 8000a00:	68bb      	ldr	r3, [r7, #8]
 8000a02:	f003 73f8 	and.w	r3, r3, #32505856	; 0x1f00000
 8000a06:	f04f 71f8 	mov.w	r1, #32505856	; 0x1f00000
 8000a0a:	6239      	str	r1, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000a0c:	6a39      	ldr	r1, [r7, #32]
 8000a0e:	fa91 f1a1 	rbit	r1, r1
 8000a12:	61f9      	str	r1, [r7, #28]
  return result;
 8000a14:	69f9      	ldr	r1, [r7, #28]
 8000a16:	fab1 f181 	clz	r1, r1
 8000a1a:	b2c9      	uxtb	r1, r1
 8000a1c:	40cb      	lsrs	r3, r1
 8000a1e:	2107      	movs	r1, #7
 8000a20:	fa01 f303 	lsl.w	r3, r1, r3
 8000a24:	43db      	mvns	r3, r3
 8000a26:	401a      	ands	r2, r3
 8000a28:	68bb      	ldr	r3, [r7, #8]
 8000a2a:	f003 73f8 	and.w	r3, r3, #32505856	; 0x1f00000
 8000a2e:	f04f 71f8 	mov.w	r1, #32505856	; 0x1f00000
 8000a32:	62b9      	str	r1, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000a34:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8000a36:	fa91 f1a1 	rbit	r1, r1
 8000a3a:	6279      	str	r1, [r7, #36]	; 0x24
  return result;
 8000a3c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8000a3e:	fab1 f181 	clz	r1, r1
 8000a42:	b2c9      	uxtb	r1, r1
 8000a44:	40cb      	lsrs	r3, r1
 8000a46:	6879      	ldr	r1, [r7, #4]
 8000a48:	fa01 f303 	lsl.w	r3, r1, r3
 8000a4c:	431a      	orrs	r2, r3
 8000a4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000a50:	601a      	str	r2, [r3, #0]
             ADC_SMPR2_SMP0 << __ADC_MASK_SHIFT(Channel, ADC_CHANNEL_SMPx_BITOFFSET_MASK),
             SamplingTime   << __ADC_MASK_SHIFT(Channel, ADC_CHANNEL_SMPx_BITOFFSET_MASK));
}
 8000a52:	bf00      	nop
 8000a54:	3734      	adds	r7, #52	; 0x34
 8000a56:	46bd      	mov	sp, r7
 8000a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a5c:	4770      	bx	lr
	...

08000a60 <LL_DMA_SetDataTransferDirection>:
  *         @arg @ref LL_DMA_DIRECTION_MEMORY_TO_PERIPH
  *         @arg @ref LL_DMA_DIRECTION_MEMORY_TO_MEMORY
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetDataTransferDirection(DMA_TypeDef *DMAx, uint32_t Stream, uint32_t  Direction)
{
 8000a60:	b480      	push	{r7}
 8000a62:	b085      	sub	sp, #20
 8000a64:	af00      	add	r7, sp, #0
 8000a66:	60f8      	str	r0, [r7, #12]
 8000a68:	60b9      	str	r1, [r7, #8]
 8000a6a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_DIR, Direction);
 8000a6c:	4a0d      	ldr	r2, [pc, #52]	; (8000aa4 <LL_DMA_SetDataTransferDirection+0x44>)
 8000a6e:	68bb      	ldr	r3, [r7, #8]
 8000a70:	4413      	add	r3, r2
 8000a72:	781b      	ldrb	r3, [r3, #0]
 8000a74:	461a      	mov	r2, r3
 8000a76:	68fb      	ldr	r3, [r7, #12]
 8000a78:	4413      	add	r3, r2
 8000a7a:	681b      	ldr	r3, [r3, #0]
 8000a7c:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8000a80:	4908      	ldr	r1, [pc, #32]	; (8000aa4 <LL_DMA_SetDataTransferDirection+0x44>)
 8000a82:	68bb      	ldr	r3, [r7, #8]
 8000a84:	440b      	add	r3, r1
 8000a86:	781b      	ldrb	r3, [r3, #0]
 8000a88:	4619      	mov	r1, r3
 8000a8a:	68fb      	ldr	r3, [r7, #12]
 8000a8c:	440b      	add	r3, r1
 8000a8e:	4619      	mov	r1, r3
 8000a90:	687b      	ldr	r3, [r7, #4]
 8000a92:	4313      	orrs	r3, r2
 8000a94:	600b      	str	r3, [r1, #0]
}
 8000a96:	bf00      	nop
 8000a98:	3714      	adds	r7, #20
 8000a9a:	46bd      	mov	sp, r7
 8000a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aa0:	4770      	bx	lr
 8000aa2:	bf00      	nop
 8000aa4:	080044b4 	.word	0x080044b4

08000aa8 <LL_DMA_SetMode>:
  *         @arg @ref LL_DMA_MODE_CIRCULAR
  *         @arg @ref LL_DMA_MODE_PFCTRL
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetMode(DMA_TypeDef *DMAx, uint32_t Stream, uint32_t Mode)
{
 8000aa8:	b480      	push	{r7}
 8000aaa:	b085      	sub	sp, #20
 8000aac:	af00      	add	r7, sp, #0
 8000aae:	60f8      	str	r0, [r7, #12]
 8000ab0:	60b9      	str	r1, [r7, #8]
 8000ab2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_CIRC | DMA_SxCR_PFCTRL, Mode);
 8000ab4:	4a0d      	ldr	r2, [pc, #52]	; (8000aec <LL_DMA_SetMode+0x44>)
 8000ab6:	68bb      	ldr	r3, [r7, #8]
 8000ab8:	4413      	add	r3, r2
 8000aba:	781b      	ldrb	r3, [r3, #0]
 8000abc:	461a      	mov	r2, r3
 8000abe:	68fb      	ldr	r3, [r7, #12]
 8000ac0:	4413      	add	r3, r2
 8000ac2:	681b      	ldr	r3, [r3, #0]
 8000ac4:	f423 7290 	bic.w	r2, r3, #288	; 0x120
 8000ac8:	4908      	ldr	r1, [pc, #32]	; (8000aec <LL_DMA_SetMode+0x44>)
 8000aca:	68bb      	ldr	r3, [r7, #8]
 8000acc:	440b      	add	r3, r1
 8000ace:	781b      	ldrb	r3, [r3, #0]
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	68fb      	ldr	r3, [r7, #12]
 8000ad4:	440b      	add	r3, r1
 8000ad6:	4619      	mov	r1, r3
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	4313      	orrs	r3, r2
 8000adc:	600b      	str	r3, [r1, #0]
}
 8000ade:	bf00      	nop
 8000ae0:	3714      	adds	r7, #20
 8000ae2:	46bd      	mov	sp, r7
 8000ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae8:	4770      	bx	lr
 8000aea:	bf00      	nop
 8000aec:	080044b4 	.word	0x080044b4

08000af0 <LL_DMA_SetPeriphIncMode>:
  *         @arg @ref LL_DMA_PERIPH_NOINCREMENT
  *         @arg @ref LL_DMA_PERIPH_INCREMENT
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetPeriphIncMode(DMA_TypeDef *DMAx, uint32_t Stream, uint32_t IncrementMode)
{
 8000af0:	b480      	push	{r7}
 8000af2:	b085      	sub	sp, #20
 8000af4:	af00      	add	r7, sp, #0
 8000af6:	60f8      	str	r0, [r7, #12]
 8000af8:	60b9      	str	r1, [r7, #8]
 8000afa:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_PINC, IncrementMode);
 8000afc:	4a0d      	ldr	r2, [pc, #52]	; (8000b34 <LL_DMA_SetPeriphIncMode+0x44>)
 8000afe:	68bb      	ldr	r3, [r7, #8]
 8000b00:	4413      	add	r3, r2
 8000b02:	781b      	ldrb	r3, [r3, #0]
 8000b04:	461a      	mov	r2, r3
 8000b06:	68fb      	ldr	r3, [r7, #12]
 8000b08:	4413      	add	r3, r2
 8000b0a:	681b      	ldr	r3, [r3, #0]
 8000b0c:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8000b10:	4908      	ldr	r1, [pc, #32]	; (8000b34 <LL_DMA_SetPeriphIncMode+0x44>)
 8000b12:	68bb      	ldr	r3, [r7, #8]
 8000b14:	440b      	add	r3, r1
 8000b16:	781b      	ldrb	r3, [r3, #0]
 8000b18:	4619      	mov	r1, r3
 8000b1a:	68fb      	ldr	r3, [r7, #12]
 8000b1c:	440b      	add	r3, r1
 8000b1e:	4619      	mov	r1, r3
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	4313      	orrs	r3, r2
 8000b24:	600b      	str	r3, [r1, #0]
}
 8000b26:	bf00      	nop
 8000b28:	3714      	adds	r7, #20
 8000b2a:	46bd      	mov	sp, r7
 8000b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b30:	4770      	bx	lr
 8000b32:	bf00      	nop
 8000b34:	080044b4 	.word	0x080044b4

08000b38 <LL_DMA_SetMemoryIncMode>:
  *         @arg @ref LL_DMA_MEMORY_NOINCREMENT
  *         @arg @ref LL_DMA_MEMORY_INCREMENT
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetMemoryIncMode(DMA_TypeDef *DMAx, uint32_t Stream, uint32_t IncrementMode)
{
 8000b38:	b480      	push	{r7}
 8000b3a:	b085      	sub	sp, #20
 8000b3c:	af00      	add	r7, sp, #0
 8000b3e:	60f8      	str	r0, [r7, #12]
 8000b40:	60b9      	str	r1, [r7, #8]
 8000b42:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_MINC, IncrementMode);
 8000b44:	4a0d      	ldr	r2, [pc, #52]	; (8000b7c <LL_DMA_SetMemoryIncMode+0x44>)
 8000b46:	68bb      	ldr	r3, [r7, #8]
 8000b48:	4413      	add	r3, r2
 8000b4a:	781b      	ldrb	r3, [r3, #0]
 8000b4c:	461a      	mov	r2, r3
 8000b4e:	68fb      	ldr	r3, [r7, #12]
 8000b50:	4413      	add	r3, r2
 8000b52:	681b      	ldr	r3, [r3, #0]
 8000b54:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8000b58:	4908      	ldr	r1, [pc, #32]	; (8000b7c <LL_DMA_SetMemoryIncMode+0x44>)
 8000b5a:	68bb      	ldr	r3, [r7, #8]
 8000b5c:	440b      	add	r3, r1
 8000b5e:	781b      	ldrb	r3, [r3, #0]
 8000b60:	4619      	mov	r1, r3
 8000b62:	68fb      	ldr	r3, [r7, #12]
 8000b64:	440b      	add	r3, r1
 8000b66:	4619      	mov	r1, r3
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	4313      	orrs	r3, r2
 8000b6c:	600b      	str	r3, [r1, #0]
}
 8000b6e:	bf00      	nop
 8000b70:	3714      	adds	r7, #20
 8000b72:	46bd      	mov	sp, r7
 8000b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b78:	4770      	bx	lr
 8000b7a:	bf00      	nop
 8000b7c:	080044b4 	.word	0x080044b4

08000b80 <LL_DMA_SetPeriphSize>:
  *         @arg @ref LL_DMA_PDATAALIGN_HALFWORD
  *         @arg @ref LL_DMA_PDATAALIGN_WORD
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetPeriphSize(DMA_TypeDef *DMAx, uint32_t Stream, uint32_t  Size)
{
 8000b80:	b480      	push	{r7}
 8000b82:	b085      	sub	sp, #20
 8000b84:	af00      	add	r7, sp, #0
 8000b86:	60f8      	str	r0, [r7, #12]
 8000b88:	60b9      	str	r1, [r7, #8]
 8000b8a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_PSIZE, Size);
 8000b8c:	4a0d      	ldr	r2, [pc, #52]	; (8000bc4 <LL_DMA_SetPeriphSize+0x44>)
 8000b8e:	68bb      	ldr	r3, [r7, #8]
 8000b90:	4413      	add	r3, r2
 8000b92:	781b      	ldrb	r3, [r3, #0]
 8000b94:	461a      	mov	r2, r3
 8000b96:	68fb      	ldr	r3, [r7, #12]
 8000b98:	4413      	add	r3, r2
 8000b9a:	681b      	ldr	r3, [r3, #0]
 8000b9c:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 8000ba0:	4908      	ldr	r1, [pc, #32]	; (8000bc4 <LL_DMA_SetPeriphSize+0x44>)
 8000ba2:	68bb      	ldr	r3, [r7, #8]
 8000ba4:	440b      	add	r3, r1
 8000ba6:	781b      	ldrb	r3, [r3, #0]
 8000ba8:	4619      	mov	r1, r3
 8000baa:	68fb      	ldr	r3, [r7, #12]
 8000bac:	440b      	add	r3, r1
 8000bae:	4619      	mov	r1, r3
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	4313      	orrs	r3, r2
 8000bb4:	600b      	str	r3, [r1, #0]
}
 8000bb6:	bf00      	nop
 8000bb8:	3714      	adds	r7, #20
 8000bba:	46bd      	mov	sp, r7
 8000bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc0:	4770      	bx	lr
 8000bc2:	bf00      	nop
 8000bc4:	080044b4 	.word	0x080044b4

08000bc8 <LL_DMA_SetMemorySize>:
  *         @arg @ref LL_DMA_MDATAALIGN_HALFWORD
  *         @arg @ref LL_DMA_MDATAALIGN_WORD
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetMemorySize(DMA_TypeDef *DMAx, uint32_t Stream, uint32_t  Size)
{
 8000bc8:	b480      	push	{r7}
 8000bca:	b085      	sub	sp, #20
 8000bcc:	af00      	add	r7, sp, #0
 8000bce:	60f8      	str	r0, [r7, #12]
 8000bd0:	60b9      	str	r1, [r7, #8]
 8000bd2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_MSIZE, Size);
 8000bd4:	4a0d      	ldr	r2, [pc, #52]	; (8000c0c <LL_DMA_SetMemorySize+0x44>)
 8000bd6:	68bb      	ldr	r3, [r7, #8]
 8000bd8:	4413      	add	r3, r2
 8000bda:	781b      	ldrb	r3, [r3, #0]
 8000bdc:	461a      	mov	r2, r3
 8000bde:	68fb      	ldr	r3, [r7, #12]
 8000be0:	4413      	add	r3, r2
 8000be2:	681b      	ldr	r3, [r3, #0]
 8000be4:	f423 42c0 	bic.w	r2, r3, #24576	; 0x6000
 8000be8:	4908      	ldr	r1, [pc, #32]	; (8000c0c <LL_DMA_SetMemorySize+0x44>)
 8000bea:	68bb      	ldr	r3, [r7, #8]
 8000bec:	440b      	add	r3, r1
 8000bee:	781b      	ldrb	r3, [r3, #0]
 8000bf0:	4619      	mov	r1, r3
 8000bf2:	68fb      	ldr	r3, [r7, #12]
 8000bf4:	440b      	add	r3, r1
 8000bf6:	4619      	mov	r1, r3
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	4313      	orrs	r3, r2
 8000bfc:	600b      	str	r3, [r1, #0]
}
 8000bfe:	bf00      	nop
 8000c00:	3714      	adds	r7, #20
 8000c02:	46bd      	mov	sp, r7
 8000c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c08:	4770      	bx	lr
 8000c0a:	bf00      	nop
 8000c0c:	080044b4 	.word	0x080044b4

08000c10 <LL_DMA_SetStreamPriorityLevel>:
  *         @arg @ref LL_DMA_PRIORITY_HIGH
  *         @arg @ref LL_DMA_PRIORITY_VERYHIGH
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetStreamPriorityLevel(DMA_TypeDef *DMAx, uint32_t Stream, uint32_t  Priority)
{
 8000c10:	b480      	push	{r7}
 8000c12:	b085      	sub	sp, #20
 8000c14:	af00      	add	r7, sp, #0
 8000c16:	60f8      	str	r0, [r7, #12]
 8000c18:	60b9      	str	r1, [r7, #8]
 8000c1a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_PL, Priority);
 8000c1c:	4a0d      	ldr	r2, [pc, #52]	; (8000c54 <LL_DMA_SetStreamPriorityLevel+0x44>)
 8000c1e:	68bb      	ldr	r3, [r7, #8]
 8000c20:	4413      	add	r3, r2
 8000c22:	781b      	ldrb	r3, [r3, #0]
 8000c24:	461a      	mov	r2, r3
 8000c26:	68fb      	ldr	r3, [r7, #12]
 8000c28:	4413      	add	r3, r2
 8000c2a:	681b      	ldr	r3, [r3, #0]
 8000c2c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8000c30:	4908      	ldr	r1, [pc, #32]	; (8000c54 <LL_DMA_SetStreamPriorityLevel+0x44>)
 8000c32:	68bb      	ldr	r3, [r7, #8]
 8000c34:	440b      	add	r3, r1
 8000c36:	781b      	ldrb	r3, [r3, #0]
 8000c38:	4619      	mov	r1, r3
 8000c3a:	68fb      	ldr	r3, [r7, #12]
 8000c3c:	440b      	add	r3, r1
 8000c3e:	4619      	mov	r1, r3
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	4313      	orrs	r3, r2
 8000c44:	600b      	str	r3, [r1, #0]
}
 8000c46:	bf00      	nop
 8000c48:	3714      	adds	r7, #20
 8000c4a:	46bd      	mov	sp, r7
 8000c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c50:	4770      	bx	lr
 8000c52:	bf00      	nop
 8000c54:	080044b4 	.word	0x080044b4

08000c58 <LL_DMA_SetChannelSelection>:
  *         @arg @ref LL_DMA_CHANNEL_6
  *         @arg @ref LL_DMA_CHANNEL_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetChannelSelection(DMA_TypeDef *DMAx, uint32_t Stream, uint32_t Channel)
{
 8000c58:	b480      	push	{r7}
 8000c5a:	b085      	sub	sp, #20
 8000c5c:	af00      	add	r7, sp, #0
 8000c5e:	60f8      	str	r0, [r7, #12]
 8000c60:	60b9      	str	r1, [r7, #8]
 8000c62:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_CHSEL, Channel);
 8000c64:	4a0d      	ldr	r2, [pc, #52]	; (8000c9c <LL_DMA_SetChannelSelection+0x44>)
 8000c66:	68bb      	ldr	r3, [r7, #8]
 8000c68:	4413      	add	r3, r2
 8000c6a:	781b      	ldrb	r3, [r3, #0]
 8000c6c:	461a      	mov	r2, r3
 8000c6e:	68fb      	ldr	r3, [r7, #12]
 8000c70:	4413      	add	r3, r2
 8000c72:	681b      	ldr	r3, [r3, #0]
 8000c74:	f023 6260 	bic.w	r2, r3, #234881024	; 0xe000000
 8000c78:	4908      	ldr	r1, [pc, #32]	; (8000c9c <LL_DMA_SetChannelSelection+0x44>)
 8000c7a:	68bb      	ldr	r3, [r7, #8]
 8000c7c:	440b      	add	r3, r1
 8000c7e:	781b      	ldrb	r3, [r3, #0]
 8000c80:	4619      	mov	r1, r3
 8000c82:	68fb      	ldr	r3, [r7, #12]
 8000c84:	440b      	add	r3, r1
 8000c86:	4619      	mov	r1, r3
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	4313      	orrs	r3, r2
 8000c8c:	600b      	str	r3, [r1, #0]
}
 8000c8e:	bf00      	nop
 8000c90:	3714      	adds	r7, #20
 8000c92:	46bd      	mov	sp, r7
 8000c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c98:	4770      	bx	lr
 8000c9a:	bf00      	nop
 8000c9c:	080044b4 	.word	0x080044b4

08000ca0 <LL_DMA_DisableFifoMode>:
  *         @arg @ref LL_DMA_STREAM_6
  *         @arg @ref LL_DMA_STREAM_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_DisableFifoMode(DMA_TypeDef *DMAx, uint32_t Stream)
{
 8000ca0:	b480      	push	{r7}
 8000ca2:	b083      	sub	sp, #12
 8000ca4:	af00      	add	r7, sp, #0
 8000ca6:	6078      	str	r0, [r7, #4]
 8000ca8:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(((DMA_Stream_TypeDef *)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->FCR, DMA_SxFCR_DMDIS);
 8000caa:	4a0c      	ldr	r2, [pc, #48]	; (8000cdc <LL_DMA_DisableFifoMode+0x3c>)
 8000cac:	683b      	ldr	r3, [r7, #0]
 8000cae:	4413      	add	r3, r2
 8000cb0:	781b      	ldrb	r3, [r3, #0]
 8000cb2:	461a      	mov	r2, r3
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	4413      	add	r3, r2
 8000cb8:	695b      	ldr	r3, [r3, #20]
 8000cba:	4908      	ldr	r1, [pc, #32]	; (8000cdc <LL_DMA_DisableFifoMode+0x3c>)
 8000cbc:	683a      	ldr	r2, [r7, #0]
 8000cbe:	440a      	add	r2, r1
 8000cc0:	7812      	ldrb	r2, [r2, #0]
 8000cc2:	4611      	mov	r1, r2
 8000cc4:	687a      	ldr	r2, [r7, #4]
 8000cc6:	440a      	add	r2, r1
 8000cc8:	f023 0304 	bic.w	r3, r3, #4
 8000ccc:	6153      	str	r3, [r2, #20]
}
 8000cce:	bf00      	nop
 8000cd0:	370c      	adds	r7, #12
 8000cd2:	46bd      	mov	sp, r7
 8000cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd8:	4770      	bx	lr
 8000cda:	bf00      	nop
 8000cdc:	080044b4 	.word	0x080044b4

08000ce0 <LL_AHB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 8000ce0:	b480      	push	{r7}
 8000ce2:	b085      	sub	sp, #20
 8000ce4:	af00      	add	r7, sp, #0
 8000ce6:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB1ENR, Periphs);
 8000ce8:	4b08      	ldr	r3, [pc, #32]	; (8000d0c <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000cea:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000cec:	4907      	ldr	r1, [pc, #28]	; (8000d0c <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	4313      	orrs	r3, r2
 8000cf2:	630b      	str	r3, [r1, #48]	; 0x30
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8000cf4:	4b05      	ldr	r3, [pc, #20]	; (8000d0c <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000cf6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	4013      	ands	r3, r2
 8000cfc:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000cfe:	68fb      	ldr	r3, [r7, #12]
}
 8000d00:	bf00      	nop
 8000d02:	3714      	adds	r7, #20
 8000d04:	46bd      	mov	sp, r7
 8000d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d0a:	4770      	bx	lr
 8000d0c:	40023800 	.word	0x40023800

08000d10 <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000d10:	b480      	push	{r7}
 8000d12:	b085      	sub	sp, #20
 8000d14:	af00      	add	r7, sp, #0
 8000d16:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8000d18:	4b08      	ldr	r3, [pc, #32]	; (8000d3c <LL_APB2_GRP1_EnableClock+0x2c>)
 8000d1a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000d1c:	4907      	ldr	r1, [pc, #28]	; (8000d3c <LL_APB2_GRP1_EnableClock+0x2c>)
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	4313      	orrs	r3, r2
 8000d22:	644b      	str	r3, [r1, #68]	; 0x44
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8000d24:	4b05      	ldr	r3, [pc, #20]	; (8000d3c <LL_APB2_GRP1_EnableClock+0x2c>)
 8000d26:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	4013      	ands	r3, r2
 8000d2c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000d2e:	68fb      	ldr	r3, [r7, #12]
}
 8000d30:	bf00      	nop
 8000d32:	3714      	adds	r7, #20
 8000d34:	46bd      	mov	sp, r7
 8000d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d3a:	4770      	bx	lr
 8000d3c:	40023800 	.word	0x40023800

08000d40 <MX_ADC1_Init>:

/* USER CODE END 0 */

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000d40:	b580      	push	{r7, lr}
 8000d42:	b092      	sub	sp, #72	; 0x48
 8000d44:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  LL_ADC_InitTypeDef ADC_InitStruct = {0};
 8000d46:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000d4a:	2200      	movs	r2, #0
 8000d4c:	601a      	str	r2, [r3, #0]
 8000d4e:	605a      	str	r2, [r3, #4]
 8000d50:	609a      	str	r2, [r3, #8]
  LL_ADC_REG_InitTypeDef ADC_REG_InitStruct = {0};
 8000d52:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000d56:	2200      	movs	r2, #0
 8000d58:	601a      	str	r2, [r3, #0]
 8000d5a:	605a      	str	r2, [r3, #4]
 8000d5c:	609a      	str	r2, [r3, #8]
 8000d5e:	60da      	str	r2, [r3, #12]
 8000d60:	611a      	str	r2, [r3, #16]
  LL_ADC_CommonInitTypeDef ADC_CommonInitStruct = {0};
 8000d62:	f107 0318 	add.w	r3, r7, #24
 8000d66:	2200      	movs	r2, #0
 8000d68:	601a      	str	r2, [r3, #0]
 8000d6a:	605a      	str	r2, [r3, #4]
 8000d6c:	609a      	str	r2, [r3, #8]
 8000d6e:	60da      	str	r2, [r3, #12]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d70:	463b      	mov	r3, r7
 8000d72:	2200      	movs	r2, #0
 8000d74:	601a      	str	r2, [r3, #0]
 8000d76:	605a      	str	r2, [r3, #4]
 8000d78:	609a      	str	r2, [r3, #8]
 8000d7a:	60da      	str	r2, [r3, #12]
 8000d7c:	611a      	str	r2, [r3, #16]
 8000d7e:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_ADC1);
 8000d80:	f44f 7080 	mov.w	r0, #256	; 0x100
 8000d84:	f7ff ffc4 	bl	8000d10 <LL_APB2_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 8000d88:	2004      	movs	r0, #4
 8000d8a:	f7ff ffa9 	bl	8000ce0 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8000d8e:	2001      	movs	r0, #1
 8000d90:	f7ff ffa6 	bl	8000ce0 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 8000d94:	2002      	movs	r0, #2
 8000d96:	f7ff ffa3 	bl	8000ce0 <LL_AHB1_GRP1_EnableClock>
  PC4   ------> ADC1_IN14
  PC5   ------> ADC1_IN15
  PB0   ------> ADC1_IN8
  PB1   ------> ADC1_IN9
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_0|LL_GPIO_PIN_1|LL_GPIO_PIN_2|LL_GPIO_PIN_3
 8000d9a:	233f      	movs	r3, #63	; 0x3f
 8000d9c:	603b      	str	r3, [r7, #0]
                          |LL_GPIO_PIN_4|LL_GPIO_PIN_5;
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8000d9e:	2303      	movs	r3, #3
 8000da0:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000da2:	2300      	movs	r3, #0
 8000da4:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000da6:	463b      	mov	r3, r7
 8000da8:	4619      	mov	r1, r3
 8000daa:	487b      	ldr	r0, [pc, #492]	; (8000f98 <MX_ADC1_Init+0x258>)
 8000dac:	f003 f901 	bl	8003fb2 <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_0|LL_GPIO_PIN_1|LL_GPIO_PIN_2;
 8000db0:	2307      	movs	r3, #7
 8000db2:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8000db4:	2303      	movs	r3, #3
 8000db6:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000db8:	2300      	movs	r3, #0
 8000dba:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dbc:	463b      	mov	r3, r7
 8000dbe:	4619      	mov	r1, r3
 8000dc0:	4876      	ldr	r0, [pc, #472]	; (8000f9c <MX_ADC1_Init+0x25c>)
 8000dc2:	f003 f8f6 	bl	8003fb2 <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_0|LL_GPIO_PIN_1;
 8000dc6:	2303      	movs	r3, #3
 8000dc8:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8000dca:	2303      	movs	r3, #3
 8000dcc:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000dce:	2300      	movs	r3, #0
 8000dd0:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000dd2:	463b      	mov	r3, r7
 8000dd4:	4619      	mov	r1, r3
 8000dd6:	4872      	ldr	r0, [pc, #456]	; (8000fa0 <MX_ADC1_Init+0x260>)
 8000dd8:	f003 f8eb 	bl	8003fb2 <LL_GPIO_Init>

  /* ADC1 DMA Init */

  /* ADC1 Init */
  LL_DMA_SetChannelSelection(DMA2, LL_DMA_STREAM_0, LL_DMA_CHANNEL_0);
 8000ddc:	2200      	movs	r2, #0
 8000dde:	2100      	movs	r1, #0
 8000de0:	4870      	ldr	r0, [pc, #448]	; (8000fa4 <MX_ADC1_Init+0x264>)
 8000de2:	f7ff ff39 	bl	8000c58 <LL_DMA_SetChannelSelection>

  LL_DMA_SetDataTransferDirection(DMA2, LL_DMA_STREAM_0, LL_DMA_DIRECTION_PERIPH_TO_MEMORY);
 8000de6:	2200      	movs	r2, #0
 8000de8:	2100      	movs	r1, #0
 8000dea:	486e      	ldr	r0, [pc, #440]	; (8000fa4 <MX_ADC1_Init+0x264>)
 8000dec:	f7ff fe38 	bl	8000a60 <LL_DMA_SetDataTransferDirection>

  LL_DMA_SetStreamPriorityLevel(DMA2, LL_DMA_STREAM_0, LL_DMA_PRIORITY_LOW);
 8000df0:	2200      	movs	r2, #0
 8000df2:	2100      	movs	r1, #0
 8000df4:	486b      	ldr	r0, [pc, #428]	; (8000fa4 <MX_ADC1_Init+0x264>)
 8000df6:	f7ff ff0b 	bl	8000c10 <LL_DMA_SetStreamPriorityLevel>

  LL_DMA_SetMode(DMA2, LL_DMA_STREAM_0, LL_DMA_MODE_CIRCULAR);
 8000dfa:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000dfe:	2100      	movs	r1, #0
 8000e00:	4868      	ldr	r0, [pc, #416]	; (8000fa4 <MX_ADC1_Init+0x264>)
 8000e02:	f7ff fe51 	bl	8000aa8 <LL_DMA_SetMode>

  LL_DMA_SetPeriphIncMode(DMA2, LL_DMA_STREAM_0, LL_DMA_PERIPH_NOINCREMENT);
 8000e06:	2200      	movs	r2, #0
 8000e08:	2100      	movs	r1, #0
 8000e0a:	4866      	ldr	r0, [pc, #408]	; (8000fa4 <MX_ADC1_Init+0x264>)
 8000e0c:	f7ff fe70 	bl	8000af0 <LL_DMA_SetPeriphIncMode>

  LL_DMA_SetMemoryIncMode(DMA2, LL_DMA_STREAM_0, LL_DMA_MEMORY_INCREMENT);
 8000e10:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000e14:	2100      	movs	r1, #0
 8000e16:	4863      	ldr	r0, [pc, #396]	; (8000fa4 <MX_ADC1_Init+0x264>)
 8000e18:	f7ff fe8e 	bl	8000b38 <LL_DMA_SetMemoryIncMode>

  LL_DMA_SetPeriphSize(DMA2, LL_DMA_STREAM_0, LL_DMA_PDATAALIGN_WORD);
 8000e1c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000e20:	2100      	movs	r1, #0
 8000e22:	4860      	ldr	r0, [pc, #384]	; (8000fa4 <MX_ADC1_Init+0x264>)
 8000e24:	f7ff feac 	bl	8000b80 <LL_DMA_SetPeriphSize>

  LL_DMA_SetMemorySize(DMA2, LL_DMA_STREAM_0, LL_DMA_MDATAALIGN_WORD);
 8000e28:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000e2c:	2100      	movs	r1, #0
 8000e2e:	485d      	ldr	r0, [pc, #372]	; (8000fa4 <MX_ADC1_Init+0x264>)
 8000e30:	f7ff feca 	bl	8000bc8 <LL_DMA_SetMemorySize>

  LL_DMA_DisableFifoMode(DMA2, LL_DMA_STREAM_0);
 8000e34:	2100      	movs	r1, #0
 8000e36:	485b      	ldr	r0, [pc, #364]	; (8000fa4 <MX_ADC1_Init+0x264>)
 8000e38:	f7ff ff32 	bl	8000ca0 <LL_DMA_DisableFifoMode>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  ADC_InitStruct.Resolution = LL_ADC_RESOLUTION_12B;
 8000e3c:	2300      	movs	r3, #0
 8000e3e:	63fb      	str	r3, [r7, #60]	; 0x3c
  ADC_InitStruct.DataAlignment = LL_ADC_DATA_ALIGN_RIGHT;
 8000e40:	2300      	movs	r3, #0
 8000e42:	643b      	str	r3, [r7, #64]	; 0x40
  ADC_InitStruct.SequencersScanMode = LL_ADC_SEQ_SCAN_ENABLE;
 8000e44:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000e48:	647b      	str	r3, [r7, #68]	; 0x44
  LL_ADC_Init(ADC1, &ADC_InitStruct);
 8000e4a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000e4e:	4619      	mov	r1, r3
 8000e50:	4855      	ldr	r0, [pc, #340]	; (8000fa8 <MX_ADC1_Init+0x268>)
 8000e52:	f002 ff3b 	bl	8003ccc <LL_ADC_Init>
  ADC_REG_InitStruct.TriggerSource = LL_ADC_REG_TRIG_SOFTWARE;
 8000e56:	2300      	movs	r3, #0
 8000e58:	62bb      	str	r3, [r7, #40]	; 0x28
  ADC_REG_InitStruct.SequencerLength = LL_ADC_REG_SEQ_SCAN_ENABLE_11RANKS;
 8000e5a:	f44f 0320 	mov.w	r3, #10485760	; 0xa00000
 8000e5e:	62fb      	str	r3, [r7, #44]	; 0x2c
  ADC_REG_InitStruct.SequencerDiscont = LL_ADC_REG_SEQ_DISCONT_DISABLE;
 8000e60:	2300      	movs	r3, #0
 8000e62:	633b      	str	r3, [r7, #48]	; 0x30
  ADC_REG_InitStruct.ContinuousMode = LL_ADC_REG_CONV_CONTINUOUS;
 8000e64:	2302      	movs	r3, #2
 8000e66:	637b      	str	r3, [r7, #52]	; 0x34
  ADC_REG_InitStruct.DMATransfer = LL_ADC_REG_DMA_TRANSFER_UNLIMITED;
 8000e68:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000e6c:	63bb      	str	r3, [r7, #56]	; 0x38
  LL_ADC_REG_Init(ADC1, &ADC_REG_InitStruct);
 8000e6e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000e72:	4619      	mov	r1, r3
 8000e74:	484c      	ldr	r0, [pc, #304]	; (8000fa8 <MX_ADC1_Init+0x268>)
 8000e76:	f002 ff55 	bl	8003d24 <LL_ADC_REG_Init>
  LL_ADC_REG_SetFlagEndOfConversion(ADC1, LL_ADC_REG_FLAG_EOC_SEQUENCE_CONV);
 8000e7a:	2100      	movs	r1, #0
 8000e7c:	484a      	ldr	r0, [pc, #296]	; (8000fa8 <MX_ADC1_Init+0x268>)
 8000e7e:	f7ff fd8f 	bl	80009a0 <LL_ADC_REG_SetFlagEndOfConversion>
  ADC_CommonInitStruct.CommonClock = LL_ADC_CLOCK_SYNC_PCLK_DIV4;
 8000e82:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000e86:	61bb      	str	r3, [r7, #24]
  ADC_CommonInitStruct.Multimode = LL_ADC_MULTI_INDEPENDENT;
 8000e88:	2300      	movs	r3, #0
 8000e8a:	61fb      	str	r3, [r7, #28]
  LL_ADC_CommonInit(__LL_ADC_COMMON_INSTANCE(ADC1), &ADC_CommonInitStruct);
 8000e8c:	f107 0318 	add.w	r3, r7, #24
 8000e90:	4619      	mov	r1, r3
 8000e92:	4846      	ldr	r0, [pc, #280]	; (8000fac <MX_ADC1_Init+0x26c>)
 8000e94:	f002 fed2 	bl	8003c3c <LL_ADC_CommonInit>

  /** Configure Regular Channel
  */
  LL_ADC_REG_SetSequencerRanks(ADC1, LL_ADC_REG_RANK_1, LL_ADC_CHANNEL_0);
 8000e98:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8000e9c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000ea0:	4841      	ldr	r0, [pc, #260]	; (8000fa8 <MX_ADC1_Init+0x268>)
 8000ea2:	f7ff fd47 	bl	8000934 <LL_ADC_REG_SetSequencerRanks>
  LL_ADC_SetChannelSamplingTime(ADC1, LL_ADC_CHANNEL_0, LL_ADC_SAMPLINGTIME_15CYCLES);
 8000ea6:	2201      	movs	r2, #1
 8000ea8:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8000eac:	483e      	ldr	r0, [pc, #248]	; (8000fa8 <MX_ADC1_Init+0x268>)
 8000eae:	f7ff fd8a 	bl	80009c6 <LL_ADC_SetChannelSamplingTime>

  /** Configure Regular Channel
  */
  LL_ADC_REG_SetSequencerRanks(ADC1, LL_ADC_REG_RANK_2, LL_ADC_CHANNEL_8);
 8000eb2:	4a3f      	ldr	r2, [pc, #252]	; (8000fb0 <MX_ADC1_Init+0x270>)
 8000eb4:	f240 2105 	movw	r1, #517	; 0x205
 8000eb8:	483b      	ldr	r0, [pc, #236]	; (8000fa8 <MX_ADC1_Init+0x268>)
 8000eba:	f7ff fd3b 	bl	8000934 <LL_ADC_REG_SetSequencerRanks>
  LL_ADC_SetChannelSamplingTime(ADC1, LL_ADC_CHANNEL_8, LL_ADC_SAMPLINGTIME_15CYCLES);
 8000ebe:	2201      	movs	r2, #1
 8000ec0:	493b      	ldr	r1, [pc, #236]	; (8000fb0 <MX_ADC1_Init+0x270>)
 8000ec2:	4839      	ldr	r0, [pc, #228]	; (8000fa8 <MX_ADC1_Init+0x268>)
 8000ec4:	f7ff fd7f 	bl	80009c6 <LL_ADC_SetChannelSamplingTime>

  /** Configure Regular Channel
  */
  LL_ADC_REG_SetSequencerRanks(ADC1, LL_ADC_REG_RANK_3, LL_ADC_CHANNEL_11);
 8000ec8:	4a3a      	ldr	r2, [pc, #232]	; (8000fb4 <MX_ADC1_Init+0x274>)
 8000eca:	f240 210a 	movw	r1, #522	; 0x20a
 8000ece:	4836      	ldr	r0, [pc, #216]	; (8000fa8 <MX_ADC1_Init+0x268>)
 8000ed0:	f7ff fd30 	bl	8000934 <LL_ADC_REG_SetSequencerRanks>
  LL_ADC_SetChannelSamplingTime(ADC1, LL_ADC_CHANNEL_11, LL_ADC_SAMPLINGTIME_15CYCLES);
 8000ed4:	2201      	movs	r2, #1
 8000ed6:	4937      	ldr	r1, [pc, #220]	; (8000fb4 <MX_ADC1_Init+0x274>)
 8000ed8:	4833      	ldr	r0, [pc, #204]	; (8000fa8 <MX_ADC1_Init+0x268>)
 8000eda:	f7ff fd74 	bl	80009c6 <LL_ADC_SetChannelSamplingTime>

  /** Configure Regular Channel
  */
  LL_ADC_REG_SetSequencerRanks(ADC1, LL_ADC_REG_RANK_4, LL_ADC_CHANNEL_12);
 8000ede:	4a36      	ldr	r2, [pc, #216]	; (8000fb8 <MX_ADC1_Init+0x278>)
 8000ee0:	f240 210f 	movw	r1, #527	; 0x20f
 8000ee4:	4830      	ldr	r0, [pc, #192]	; (8000fa8 <MX_ADC1_Init+0x268>)
 8000ee6:	f7ff fd25 	bl	8000934 <LL_ADC_REG_SetSequencerRanks>
  LL_ADC_SetChannelSamplingTime(ADC1, LL_ADC_CHANNEL_12, LL_ADC_SAMPLINGTIME_15CYCLES);
 8000eea:	2201      	movs	r2, #1
 8000eec:	4932      	ldr	r1, [pc, #200]	; (8000fb8 <MX_ADC1_Init+0x278>)
 8000eee:	482e      	ldr	r0, [pc, #184]	; (8000fa8 <MX_ADC1_Init+0x268>)
 8000ef0:	f7ff fd69 	bl	80009c6 <LL_ADC_SetChannelSamplingTime>

  /** Configure Regular Channel
  */
  LL_ADC_REG_SetSequencerRanks(ADC1, LL_ADC_REG_RANK_5, LL_ADC_CHANNEL_13);
 8000ef4:	4a31      	ldr	r2, [pc, #196]	; (8000fbc <MX_ADC1_Init+0x27c>)
 8000ef6:	f44f 7105 	mov.w	r1, #532	; 0x214
 8000efa:	482b      	ldr	r0, [pc, #172]	; (8000fa8 <MX_ADC1_Init+0x268>)
 8000efc:	f7ff fd1a 	bl	8000934 <LL_ADC_REG_SetSequencerRanks>
  LL_ADC_SetChannelSamplingTime(ADC1, LL_ADC_CHANNEL_13, LL_ADC_SAMPLINGTIME_15CYCLES);
 8000f00:	2201      	movs	r2, #1
 8000f02:	492e      	ldr	r1, [pc, #184]	; (8000fbc <MX_ADC1_Init+0x27c>)
 8000f04:	4828      	ldr	r0, [pc, #160]	; (8000fa8 <MX_ADC1_Init+0x268>)
 8000f06:	f7ff fd5e 	bl	80009c6 <LL_ADC_SetChannelSamplingTime>

  /** Configure Regular Channel
  */
  LL_ADC_REG_SetSequencerRanks(ADC1, LL_ADC_REG_RANK_6, LL_ADC_CHANNEL_14);
 8000f0a:	4a2d      	ldr	r2, [pc, #180]	; (8000fc0 <MX_ADC1_Init+0x280>)
 8000f0c:	f240 2119 	movw	r1, #537	; 0x219
 8000f10:	4825      	ldr	r0, [pc, #148]	; (8000fa8 <MX_ADC1_Init+0x268>)
 8000f12:	f7ff fd0f 	bl	8000934 <LL_ADC_REG_SetSequencerRanks>
  LL_ADC_SetChannelSamplingTime(ADC1, LL_ADC_CHANNEL_14, LL_ADC_SAMPLINGTIME_15CYCLES);
 8000f16:	2201      	movs	r2, #1
 8000f18:	4929      	ldr	r1, [pc, #164]	; (8000fc0 <MX_ADC1_Init+0x280>)
 8000f1a:	4823      	ldr	r0, [pc, #140]	; (8000fa8 <MX_ADC1_Init+0x268>)
 8000f1c:	f7ff fd53 	bl	80009c6 <LL_ADC_SetChannelSamplingTime>

  /** Configure Regular Channel
  */
  LL_ADC_REG_SetSequencerRanks(ADC1, LL_ADC_REG_RANK_7, LL_ADC_CHANNEL_15);
 8000f20:	4a28      	ldr	r2, [pc, #160]	; (8000fc4 <MX_ADC1_Init+0x284>)
 8000f22:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000f26:	4820      	ldr	r0, [pc, #128]	; (8000fa8 <MX_ADC1_Init+0x268>)
 8000f28:	f7ff fd04 	bl	8000934 <LL_ADC_REG_SetSequencerRanks>
  LL_ADC_SetChannelSamplingTime(ADC1, LL_ADC_CHANNEL_15, LL_ADC_SAMPLINGTIME_15CYCLES);
 8000f2c:	2201      	movs	r2, #1
 8000f2e:	4925      	ldr	r1, [pc, #148]	; (8000fc4 <MX_ADC1_Init+0x284>)
 8000f30:	481d      	ldr	r0, [pc, #116]	; (8000fa8 <MX_ADC1_Init+0x268>)
 8000f32:	f7ff fd48 	bl	80009c6 <LL_ADC_SetChannelSamplingTime>

  /** Configure Regular Channel
  */
  LL_ADC_REG_SetSequencerRanks(ADC1, LL_ADC_REG_RANK_8, LL_ADC_CHANNEL_1);
 8000f36:	4a24      	ldr	r2, [pc, #144]	; (8000fc8 <MX_ADC1_Init+0x288>)
 8000f38:	f240 1105 	movw	r1, #261	; 0x105
 8000f3c:	481a      	ldr	r0, [pc, #104]	; (8000fa8 <MX_ADC1_Init+0x268>)
 8000f3e:	f7ff fcf9 	bl	8000934 <LL_ADC_REG_SetSequencerRanks>
  LL_ADC_SetChannelSamplingTime(ADC1, LL_ADC_CHANNEL_1, LL_ADC_SAMPLINGTIME_15CYCLES);
 8000f42:	2201      	movs	r2, #1
 8000f44:	4920      	ldr	r1, [pc, #128]	; (8000fc8 <MX_ADC1_Init+0x288>)
 8000f46:	4818      	ldr	r0, [pc, #96]	; (8000fa8 <MX_ADC1_Init+0x268>)
 8000f48:	f7ff fd3d 	bl	80009c6 <LL_ADC_SetChannelSamplingTime>

  /** Configure Regular Channel
  */
  LL_ADC_REG_SetSequencerRanks(ADC1, LL_ADC_REG_RANK_9, LL_ADC_CHANNEL_2);
 8000f4c:	4a1f      	ldr	r2, [pc, #124]	; (8000fcc <MX_ADC1_Init+0x28c>)
 8000f4e:	f44f 7185 	mov.w	r1, #266	; 0x10a
 8000f52:	4815      	ldr	r0, [pc, #84]	; (8000fa8 <MX_ADC1_Init+0x268>)
 8000f54:	f7ff fcee 	bl	8000934 <LL_ADC_REG_SetSequencerRanks>
  LL_ADC_SetChannelSamplingTime(ADC1, LL_ADC_CHANNEL_2, LL_ADC_SAMPLINGTIME_15CYCLES);
 8000f58:	2201      	movs	r2, #1
 8000f5a:	491c      	ldr	r1, [pc, #112]	; (8000fcc <MX_ADC1_Init+0x28c>)
 8000f5c:	4812      	ldr	r0, [pc, #72]	; (8000fa8 <MX_ADC1_Init+0x268>)
 8000f5e:	f7ff fd32 	bl	80009c6 <LL_ADC_SetChannelSamplingTime>

  /** Configure Regular Channel
  */
  LL_ADC_REG_SetSequencerRanks(ADC1, LL_ADC_REG_RANK_10, LL_ADC_CHANNEL_9);
 8000f62:	4a1b      	ldr	r2, [pc, #108]	; (8000fd0 <MX_ADC1_Init+0x290>)
 8000f64:	f240 110f 	movw	r1, #271	; 0x10f
 8000f68:	480f      	ldr	r0, [pc, #60]	; (8000fa8 <MX_ADC1_Init+0x268>)
 8000f6a:	f7ff fce3 	bl	8000934 <LL_ADC_REG_SetSequencerRanks>
  LL_ADC_SetChannelSamplingTime(ADC1, LL_ADC_CHANNEL_9, LL_ADC_SAMPLINGTIME_15CYCLES);
 8000f6e:	2201      	movs	r2, #1
 8000f70:	4917      	ldr	r1, [pc, #92]	; (8000fd0 <MX_ADC1_Init+0x290>)
 8000f72:	480d      	ldr	r0, [pc, #52]	; (8000fa8 <MX_ADC1_Init+0x268>)
 8000f74:	f7ff fd27 	bl	80009c6 <LL_ADC_SetChannelSamplingTime>

  /** Configure Regular Channel
  */
  LL_ADC_REG_SetSequencerRanks(ADC1, LL_ADC_REG_RANK_11, LL_ADC_CHANNEL_10);
 8000f78:	220a      	movs	r2, #10
 8000f7a:	f44f 718a 	mov.w	r1, #276	; 0x114
 8000f7e:	480a      	ldr	r0, [pc, #40]	; (8000fa8 <MX_ADC1_Init+0x268>)
 8000f80:	f7ff fcd8 	bl	8000934 <LL_ADC_REG_SetSequencerRanks>
  LL_ADC_SetChannelSamplingTime(ADC1, LL_ADC_CHANNEL_10, LL_ADC_SAMPLINGTIME_15CYCLES);
 8000f84:	2201      	movs	r2, #1
 8000f86:	210a      	movs	r1, #10
 8000f88:	4807      	ldr	r0, [pc, #28]	; (8000fa8 <MX_ADC1_Init+0x268>)
 8000f8a:	f7ff fd1c 	bl	80009c6 <LL_ADC_SetChannelSamplingTime>
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000f8e:	bf00      	nop
 8000f90:	3748      	adds	r7, #72	; 0x48
 8000f92:	46bd      	mov	sp, r7
 8000f94:	bd80      	pop	{r7, pc}
 8000f96:	bf00      	nop
 8000f98:	40020800 	.word	0x40020800
 8000f9c:	40020000 	.word	0x40020000
 8000fa0:	40020400 	.word	0x40020400
 8000fa4:	40026400 	.word	0x40026400
 8000fa8:	40012000 	.word	0x40012000
 8000fac:	40012300 	.word	0x40012300
 8000fb0:	03800008 	.word	0x03800008
 8000fb4:	0030000b 	.word	0x0030000b
 8000fb8:	0060000c 	.word	0x0060000c
 8000fbc:	0090000d 	.word	0x0090000d
 8000fc0:	00c0000e 	.word	0x00c0000e
 8000fc4:	00f0000f 	.word	0x00f0000f
 8000fc8:	02300001 	.word	0x02300001
 8000fcc:	02600002 	.word	0x02600002
 8000fd0:	03b00009 	.word	0x03b00009

08000fd4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000fd4:	b480      	push	{r7}
 8000fd6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000fd8:	4b04      	ldr	r3, [pc, #16]	; (8000fec <__NVIC_GetPriorityGrouping+0x18>)
 8000fda:	68db      	ldr	r3, [r3, #12]
 8000fdc:	0a1b      	lsrs	r3, r3, #8
 8000fde:	f003 0307 	and.w	r3, r3, #7
}
 8000fe2:	4618      	mov	r0, r3
 8000fe4:	46bd      	mov	sp, r7
 8000fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fea:	4770      	bx	lr
 8000fec:	e000ed00 	.word	0xe000ed00

08000ff0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ff0:	b480      	push	{r7}
 8000ff2:	b083      	sub	sp, #12
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	4603      	mov	r3, r0
 8000ff8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ffa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	db0b      	blt.n	800101a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001002:	79fb      	ldrb	r3, [r7, #7]
 8001004:	f003 021f 	and.w	r2, r3, #31
 8001008:	4907      	ldr	r1, [pc, #28]	; (8001028 <__NVIC_EnableIRQ+0x38>)
 800100a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800100e:	095b      	lsrs	r3, r3, #5
 8001010:	2001      	movs	r0, #1
 8001012:	fa00 f202 	lsl.w	r2, r0, r2
 8001016:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800101a:	bf00      	nop
 800101c:	370c      	adds	r7, #12
 800101e:	46bd      	mov	sp, r7
 8001020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001024:	4770      	bx	lr
 8001026:	bf00      	nop
 8001028:	e000e100 	.word	0xe000e100

0800102c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800102c:	b480      	push	{r7}
 800102e:	b083      	sub	sp, #12
 8001030:	af00      	add	r7, sp, #0
 8001032:	4603      	mov	r3, r0
 8001034:	6039      	str	r1, [r7, #0]
 8001036:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001038:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800103c:	2b00      	cmp	r3, #0
 800103e:	db0a      	blt.n	8001056 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001040:	683b      	ldr	r3, [r7, #0]
 8001042:	b2da      	uxtb	r2, r3
 8001044:	490c      	ldr	r1, [pc, #48]	; (8001078 <__NVIC_SetPriority+0x4c>)
 8001046:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800104a:	0112      	lsls	r2, r2, #4
 800104c:	b2d2      	uxtb	r2, r2
 800104e:	440b      	add	r3, r1
 8001050:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001054:	e00a      	b.n	800106c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001056:	683b      	ldr	r3, [r7, #0]
 8001058:	b2da      	uxtb	r2, r3
 800105a:	4908      	ldr	r1, [pc, #32]	; (800107c <__NVIC_SetPriority+0x50>)
 800105c:	79fb      	ldrb	r3, [r7, #7]
 800105e:	f003 030f 	and.w	r3, r3, #15
 8001062:	3b04      	subs	r3, #4
 8001064:	0112      	lsls	r2, r2, #4
 8001066:	b2d2      	uxtb	r2, r2
 8001068:	440b      	add	r3, r1
 800106a:	761a      	strb	r2, [r3, #24]
}
 800106c:	bf00      	nop
 800106e:	370c      	adds	r7, #12
 8001070:	46bd      	mov	sp, r7
 8001072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001076:	4770      	bx	lr
 8001078:	e000e100 	.word	0xe000e100
 800107c:	e000ed00 	.word	0xe000ed00

08001080 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001080:	b480      	push	{r7}
 8001082:	b089      	sub	sp, #36	; 0x24
 8001084:	af00      	add	r7, sp, #0
 8001086:	60f8      	str	r0, [r7, #12]
 8001088:	60b9      	str	r1, [r7, #8]
 800108a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800108c:	68fb      	ldr	r3, [r7, #12]
 800108e:	f003 0307 	and.w	r3, r3, #7
 8001092:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001094:	69fb      	ldr	r3, [r7, #28]
 8001096:	f1c3 0307 	rsb	r3, r3, #7
 800109a:	2b04      	cmp	r3, #4
 800109c:	bf28      	it	cs
 800109e:	2304      	movcs	r3, #4
 80010a0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80010a2:	69fb      	ldr	r3, [r7, #28]
 80010a4:	3304      	adds	r3, #4
 80010a6:	2b06      	cmp	r3, #6
 80010a8:	d902      	bls.n	80010b0 <NVIC_EncodePriority+0x30>
 80010aa:	69fb      	ldr	r3, [r7, #28]
 80010ac:	3b03      	subs	r3, #3
 80010ae:	e000      	b.n	80010b2 <NVIC_EncodePriority+0x32>
 80010b0:	2300      	movs	r3, #0
 80010b2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010b4:	f04f 32ff 	mov.w	r2, #4294967295
 80010b8:	69bb      	ldr	r3, [r7, #24]
 80010ba:	fa02 f303 	lsl.w	r3, r2, r3
 80010be:	43da      	mvns	r2, r3
 80010c0:	68bb      	ldr	r3, [r7, #8]
 80010c2:	401a      	ands	r2, r3
 80010c4:	697b      	ldr	r3, [r7, #20]
 80010c6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80010c8:	f04f 31ff 	mov.w	r1, #4294967295
 80010cc:	697b      	ldr	r3, [r7, #20]
 80010ce:	fa01 f303 	lsl.w	r3, r1, r3
 80010d2:	43d9      	mvns	r1, r3
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010d8:	4313      	orrs	r3, r2
         );
}
 80010da:	4618      	mov	r0, r3
 80010dc:	3724      	adds	r7, #36	; 0x24
 80010de:	46bd      	mov	sp, r7
 80010e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e4:	4770      	bx	lr
	...

080010e8 <LL_AHB1_GRP1_EnableClock>:
{
 80010e8:	b480      	push	{r7}
 80010ea:	b085      	sub	sp, #20
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 80010f0:	4b08      	ldr	r3, [pc, #32]	; (8001114 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80010f2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80010f4:	4907      	ldr	r1, [pc, #28]	; (8001114 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	4313      	orrs	r3, r2
 80010fa:	630b      	str	r3, [r1, #48]	; 0x30
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 80010fc:	4b05      	ldr	r3, [pc, #20]	; (8001114 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80010fe:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	4013      	ands	r3, r2
 8001104:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001106:	68fb      	ldr	r3, [r7, #12]
}
 8001108:	bf00      	nop
 800110a:	3714      	adds	r7, #20
 800110c:	46bd      	mov	sp, r7
 800110e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001112:	4770      	bx	lr
 8001114:	40023800 	.word	0x40023800

08001118 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001118:	b580      	push	{r7, lr}
 800111a:	af00      	add	r7, sp, #0

  /* Init with LL driver */
  /* DMA controller clock enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_DMA2);
 800111c:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 8001120:	f7ff ffe2 	bl	80010e8 <LL_AHB1_GRP1_EnableClock>

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  NVIC_SetPriority(DMA2_Stream0_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8001124:	f7ff ff56 	bl	8000fd4 <__NVIC_GetPriorityGrouping>
 8001128:	4603      	mov	r3, r0
 800112a:	2200      	movs	r2, #0
 800112c:	2100      	movs	r1, #0
 800112e:	4618      	mov	r0, r3
 8001130:	f7ff ffa6 	bl	8001080 <NVIC_EncodePriority>
 8001134:	4603      	mov	r3, r0
 8001136:	4619      	mov	r1, r3
 8001138:	2038      	movs	r0, #56	; 0x38
 800113a:	f7ff ff77 	bl	800102c <__NVIC_SetPriority>
  NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 800113e:	2038      	movs	r0, #56	; 0x38
 8001140:	f7ff ff56 	bl	8000ff0 <__NVIC_EnableIRQ>

}
 8001144:	bf00      	nop
 8001146:	bd80      	pop	{r7, pc}

08001148 <LL_AHB1_GRP1_EnableClock>:
{
 8001148:	b480      	push	{r7}
 800114a:	b085      	sub	sp, #20
 800114c:	af00      	add	r7, sp, #0
 800114e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 8001150:	4b08      	ldr	r3, [pc, #32]	; (8001174 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8001152:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001154:	4907      	ldr	r1, [pc, #28]	; (8001174 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	4313      	orrs	r3, r2
 800115a:	630b      	str	r3, [r1, #48]	; 0x30
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 800115c:	4b05      	ldr	r3, [pc, #20]	; (8001174 <LL_AHB1_GRP1_EnableClock+0x2c>)
 800115e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	4013      	ands	r3, r2
 8001164:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001166:	68fb      	ldr	r3, [r7, #12]
}
 8001168:	bf00      	nop
 800116a:	3714      	adds	r7, #20
 800116c:	46bd      	mov	sp, r7
 800116e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001172:	4770      	bx	lr
 8001174:	40023800 	.word	0x40023800

08001178 <LL_GPIO_ResetOutputPin>:
{
 8001178:	b480      	push	{r7}
 800117a:	b083      	sub	sp, #12
 800117c:	af00      	add	r7, sp, #0
 800117e:	6078      	str	r0, [r7, #4]
 8001180:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 8001182:	683b      	ldr	r3, [r7, #0]
 8001184:	041a      	lsls	r2, r3, #16
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	619a      	str	r2, [r3, #24]
}
 800118a:	bf00      	nop
 800118c:	370c      	adds	r7, #12
 800118e:	46bd      	mov	sp, r7
 8001190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001194:	4770      	bx	lr
	...

08001198 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001198:	b580      	push	{r7, lr}
 800119a:	b086      	sub	sp, #24
 800119c:	af00      	add	r7, sp, #0

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 800119e:	463b      	mov	r3, r7
 80011a0:	2200      	movs	r2, #0
 80011a2:	601a      	str	r2, [r3, #0]
 80011a4:	605a      	str	r2, [r3, #4]
 80011a6:	609a      	str	r2, [r3, #8]
 80011a8:	60da      	str	r2, [r3, #12]
 80011aa:	611a      	str	r2, [r3, #16]
 80011ac:	615a      	str	r2, [r3, #20]

  /* GPIO Ports Clock Enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOH);
 80011ae:	2080      	movs	r0, #128	; 0x80
 80011b0:	f7ff ffca 	bl	8001148 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 80011b4:	2004      	movs	r0, #4
 80011b6:	f7ff ffc7 	bl	8001148 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 80011ba:	2001      	movs	r0, #1
 80011bc:	f7ff ffc4 	bl	8001148 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 80011c0:	2002      	movs	r0, #2
 80011c2:	f7ff ffc1 	bl	8001148 <LL_AHB1_GRP1_EnableClock>

  /**/
  LL_GPIO_ResetOutputPin(GPIOA, LL_GPIO_PIN_4|LL_GPIO_PIN_5|LL_GPIO_PIN_6|LL_GPIO_PIN_7);
 80011c6:	21f0      	movs	r1, #240	; 0xf0
 80011c8:	4815      	ldr	r0, [pc, #84]	; (8001220 <MX_GPIO_Init+0x88>)
 80011ca:	f7ff ffd5 	bl	8001178 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(GPIOC, LL_GPIO_PIN_8|LL_GPIO_PIN_9);
 80011ce:	f44f 7140 	mov.w	r1, #768	; 0x300
 80011d2:	4814      	ldr	r0, [pc, #80]	; (8001224 <MX_GPIO_Init+0x8c>)
 80011d4:	f7ff ffd0 	bl	8001178 <LL_GPIO_ResetOutputPin>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_4|LL_GPIO_PIN_5|LL_GPIO_PIN_6|LL_GPIO_PIN_7;
 80011d8:	23f0      	movs	r3, #240	; 0xf0
 80011da:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80011dc:	2301      	movs	r3, #1
 80011de:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80011e0:	2300      	movs	r3, #0
 80011e2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80011e4:	2300      	movs	r3, #0
 80011e6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80011e8:	2300      	movs	r3, #0
 80011ea:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011ec:	463b      	mov	r3, r7
 80011ee:	4619      	mov	r1, r3
 80011f0:	480b      	ldr	r0, [pc, #44]	; (8001220 <MX_GPIO_Init+0x88>)
 80011f2:	f002 fede 	bl	8003fb2 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_8|LL_GPIO_PIN_9;
 80011f6:	f44f 7340 	mov.w	r3, #768	; 0x300
 80011fa:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80011fc:	2301      	movs	r3, #1
 80011fe:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8001200:	2300      	movs	r3, #0
 8001202:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001204:	2300      	movs	r3, #0
 8001206:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001208:	2300      	movs	r3, #0
 800120a:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800120c:	463b      	mov	r3, r7
 800120e:	4619      	mov	r1, r3
 8001210:	4804      	ldr	r0, [pc, #16]	; (8001224 <MX_GPIO_Init+0x8c>)
 8001212:	f002 fece 	bl	8003fb2 <LL_GPIO_Init>

}
 8001216:	bf00      	nop
 8001218:	3718      	adds	r7, #24
 800121a:	46bd      	mov	sp, r7
 800121c:	bd80      	pop	{r7, pc}
 800121e:	bf00      	nop
 8001220:	40020000 	.word	0x40020000
 8001224:	40020800 	.word	0x40020800

08001228 <LL_ADC_DMA_GetRegAddr>:
{
 8001228:	b480      	push	{r7}
 800122a:	b085      	sub	sp, #20
 800122c:	af00      	add	r7, sp, #0
 800122e:	6078      	str	r0, [r7, #4]
 8001230:	6039      	str	r1, [r7, #0]
  uint32_t data_reg_addr = 0UL;
 8001232:	2300      	movs	r3, #0
 8001234:	60fb      	str	r3, [r7, #12]
  if (Register == LL_ADC_DMA_REG_REGULAR_DATA)
 8001236:	683b      	ldr	r3, [r7, #0]
 8001238:	2b00      	cmp	r3, #0
 800123a:	d103      	bne.n	8001244 <LL_ADC_DMA_GetRegAddr+0x1c>
    data_reg_addr = (uint32_t)&(ADCx->DR);
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	334c      	adds	r3, #76	; 0x4c
 8001240:	60fb      	str	r3, [r7, #12]
 8001242:	e001      	b.n	8001248 <LL_ADC_DMA_GetRegAddr+0x20>
    data_reg_addr = (uint32_t)&((__LL_ADC_COMMON_INSTANCE(ADCx))->CDR);
 8001244:	4b04      	ldr	r3, [pc, #16]	; (8001258 <LL_ADC_DMA_GetRegAddr+0x30>)
 8001246:	60fb      	str	r3, [r7, #12]
  return data_reg_addr;
 8001248:	68fb      	ldr	r3, [r7, #12]
}
 800124a:	4618      	mov	r0, r3
 800124c:	3714      	adds	r7, #20
 800124e:	46bd      	mov	sp, r7
 8001250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001254:	4770      	bx	lr
 8001256:	bf00      	nop
 8001258:	40012308 	.word	0x40012308

0800125c <LL_ADC_Enable>:
  * @rmtoll CR2      ADON           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 800125c:	b480      	push	{r7}
 800125e:	b083      	sub	sp, #12
 8001260:	af00      	add	r7, sp, #0
 8001262:	6078      	str	r0, [r7, #4]
  SET_BIT(ADCx->CR2, ADC_CR2_ADON);
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	689b      	ldr	r3, [r3, #8]
 8001268:	f043 0201 	orr.w	r2, r3, #1
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	609a      	str	r2, [r3, #8]
}
 8001270:	bf00      	nop
 8001272:	370c      	adds	r7, #12
 8001274:	46bd      	mov	sp, r7
 8001276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800127a:	4770      	bx	lr

0800127c <LL_ADC_REG_StartConversionSWStart>:
  * @rmtoll CR2      SWSTART        LL_ADC_REG_StartConversionSWStart
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversionSWStart(ADC_TypeDef *ADCx)
{
 800127c:	b480      	push	{r7}
 800127e:	b083      	sub	sp, #12
 8001280:	af00      	add	r7, sp, #0
 8001282:	6078      	str	r0, [r7, #4]
  SET_BIT(ADCx->CR2, ADC_CR2_SWSTART);
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	689b      	ldr	r3, [r3, #8]
 8001288:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	609a      	str	r2, [r3, #8]
}
 8001290:	bf00      	nop
 8001292:	370c      	adds	r7, #12
 8001294:	46bd      	mov	sp, r7
 8001296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800129a:	4770      	bx	lr

0800129c <LL_DMA_EnableStream>:
{
 800129c:	b480      	push	{r7}
 800129e:	b083      	sub	sp, #12
 80012a0:	af00      	add	r7, sp, #0
 80012a2:	6078      	str	r0, [r7, #4]
 80012a4:	6039      	str	r1, [r7, #0]
  SET_BIT(((DMA_Stream_TypeDef *)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_EN);
 80012a6:	4a0c      	ldr	r2, [pc, #48]	; (80012d8 <LL_DMA_EnableStream+0x3c>)
 80012a8:	683b      	ldr	r3, [r7, #0]
 80012aa:	4413      	add	r3, r2
 80012ac:	781b      	ldrb	r3, [r3, #0]
 80012ae:	461a      	mov	r2, r3
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	4413      	add	r3, r2
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	4908      	ldr	r1, [pc, #32]	; (80012d8 <LL_DMA_EnableStream+0x3c>)
 80012b8:	683a      	ldr	r2, [r7, #0]
 80012ba:	440a      	add	r2, r1
 80012bc:	7812      	ldrb	r2, [r2, #0]
 80012be:	4611      	mov	r1, r2
 80012c0:	687a      	ldr	r2, [r7, #4]
 80012c2:	440a      	add	r2, r1
 80012c4:	f043 0301 	orr.w	r3, r3, #1
 80012c8:	6013      	str	r3, [r2, #0]
}
 80012ca:	bf00      	nop
 80012cc:	370c      	adds	r7, #12
 80012ce:	46bd      	mov	sp, r7
 80012d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d4:	4770      	bx	lr
 80012d6:	bf00      	nop
 80012d8:	080044bc 	.word	0x080044bc

080012dc <LL_DMA_SetDataLength>:
{
 80012dc:	b480      	push	{r7}
 80012de:	b085      	sub	sp, #20
 80012e0:	af00      	add	r7, sp, #0
 80012e2:	60f8      	str	r0, [r7, #12]
 80012e4:	60b9      	str	r1, [r7, #8]
 80012e6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->NDTR, DMA_SxNDT, NbData);
 80012e8:	4a0d      	ldr	r2, [pc, #52]	; (8001320 <LL_DMA_SetDataLength+0x44>)
 80012ea:	68bb      	ldr	r3, [r7, #8]
 80012ec:	4413      	add	r3, r2
 80012ee:	781b      	ldrb	r3, [r3, #0]
 80012f0:	461a      	mov	r2, r3
 80012f2:	68fb      	ldr	r3, [r7, #12]
 80012f4:	4413      	add	r3, r2
 80012f6:	685b      	ldr	r3, [r3, #4]
 80012f8:	0c1b      	lsrs	r3, r3, #16
 80012fa:	041b      	lsls	r3, r3, #16
 80012fc:	4908      	ldr	r1, [pc, #32]	; (8001320 <LL_DMA_SetDataLength+0x44>)
 80012fe:	68ba      	ldr	r2, [r7, #8]
 8001300:	440a      	add	r2, r1
 8001302:	7812      	ldrb	r2, [r2, #0]
 8001304:	4611      	mov	r1, r2
 8001306:	68fa      	ldr	r2, [r7, #12]
 8001308:	440a      	add	r2, r1
 800130a:	4611      	mov	r1, r2
 800130c:	687a      	ldr	r2, [r7, #4]
 800130e:	4313      	orrs	r3, r2
 8001310:	604b      	str	r3, [r1, #4]
}
 8001312:	bf00      	nop
 8001314:	3714      	adds	r7, #20
 8001316:	46bd      	mov	sp, r7
 8001318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800131c:	4770      	bx	lr
 800131e:	bf00      	nop
 8001320:	080044bc 	.word	0x080044bc

08001324 <LL_DMA_ConfigAddresses>:
  *         @arg @ref LL_DMA_DIRECTION_MEMORY_TO_PERIPH
  *         @arg @ref LL_DMA_DIRECTION_MEMORY_TO_MEMORY
  * @retval None
  */
__STATIC_INLINE void LL_DMA_ConfigAddresses(DMA_TypeDef* DMAx, uint32_t Stream, uint32_t SrcAddress, uint32_t DstAddress, uint32_t Direction)
{
 8001324:	b480      	push	{r7}
 8001326:	b085      	sub	sp, #20
 8001328:	af00      	add	r7, sp, #0
 800132a:	60f8      	str	r0, [r7, #12]
 800132c:	60b9      	str	r1, [r7, #8]
 800132e:	607a      	str	r2, [r7, #4]
 8001330:	603b      	str	r3, [r7, #0]
  /* Direction Memory to Periph */
  if (Direction == LL_DMA_DIRECTION_MEMORY_TO_PERIPH)
 8001332:	69bb      	ldr	r3, [r7, #24]
 8001334:	2b40      	cmp	r3, #64	; 0x40
 8001336:	d114      	bne.n	8001362 <LL_DMA_ConfigAddresses+0x3e>
  {
    WRITE_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->M0AR, SrcAddress);
 8001338:	4a17      	ldr	r2, [pc, #92]	; (8001398 <LL_DMA_ConfigAddresses+0x74>)
 800133a:	68bb      	ldr	r3, [r7, #8]
 800133c:	4413      	add	r3, r2
 800133e:	781b      	ldrb	r3, [r3, #0]
 8001340:	461a      	mov	r2, r3
 8001342:	68fb      	ldr	r3, [r7, #12]
 8001344:	4413      	add	r3, r2
 8001346:	461a      	mov	r2, r3
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	60d3      	str	r3, [r2, #12]
    WRITE_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->PAR, DstAddress);
 800134c:	4a12      	ldr	r2, [pc, #72]	; (8001398 <LL_DMA_ConfigAddresses+0x74>)
 800134e:	68bb      	ldr	r3, [r7, #8]
 8001350:	4413      	add	r3, r2
 8001352:	781b      	ldrb	r3, [r3, #0]
 8001354:	461a      	mov	r2, r3
 8001356:	68fb      	ldr	r3, [r7, #12]
 8001358:	4413      	add	r3, r2
 800135a:	461a      	mov	r2, r3
 800135c:	683b      	ldr	r3, [r7, #0]
 800135e:	6093      	str	r3, [r2, #8]
  else
  {
    WRITE_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->PAR, SrcAddress);
    WRITE_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->M0AR, DstAddress);
  }
}
 8001360:	e013      	b.n	800138a <LL_DMA_ConfigAddresses+0x66>
    WRITE_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->PAR, SrcAddress);
 8001362:	4a0d      	ldr	r2, [pc, #52]	; (8001398 <LL_DMA_ConfigAddresses+0x74>)
 8001364:	68bb      	ldr	r3, [r7, #8]
 8001366:	4413      	add	r3, r2
 8001368:	781b      	ldrb	r3, [r3, #0]
 800136a:	461a      	mov	r2, r3
 800136c:	68fb      	ldr	r3, [r7, #12]
 800136e:	4413      	add	r3, r2
 8001370:	461a      	mov	r2, r3
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	6093      	str	r3, [r2, #8]
    WRITE_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->M0AR, DstAddress);
 8001376:	4a08      	ldr	r2, [pc, #32]	; (8001398 <LL_DMA_ConfigAddresses+0x74>)
 8001378:	68bb      	ldr	r3, [r7, #8]
 800137a:	4413      	add	r3, r2
 800137c:	781b      	ldrb	r3, [r3, #0]
 800137e:	461a      	mov	r2, r3
 8001380:	68fb      	ldr	r3, [r7, #12]
 8001382:	4413      	add	r3, r2
 8001384:	461a      	mov	r2, r3
 8001386:	683b      	ldr	r3, [r7, #0]
 8001388:	60d3      	str	r3, [r2, #12]
}
 800138a:	bf00      	nop
 800138c:	3714      	adds	r7, #20
 800138e:	46bd      	mov	sp, r7
 8001390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001394:	4770      	bx	lr
 8001396:	bf00      	nop
 8001398:	080044bc 	.word	0x080044bc

0800139c <LL_DMA_EnableIT_TC>:
  *         @arg @ref LL_DMA_STREAM_6
  *         @arg @ref LL_DMA_STREAM_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_EnableIT_TC(DMA_TypeDef *DMAx, uint32_t Stream)
{
 800139c:	b480      	push	{r7}
 800139e:	b083      	sub	sp, #12
 80013a0:	af00      	add	r7, sp, #0
 80013a2:	6078      	str	r0, [r7, #4]
 80013a4:	6039      	str	r1, [r7, #0]
  SET_BIT(((DMA_Stream_TypeDef *)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_TCIE);
 80013a6:	4a0c      	ldr	r2, [pc, #48]	; (80013d8 <LL_DMA_EnableIT_TC+0x3c>)
 80013a8:	683b      	ldr	r3, [r7, #0]
 80013aa:	4413      	add	r3, r2
 80013ac:	781b      	ldrb	r3, [r3, #0]
 80013ae:	461a      	mov	r2, r3
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	4413      	add	r3, r2
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	4908      	ldr	r1, [pc, #32]	; (80013d8 <LL_DMA_EnableIT_TC+0x3c>)
 80013b8:	683a      	ldr	r2, [r7, #0]
 80013ba:	440a      	add	r2, r1
 80013bc:	7812      	ldrb	r2, [r2, #0]
 80013be:	4611      	mov	r1, r2
 80013c0:	687a      	ldr	r2, [r7, #4]
 80013c2:	440a      	add	r2, r1
 80013c4:	f043 0310 	orr.w	r3, r3, #16
 80013c8:	6013      	str	r3, [r2, #0]
}
 80013ca:	bf00      	nop
 80013cc:	370c      	adds	r7, #12
 80013ce:	46bd      	mov	sp, r7
 80013d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d4:	4770      	bx	lr
 80013d6:	bf00      	nop
 80013d8:	080044bc 	.word	0x080044bc

080013dc <LL_RCC_HSI_Enable>:
  * @brief  Enable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
 80013dc:	b480      	push	{r7}
 80013de:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 80013e0:	4b05      	ldr	r3, [pc, #20]	; (80013f8 <LL_RCC_HSI_Enable+0x1c>)
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	4a04      	ldr	r2, [pc, #16]	; (80013f8 <LL_RCC_HSI_Enable+0x1c>)
 80013e6:	f043 0301 	orr.w	r3, r3, #1
 80013ea:	6013      	str	r3, [r2, #0]
}
 80013ec:	bf00      	nop
 80013ee:	46bd      	mov	sp, r7
 80013f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f4:	4770      	bx	lr
 80013f6:	bf00      	nop
 80013f8:	40023800 	.word	0x40023800

080013fc <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 80013fc:	b480      	push	{r7}
 80013fe:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY));
 8001400:	4b06      	ldr	r3, [pc, #24]	; (800141c <LL_RCC_HSI_IsReady+0x20>)
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	f003 0302 	and.w	r3, r3, #2
 8001408:	2b02      	cmp	r3, #2
 800140a:	bf0c      	ite	eq
 800140c:	2301      	moveq	r3, #1
 800140e:	2300      	movne	r3, #0
 8001410:	b2db      	uxtb	r3, r3
}
 8001412:	4618      	mov	r0, r3
 8001414:	46bd      	mov	sp, r7
 8001416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800141a:	4770      	bx	lr
 800141c:	40023800 	.word	0x40023800

08001420 <LL_RCC_HSI_SetCalibTrimming>:
  * @rmtoll CR        HSITRIM       LL_RCC_HSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 31
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_SetCalibTrimming(uint32_t Value)
{
 8001420:	b480      	push	{r7}
 8001422:	b083      	sub	sp, #12
 8001424:	af00      	add	r7, sp, #0
 8001426:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_HSITRIM, Value << RCC_CR_HSITRIM_Pos);
 8001428:	4b07      	ldr	r3, [pc, #28]	; (8001448 <LL_RCC_HSI_SetCalibTrimming+0x28>)
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	00db      	lsls	r3, r3, #3
 8001434:	4904      	ldr	r1, [pc, #16]	; (8001448 <LL_RCC_HSI_SetCalibTrimming+0x28>)
 8001436:	4313      	orrs	r3, r2
 8001438:	600b      	str	r3, [r1, #0]
}
 800143a:	bf00      	nop
 800143c:	370c      	adds	r7, #12
 800143e:	46bd      	mov	sp, r7
 8001440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001444:	4770      	bx	lr
 8001446:	bf00      	nop
 8001448:	40023800 	.word	0x40023800

0800144c <LL_RCC_SetSysClkSource>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 800144c:	b480      	push	{r7}
 800144e:	b083      	sub	sp, #12
 8001450:	af00      	add	r7, sp, #0
 8001452:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8001454:	4b06      	ldr	r3, [pc, #24]	; (8001470 <LL_RCC_SetSysClkSource+0x24>)
 8001456:	689b      	ldr	r3, [r3, #8]
 8001458:	f023 0203 	bic.w	r2, r3, #3
 800145c:	4904      	ldr	r1, [pc, #16]	; (8001470 <LL_RCC_SetSysClkSource+0x24>)
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	4313      	orrs	r3, r2
 8001462:	608b      	str	r3, [r1, #8]
}
 8001464:	bf00      	nop
 8001466:	370c      	adds	r7, #12
 8001468:	46bd      	mov	sp, r7
 800146a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800146e:	4770      	bx	lr
 8001470:	40023800 	.word	0x40023800

08001474 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLLR (*)
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8001474:	b480      	push	{r7}
 8001476:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8001478:	4b04      	ldr	r3, [pc, #16]	; (800148c <LL_RCC_GetSysClkSource+0x18>)
 800147a:	689b      	ldr	r3, [r3, #8]
 800147c:	f003 030c 	and.w	r3, r3, #12
}
 8001480:	4618      	mov	r0, r3
 8001482:	46bd      	mov	sp, r7
 8001484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001488:	4770      	bx	lr
 800148a:	bf00      	nop
 800148c:	40023800 	.word	0x40023800

08001490 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8001490:	b480      	push	{r7}
 8001492:	b083      	sub	sp, #12
 8001494:	af00      	add	r7, sp, #0
 8001496:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8001498:	4b06      	ldr	r3, [pc, #24]	; (80014b4 <LL_RCC_SetAHBPrescaler+0x24>)
 800149a:	689b      	ldr	r3, [r3, #8]
 800149c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80014a0:	4904      	ldr	r1, [pc, #16]	; (80014b4 <LL_RCC_SetAHBPrescaler+0x24>)
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	4313      	orrs	r3, r2
 80014a6:	608b      	str	r3, [r1, #8]
}
 80014a8:	bf00      	nop
 80014aa:	370c      	adds	r7, #12
 80014ac:	46bd      	mov	sp, r7
 80014ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b2:	4770      	bx	lr
 80014b4:	40023800 	.word	0x40023800

080014b8 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 80014b8:	b480      	push	{r7}
 80014ba:	b083      	sub	sp, #12
 80014bc:	af00      	add	r7, sp, #0
 80014be:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 80014c0:	4b06      	ldr	r3, [pc, #24]	; (80014dc <LL_RCC_SetAPB1Prescaler+0x24>)
 80014c2:	689b      	ldr	r3, [r3, #8]
 80014c4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80014c8:	4904      	ldr	r1, [pc, #16]	; (80014dc <LL_RCC_SetAPB1Prescaler+0x24>)
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	4313      	orrs	r3, r2
 80014ce:	608b      	str	r3, [r1, #8]
}
 80014d0:	bf00      	nop
 80014d2:	370c      	adds	r7, #12
 80014d4:	46bd      	mov	sp, r7
 80014d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014da:	4770      	bx	lr
 80014dc:	40023800 	.word	0x40023800

080014e0 <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 80014e0:	b480      	push	{r7}
 80014e2:	b083      	sub	sp, #12
 80014e4:	af00      	add	r7, sp, #0
 80014e6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 80014e8:	4b06      	ldr	r3, [pc, #24]	; (8001504 <LL_RCC_SetAPB2Prescaler+0x24>)
 80014ea:	689b      	ldr	r3, [r3, #8]
 80014ec:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80014f0:	4904      	ldr	r1, [pc, #16]	; (8001504 <LL_RCC_SetAPB2Prescaler+0x24>)
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	4313      	orrs	r3, r2
 80014f6:	608b      	str	r3, [r1, #8]
}
 80014f8:	bf00      	nop
 80014fa:	370c      	adds	r7, #12
 80014fc:	46bd      	mov	sp, r7
 80014fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001502:	4770      	bx	lr
 8001504:	40023800 	.word	0x40023800

08001508 <LL_RCC_SetTIMPrescaler>:
  *         @arg @ref LL_RCC_TIM_PRESCALER_TWICE
  *         @arg @ref LL_RCC_TIM_PRESCALER_FOUR_TIMES
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetTIMPrescaler(uint32_t Prescaler)
{
 8001508:	b480      	push	{r7}
 800150a:	b083      	sub	sp, #12
 800150c:	af00      	add	r7, sp, #0
 800150e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->DCKCFGR, RCC_DCKCFGR_TIMPRE, Prescaler);
 8001510:	4b07      	ldr	r3, [pc, #28]	; (8001530 <LL_RCC_SetTIMPrescaler+0x28>)
 8001512:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001516:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800151a:	4905      	ldr	r1, [pc, #20]	; (8001530 <LL_RCC_SetTIMPrescaler+0x28>)
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	4313      	orrs	r3, r2
 8001520:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
}
 8001524:	bf00      	nop
 8001526:	370c      	adds	r7, #12
 8001528:	46bd      	mov	sp, r7
 800152a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800152e:	4770      	bx	lr
 8001530:	40023800 	.word	0x40023800

08001534 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8001534:	b480      	push	{r7}
 8001536:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8001538:	4b05      	ldr	r3, [pc, #20]	; (8001550 <LL_RCC_PLL_Enable+0x1c>)
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	4a04      	ldr	r2, [pc, #16]	; (8001550 <LL_RCC_PLL_Enable+0x1c>)
 800153e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001542:	6013      	str	r3, [r2, #0]
}
 8001544:	bf00      	nop
 8001546:	46bd      	mov	sp, r7
 8001548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800154c:	4770      	bx	lr
 800154e:	bf00      	nop
 8001550:	40023800 	.word	0x40023800

08001554 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8001554:	b480      	push	{r7}
 8001556:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY));
 8001558:	4b07      	ldr	r3, [pc, #28]	; (8001578 <LL_RCC_PLL_IsReady+0x24>)
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001560:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001564:	bf0c      	ite	eq
 8001566:	2301      	moveq	r3, #1
 8001568:	2300      	movne	r3, #0
 800156a:	b2db      	uxtb	r3, r3
}
 800156c:	4618      	mov	r0, r3
 800156e:	46bd      	mov	sp, r7
 8001570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001574:	4770      	bx	lr
 8001576:	bf00      	nop
 8001578:	40023800 	.word	0x40023800

0800157c <LL_RCC_PLL_ConfigDomain_SYS>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_ConfigDomain_SYS(uint32_t Source, uint32_t PLLM, uint32_t PLLN, uint32_t PLLP_R)
{
 800157c:	b480      	push	{r7}
 800157e:	b085      	sub	sp, #20
 8001580:	af00      	add	r7, sp, #0
 8001582:	60f8      	str	r0, [r7, #12]
 8001584:	60b9      	str	r1, [r7, #8]
 8001586:	607a      	str	r2, [r7, #4]
 8001588:	603b      	str	r3, [r7, #0]
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM | RCC_PLLCFGR_PLLN,
 800158a:	4b11      	ldr	r3, [pc, #68]	; (80015d0 <LL_RCC_PLL_ConfigDomain_SYS+0x54>)
 800158c:	685a      	ldr	r2, [r3, #4]
 800158e:	4b11      	ldr	r3, [pc, #68]	; (80015d4 <LL_RCC_PLL_ConfigDomain_SYS+0x58>)
 8001590:	4013      	ands	r3, r2
 8001592:	68f9      	ldr	r1, [r7, #12]
 8001594:	68ba      	ldr	r2, [r7, #8]
 8001596:	4311      	orrs	r1, r2
 8001598:	687a      	ldr	r2, [r7, #4]
 800159a:	0192      	lsls	r2, r2, #6
 800159c:	430a      	orrs	r2, r1
 800159e:	490c      	ldr	r1, [pc, #48]	; (80015d0 <LL_RCC_PLL_ConfigDomain_SYS+0x54>)
 80015a0:	4313      	orrs	r3, r2
 80015a2:	604b      	str	r3, [r1, #4]
             Source | PLLM | PLLN << RCC_PLLCFGR_PLLN_Pos);
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLP, PLLP_R);
 80015a4:	4b0a      	ldr	r3, [pc, #40]	; (80015d0 <LL_RCC_PLL_ConfigDomain_SYS+0x54>)
 80015a6:	685b      	ldr	r3, [r3, #4]
 80015a8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80015ac:	4908      	ldr	r1, [pc, #32]	; (80015d0 <LL_RCC_PLL_ConfigDomain_SYS+0x54>)
 80015ae:	683b      	ldr	r3, [r7, #0]
 80015b0:	4313      	orrs	r3, r2
 80015b2:	604b      	str	r3, [r1, #4]
#if defined(RCC_PLLR_SYSCLK_SUPPORT)
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLR, PLLP_R);
 80015b4:	4b06      	ldr	r3, [pc, #24]	; (80015d0 <LL_RCC_PLL_ConfigDomain_SYS+0x54>)
 80015b6:	685b      	ldr	r3, [r3, #4]
 80015b8:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 80015bc:	4904      	ldr	r1, [pc, #16]	; (80015d0 <LL_RCC_PLL_ConfigDomain_SYS+0x54>)
 80015be:	683b      	ldr	r3, [r7, #0]
 80015c0:	4313      	orrs	r3, r2
 80015c2:	604b      	str	r3, [r1, #4]
#endif /* RCC_PLLR_SYSCLK_SUPPORT */
}
 80015c4:	bf00      	nop
 80015c6:	3714      	adds	r7, #20
 80015c8:	46bd      	mov	sp, r7
 80015ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ce:	4770      	bx	lr
 80015d0:	40023800 	.word	0x40023800
 80015d4:	ffbf8000 	.word	0xffbf8000

080015d8 <LL_FLASH_SetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_14
  *         @arg @ref LL_FLASH_LATENCY_15
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
 80015d8:	b480      	push	{r7}
 80015da:	b083      	sub	sp, #12
 80015dc:	af00      	add	r7, sp, #0
 80015de:	6078      	str	r0, [r7, #4]
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 80015e0:	4b06      	ldr	r3, [pc, #24]	; (80015fc <LL_FLASH_SetLatency+0x24>)
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	f023 020f 	bic.w	r2, r3, #15
 80015e8:	4904      	ldr	r1, [pc, #16]	; (80015fc <LL_FLASH_SetLatency+0x24>)
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	4313      	orrs	r3, r2
 80015ee:	600b      	str	r3, [r1, #0]
}
 80015f0:	bf00      	nop
 80015f2:	370c      	adds	r7, #12
 80015f4:	46bd      	mov	sp, r7
 80015f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015fa:	4770      	bx	lr
 80015fc:	40023c00 	.word	0x40023c00

08001600 <LL_FLASH_GetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_13
  *         @arg @ref LL_FLASH_LATENCY_14
  *         @arg @ref LL_FLASH_LATENCY_15
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
 8001600:	b480      	push	{r7}
 8001602:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 8001604:	4b04      	ldr	r3, [pc, #16]	; (8001618 <LL_FLASH_GetLatency+0x18>)
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	f003 030f 	and.w	r3, r3, #15
}
 800160c:	4618      	mov	r0, r3
 800160e:	46bd      	mov	sp, r7
 8001610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001614:	4770      	bx	lr
 8001616:	bf00      	nop
 8001618:	40023c00 	.word	0x40023c00

0800161c <LL_PWR_EnableOverDriveMode>:
  * @brief  Enable Over drive Mode
  * @rmtoll CR    ODEN       LL_PWR_EnableOverDriveMode
  * @retval None
  */
__STATIC_INLINE void LL_PWR_EnableOverDriveMode(void)
{
 800161c:	b480      	push	{r7}
 800161e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR, PWR_CR_ODEN);
 8001620:	4b05      	ldr	r3, [pc, #20]	; (8001638 <LL_PWR_EnableOverDriveMode+0x1c>)
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	4a04      	ldr	r2, [pc, #16]	; (8001638 <LL_PWR_EnableOverDriveMode+0x1c>)
 8001626:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800162a:	6013      	str	r3, [r2, #0]
}
 800162c:	bf00      	nop
 800162e:	46bd      	mov	sp, r7
 8001630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001634:	4770      	bx	lr
 8001636:	bf00      	nop
 8001638:	40007000 	.word	0x40007000

0800163c <LL_PWR_SetRegulVoltageScaling>:
  *         @arg @ref LL_PWR_REGU_VOLTAGE_SCALE3
  *         (*) LL_PWR_REGU_VOLTAGE_SCALE1 is not available for STM32F401xx devices
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SetRegulVoltageScaling(uint32_t VoltageScaling)
{
 800163c:	b480      	push	{r7}
 800163e:	b083      	sub	sp, #12
 8001640:	af00      	add	r7, sp, #0
 8001642:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->CR, PWR_CR_VOS, VoltageScaling);
 8001644:	4b06      	ldr	r3, [pc, #24]	; (8001660 <LL_PWR_SetRegulVoltageScaling+0x24>)
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800164c:	4904      	ldr	r1, [pc, #16]	; (8001660 <LL_PWR_SetRegulVoltageScaling+0x24>)
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	4313      	orrs	r3, r2
 8001652:	600b      	str	r3, [r1, #0]
}
 8001654:	bf00      	nop
 8001656:	370c      	adds	r7, #12
 8001658:	46bd      	mov	sp, r7
 800165a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800165e:	4770      	bx	lr
 8001660:	40007000 	.word	0x40007000

08001664 <LL_PWR_IsActiveFlag_VOS>:
  * @brief  Indicate whether the Regulator is ready in the selected voltage range or if its output voltage is still changing to the required voltage level
  * @rmtoll CSR   VOS       LL_PWR_IsActiveFlag_VOS
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_PWR_IsActiveFlag_VOS(void)
{
 8001664:	b480      	push	{r7}
 8001666:	af00      	add	r7, sp, #0
  return (READ_BIT(PWR->CSR, LL_PWR_CSR_VOS) == (LL_PWR_CSR_VOS));
 8001668:	4b07      	ldr	r3, [pc, #28]	; (8001688 <LL_PWR_IsActiveFlag_VOS+0x24>)
 800166a:	685b      	ldr	r3, [r3, #4]
 800166c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001670:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001674:	bf0c      	ite	eq
 8001676:	2301      	moveq	r3, #1
 8001678:	2300      	movne	r3, #0
 800167a:	b2db      	uxtb	r3, r3
}
 800167c:	4618      	mov	r0, r3
 800167e:	46bd      	mov	sp, r7
 8001680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001684:	4770      	bx	lr
 8001686:	bf00      	nop
 8001688:	40007000 	.word	0x40007000

0800168c <LL_TIM_EnableCounter>:
{
 800168c:	b480      	push	{r7}
 800168e:	b083      	sub	sp, #12
 8001690:	af00      	add	r7, sp, #0
 8001692:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	f043 0201 	orr.w	r2, r3, #1
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	601a      	str	r2, [r3, #0]
}
 80016a0:	bf00      	nop
 80016a2:	370c      	adds	r7, #12
 80016a4:	46bd      	mov	sp, r7
 80016a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016aa:	4770      	bx	lr

080016ac <LL_TIM_CC_EnableChannel>:
{
 80016ac:	b480      	push	{r7}
 80016ae:	b083      	sub	sp, #12
 80016b0:	af00      	add	r7, sp, #0
 80016b2:	6078      	str	r0, [r7, #4]
 80016b4:	6039      	str	r1, [r7, #0]
  SET_BIT(TIMx->CCER, Channels);
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	6a1a      	ldr	r2, [r3, #32]
 80016ba:	683b      	ldr	r3, [r7, #0]
 80016bc:	431a      	orrs	r2, r3
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	621a      	str	r2, [r3, #32]
}
 80016c2:	bf00      	nop
 80016c4:	370c      	adds	r7, #12
 80016c6:	46bd      	mov	sp, r7
 80016c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016cc:	4770      	bx	lr

080016ce <LL_TIM_EnableIT_UPDATE>:
  * @rmtoll DIER         UIE           LL_TIM_EnableIT_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_EnableIT_UPDATE(TIM_TypeDef *TIMx)
{
 80016ce:	b480      	push	{r7}
 80016d0:	b083      	sub	sp, #12
 80016d2:	af00      	add	r7, sp, #0
 80016d4:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->DIER, TIM_DIER_UIE);
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	68db      	ldr	r3, [r3, #12]
 80016da:	f043 0201 	orr.w	r2, r3, #1
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	60da      	str	r2, [r3, #12]
}
 80016e2:	bf00      	nop
 80016e4:	370c      	adds	r7, #12
 80016e6:	46bd      	mov	sp, r7
 80016e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ec:	4770      	bx	lr
	...

080016f0 <SetDirection>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void SetDirection()
{
 80016f0:	b480      	push	{r7}
 80016f2:	af00      	add	r7, sp, #0
	Direction1.FrontEncoderDirection = CCW;
 80016f4:	4b08      	ldr	r3, [pc, #32]	; (8001718 <SetDirection+0x28>)
 80016f6:	2201      	movs	r2, #1
 80016f8:	605a      	str	r2, [r3, #4]
	Direction1.FrontMotorDirection = SET;
 80016fa:	4b07      	ldr	r3, [pc, #28]	; (8001718 <SetDirection+0x28>)
 80016fc:	2201      	movs	r2, #1
 80016fe:	601a      	str	r2, [r3, #0]

	Direction2.FrontEncoderDirection = CW;
 8001700:	4b06      	ldr	r3, [pc, #24]	; (800171c <SetDirection+0x2c>)
 8001702:	2200      	movs	r2, #0
 8001704:	605a      	str	r2, [r3, #4]
	Direction2.FrontMotorDirection = RESET;
 8001706:	4b05      	ldr	r3, [pc, #20]	; (800171c <SetDirection+0x2c>)
 8001708:	2200      	movs	r2, #0
 800170a:	601a      	str	r2, [r3, #0]
}
 800170c:	bf00      	nop
 800170e:	46bd      	mov	sp, r7
 8001710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001714:	4770      	bx	lr
 8001716:	bf00      	nop
 8001718:	20000078 	.word	0x20000078
 800171c:	20000080 	.word	0x20000080

08001720 <SetDutyControl>:

void SetDutyControl()
{
 8001720:	b480      	push	{r7}
 8001722:	af00      	add	r7, sp, #0
	MotorDutyVelocity1.duty = 0;
 8001724:	4b09      	ldr	r3, [pc, #36]	; (800174c <SetDutyControl+0x2c>)
 8001726:	2200      	movs	r2, #0
 8001728:	601a      	str	r2, [r3, #0]
	MotorDutyVelocity1.dutylimit = 900;
 800172a:	4b08      	ldr	r3, [pc, #32]	; (800174c <SetDutyControl+0x2c>)
 800172c:	f44f 7261 	mov.w	r2, #900	; 0x384
 8001730:	605a      	str	r2, [r3, #4]

	MotorDutyVelocity2.duty = 0;
 8001732:	4b07      	ldr	r3, [pc, #28]	; (8001750 <SetDutyControl+0x30>)
 8001734:	2200      	movs	r2, #0
 8001736:	601a      	str	r2, [r3, #0]
	MotorDutyVelocity2.dutylimit = 900;
 8001738:	4b05      	ldr	r3, [pc, #20]	; (8001750 <SetDutyControl+0x30>)
 800173a:	f44f 7261 	mov.w	r2, #900	; 0x384
 800173e:	605a      	str	r2, [r3, #4]
}
 8001740:	bf00      	nop
 8001742:	46bd      	mov	sp, r7
 8001744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001748:	4770      	bx	lr
 800174a:	bf00      	nop
 800174c:	20000088 	.word	0x20000088
 8001750:	20000090 	.word	0x20000090
 8001754:	00000000 	.word	0x00000000

08001758 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001758:	b580      	push	{r7, lr}
 800175a:	b082      	sub	sp, #8
 800175c:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN 1 */

  SetDirection();
 800175e:	f7ff ffc7 	bl	80016f0 <SetDirection>
  SetDutyControl();
 8001762:	f7ff ffdd 	bl	8001720 <SetDutyControl>

  firstleft = DEGREE;
 8001766:	4b4c      	ldr	r3, [pc, #304]	; (8001898 <main+0x140>)
 8001768:	2296      	movs	r2, #150	; 0x96
 800176a:	601a      	str	r2, [r3, #0]
  secondfront = DEGREE + SECOND;
 800176c:	4b4b      	ldr	r3, [pc, #300]	; (800189c <main+0x144>)
 800176e:	f240 421a 	movw	r2, #1050	; 0x41a
 8001772:	601a      	str	r2, [r3, #0]
  thirdleft = secondfront + (DEGREE * 2.5);
 8001774:	4b49      	ldr	r3, [pc, #292]	; (800189c <main+0x144>)
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	4618      	mov	r0, r3
 800177a:	f7fe fe97 	bl	80004ac <__aeabi_i2d>
 800177e:	a344      	add	r3, pc, #272	; (adr r3, 8001890 <main+0x138>)
 8001780:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001784:	f7fe fd46 	bl	8000214 <__adddf3>
 8001788:	4602      	mov	r2, r0
 800178a:	460b      	mov	r3, r1
 800178c:	4610      	mov	r0, r2
 800178e:	4619      	mov	r1, r3
 8001790:	f7fe fef6 	bl	8000580 <__aeabi_d2iz>
 8001794:	4603      	mov	r3, r0
 8001796:	4a42      	ldr	r2, [pc, #264]	; (80018a0 <main+0x148>)
 8001798:	6013      	str	r3, [r2, #0]
  fourthfront = thirdleft + (SECOND);
 800179a:	4b41      	ldr	r3, [pc, #260]	; (80018a0 <main+0x148>)
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	f503 7361 	add.w	r3, r3, #900	; 0x384
 80017a2:	4a40      	ldr	r2, [pc, #256]	; (80018a4 <main+0x14c>)
 80017a4:	6013      	str	r3, [r2, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80017a6:	f001 f94b 	bl	8002a40 <HAL_Init>

  /* USER CODE BEGIN Init */

  MAF_Init(&PSD_front_left, 5);
 80017aa:	2105      	movs	r1, #5
 80017ac:	483e      	ldr	r0, [pc, #248]	; (80018a8 <main+0x150>)
 80017ae:	f7ff f861 	bl	8000874 <MAF_Init>
  MAF_Init(&PSD_front_right, 5);
 80017b2:	2105      	movs	r1, #5
 80017b4:	483d      	ldr	r0, [pc, #244]	; (80018ac <main+0x154>)
 80017b6:	f7ff f85d 	bl	8000874 <MAF_Init>
  MAF_Init(&PSD_back_left, 5);
 80017ba:	2105      	movs	r1, #5
 80017bc:	483c      	ldr	r0, [pc, #240]	; (80018b0 <main+0x158>)
 80017be:	f7ff f859 	bl	8000874 <MAF_Init>
  MAF_Init(&PSD_back_right, 5);
 80017c2:	2105      	movs	r1, #5
 80017c4:	483b      	ldr	r0, [pc, #236]	; (80018b4 <main+0x15c>)
 80017c6:	f7ff f855 	bl	8000874 <MAF_Init>
  MAF_Init(&PSD_bottom, 5);
 80017ca:	2105      	movs	r1, #5
 80017cc:	483a      	ldr	r0, [pc, #232]	; (80018b8 <main+0x160>)
 80017ce:	f7ff f851 	bl	8000874 <MAF_Init>
  MAF_Init(&IR1, 5);
 80017d2:	2105      	movs	r1, #5
 80017d4:	4839      	ldr	r0, [pc, #228]	; (80018bc <main+0x164>)
 80017d6:	f7ff f84d 	bl	8000874 <MAF_Init>
  MAF_Init(&IR2, 5);
 80017da:	2105      	movs	r1, #5
 80017dc:	4838      	ldr	r0, [pc, #224]	; (80018c0 <main+0x168>)
 80017de:	f7ff f849 	bl	8000874 <MAF_Init>
  MAF_Init(&PSD_Side1, 5);
 80017e2:	2105      	movs	r1, #5
 80017e4:	4837      	ldr	r0, [pc, #220]	; (80018c4 <main+0x16c>)
 80017e6:	f7ff f845 	bl	8000874 <MAF_Init>
  MAF_Init(&PSD_Side2, 5);
 80017ea:	2105      	movs	r1, #5
 80017ec:	4836      	ldr	r0, [pc, #216]	; (80018c8 <main+0x170>)
 80017ee:	f7ff f841 	bl	8000874 <MAF_Init>

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80017f2:	f000 f879 	bl	80018e8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80017f6:	f7ff fccf 	bl	8001198 <MX_GPIO_Init>
  MX_DMA_Init();
 80017fa:	f7ff fc8d 	bl	8001118 <MX_DMA_Init>
  MX_TIM6_Init();
 80017fe:	f000 ffa1 	bl	8002744 <MX_TIM6_Init>
  MX_ADC1_Init();
 8001802:	f7ff fa9d 	bl	8000d40 <MX_ADC1_Init>
  MX_TIM8_Init();
 8001806:	f001 f80d 	bl	8002824 <MX_TIM8_Init>
  MX_TIM1_Init();
 800180a:	f000 ff0b 	bl	8002624 <MX_TIM1_Init>
  MX_TIM7_Init();
 800180e:	f000 ffd3 	bl	80027b8 <MX_TIM7_Init>
  /* USER CODE BEGIN 2 */

  //pwmTimer
  LL_TIM_CC_EnableChannel(TIM1, LL_TIM_CHANNEL_CH1);
 8001812:	2101      	movs	r1, #1
 8001814:	482d      	ldr	r0, [pc, #180]	; (80018cc <main+0x174>)
 8001816:	f7ff ff49 	bl	80016ac <LL_TIM_CC_EnableChannel>
  LL_TIM_CC_EnableChannel(TIM1, LL_TIM_CHANNEL_CH2);
 800181a:	2110      	movs	r1, #16
 800181c:	482b      	ldr	r0, [pc, #172]	; (80018cc <main+0x174>)
 800181e:	f7ff ff45 	bl	80016ac <LL_TIM_CC_EnableChannel>
  LL_TIM_EnableCounter(TIM1);
 8001822:	482a      	ldr	r0, [pc, #168]	; (80018cc <main+0x174>)
 8001824:	f7ff ff32 	bl	800168c <LL_TIM_EnableCounter>

  //controlTimer
  LL_TIM_EnableIT_UPDATE(TIM6);
 8001828:	4829      	ldr	r0, [pc, #164]	; (80018d0 <main+0x178>)
 800182a:	f7ff ff50 	bl	80016ce <LL_TIM_EnableIT_UPDATE>
  LL_TIM_EnableCounter(TIM6);
 800182e:	4828      	ldr	r0, [pc, #160]	; (80018d0 <main+0x178>)
 8001830:	f7ff ff2c 	bl	800168c <LL_TIM_EnableCounter>

  LL_TIM_EnableIT_UPDATE(TIM7);
 8001834:	4827      	ldr	r0, [pc, #156]	; (80018d4 <main+0x17c>)
 8001836:	f7ff ff4a 	bl	80016ce <LL_TIM_EnableIT_UPDATE>
  LL_TIM_EnableCounter(TIM7);
 800183a:	4826      	ldr	r0, [pc, #152]	; (80018d4 <main+0x17c>)
 800183c:	f7ff ff26 	bl	800168c <LL_TIM_EnableCounter>

  //adcTimer
  LL_TIM_EnableIT_UPDATE(TIM8);
 8001840:	4825      	ldr	r0, [pc, #148]	; (80018d8 <main+0x180>)
 8001842:	f7ff ff44 	bl	80016ce <LL_TIM_EnableIT_UPDATE>
  LL_TIM_EnableCounter(TIM8);
 8001846:	4824      	ldr	r0, [pc, #144]	; (80018d8 <main+0x180>)
 8001848:	f7ff ff20 	bl	800168c <LL_TIM_EnableCounter>

  //adc
  LL_DMA_ConfigAddresses(DMA2,
 800184c:	2100      	movs	r1, #0
 800184e:	4823      	ldr	r0, [pc, #140]	; (80018dc <main+0x184>)
 8001850:	f7ff fcea 	bl	8001228 <LL_ADC_DMA_GetRegAddr>
 8001854:	4602      	mov	r2, r0
 8001856:	4922      	ldr	r1, [pc, #136]	; (80018e0 <main+0x188>)
 8001858:	2300      	movs	r3, #0
 800185a:	9300      	str	r3, [sp, #0]
 800185c:	460b      	mov	r3, r1
 800185e:	2100      	movs	r1, #0
 8001860:	4820      	ldr	r0, [pc, #128]	; (80018e4 <main+0x18c>)
 8001862:	f7ff fd5f 	bl	8001324 <LL_DMA_ConfigAddresses>
		  LL_DMA_STREAM_0,
		  LL_ADC_DMA_GetRegAddr(ADC1, LL_ADC_DMA_REG_REGULAR_DATA),
		  adc_rawdata,
		  LL_DMA_DIRECTION_PERIPH_TO_MEMORY);
  LL_DMA_SetDataLength(DMA2, LL_DMA_STREAM_0, 11);
 8001866:	220b      	movs	r2, #11
 8001868:	2100      	movs	r1, #0
 800186a:	481e      	ldr	r0, [pc, #120]	; (80018e4 <main+0x18c>)
 800186c:	f7ff fd36 	bl	80012dc <LL_DMA_SetDataLength>
  LL_DMA_EnableIT_TC(DMA2, LL_DMA_STREAM_0);
 8001870:	2100      	movs	r1, #0
 8001872:	481c      	ldr	r0, [pc, #112]	; (80018e4 <main+0x18c>)
 8001874:	f7ff fd92 	bl	800139c <LL_DMA_EnableIT_TC>
  LL_DMA_EnableStream(DMA2, LL_DMA_STREAM_0);
 8001878:	2100      	movs	r1, #0
 800187a:	481a      	ldr	r0, [pc, #104]	; (80018e4 <main+0x18c>)
 800187c:	f7ff fd0e 	bl	800129c <LL_DMA_EnableStream>
  LL_ADC_Enable(ADC1);
 8001880:	4816      	ldr	r0, [pc, #88]	; (80018dc <main+0x184>)
 8001882:	f7ff fceb 	bl	800125c <LL_ADC_Enable>
  LL_ADC_REG_StartConversionSWStart(ADC1);
 8001886:	4815      	ldr	r0, [pc, #84]	; (80018dc <main+0x184>)
 8001888:	f7ff fcf8 	bl	800127c <LL_ADC_REG_StartConversionSWStart>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800188c:	e7fe      	b.n	800188c <main+0x134>
 800188e:	bf00      	nop
 8001890:	00000000 	.word	0x00000000
 8001894:	40777000 	.word	0x40777000
 8001898:	2000015c 	.word	0x2000015c
 800189c:	20000160 	.word	0x20000160
 80018a0:	20000164 	.word	0x20000164
 80018a4:	20000168 	.word	0x20000168
 80018a8:	200000cc 	.word	0x200000cc
 80018ac:	200000dc 	.word	0x200000dc
 80018b0:	200000ec 	.word	0x200000ec
 80018b4:	200000fc 	.word	0x200000fc
 80018b8:	2000010c 	.word	0x2000010c
 80018bc:	2000011c 	.word	0x2000011c
 80018c0:	2000012c 	.word	0x2000012c
 80018c4:	2000013c 	.word	0x2000013c
 80018c8:	2000014c 	.word	0x2000014c
 80018cc:	40010000 	.word	0x40010000
 80018d0:	40001000 	.word	0x40001000
 80018d4:	40001400 	.word	0x40001400
 80018d8:	40010400 	.word	0x40010400
 80018dc:	40012000 	.word	0x40012000
 80018e0:	200000a0 	.word	0x200000a0
 80018e4:	40026400 	.word	0x40026400

080018e8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80018e8:	b580      	push	{r7, lr}
 80018ea:	af00      	add	r7, sp, #0
  LL_FLASH_SetLatency(LL_FLASH_LATENCY_5);
 80018ec:	2005      	movs	r0, #5
 80018ee:	f7ff fe73 	bl	80015d8 <LL_FLASH_SetLatency>
  while(LL_FLASH_GetLatency()!= LL_FLASH_LATENCY_5)
 80018f2:	bf00      	nop
 80018f4:	f7ff fe84 	bl	8001600 <LL_FLASH_GetLatency>
 80018f8:	4603      	mov	r3, r0
 80018fa:	2b05      	cmp	r3, #5
 80018fc:	d1fa      	bne.n	80018f4 <SystemClock_Config+0xc>
  {
  }
  LL_PWR_SetRegulVoltageScaling(LL_PWR_REGU_VOLTAGE_SCALE1);
 80018fe:	f44f 4040 	mov.w	r0, #49152	; 0xc000
 8001902:	f7ff fe9b 	bl	800163c <LL_PWR_SetRegulVoltageScaling>
  LL_PWR_EnableOverDriveMode();
 8001906:	f7ff fe89 	bl	800161c <LL_PWR_EnableOverDriveMode>
  LL_RCC_HSI_SetCalibTrimming(16);
 800190a:	2010      	movs	r0, #16
 800190c:	f7ff fd88 	bl	8001420 <LL_RCC_HSI_SetCalibTrimming>
  LL_RCC_HSI_Enable();
 8001910:	f7ff fd64 	bl	80013dc <LL_RCC_HSI_Enable>

   /* Wait till HSI is ready */
  while(LL_RCC_HSI_IsReady() != 1)
 8001914:	bf00      	nop
 8001916:	f7ff fd71 	bl	80013fc <LL_RCC_HSI_IsReady>
 800191a:	4603      	mov	r3, r0
 800191c:	2b01      	cmp	r3, #1
 800191e:	d1fa      	bne.n	8001916 <SystemClock_Config+0x2e>
  {

  }
  LL_RCC_PLL_ConfigDomain_SYS(LL_RCC_PLLSOURCE_HSI, LL_RCC_PLLM_DIV_8, 180, LL_RCC_PLLP_DIV_2);
 8001920:	2300      	movs	r3, #0
 8001922:	22b4      	movs	r2, #180	; 0xb4
 8001924:	2108      	movs	r1, #8
 8001926:	2000      	movs	r0, #0
 8001928:	f7ff fe28 	bl	800157c <LL_RCC_PLL_ConfigDomain_SYS>
  LL_RCC_PLL_Enable();
 800192c:	f7ff fe02 	bl	8001534 <LL_RCC_PLL_Enable>

   /* Wait till PLL is ready */
  while(LL_RCC_PLL_IsReady() != 1)
 8001930:	bf00      	nop
 8001932:	f7ff fe0f 	bl	8001554 <LL_RCC_PLL_IsReady>
 8001936:	4603      	mov	r3, r0
 8001938:	2b01      	cmp	r3, #1
 800193a:	d1fa      	bne.n	8001932 <SystemClock_Config+0x4a>
  {

  }
  while (LL_PWR_IsActiveFlag_VOS() == 0)
 800193c:	bf00      	nop
 800193e:	f7ff fe91 	bl	8001664 <LL_PWR_IsActiveFlag_VOS>
 8001942:	4603      	mov	r3, r0
 8001944:	2b00      	cmp	r3, #0
 8001946:	d0fa      	beq.n	800193e <SystemClock_Config+0x56>
  {
  }
  LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
 8001948:	2000      	movs	r0, #0
 800194a:	f7ff fda1 	bl	8001490 <LL_RCC_SetAHBPrescaler>
  LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_4);
 800194e:	f44f 50a0 	mov.w	r0, #5120	; 0x1400
 8001952:	f7ff fdb1 	bl	80014b8 <LL_RCC_SetAPB1Prescaler>
  LL_RCC_SetAPB2Prescaler(LL_RCC_APB2_DIV_2);
 8001956:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 800195a:	f7ff fdc1 	bl	80014e0 <LL_RCC_SetAPB2Prescaler>
  LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_PLL);
 800195e:	2002      	movs	r0, #2
 8001960:	f7ff fd74 	bl	800144c <LL_RCC_SetSysClkSource>

   /* Wait till System clock is ready */
  while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 8001964:	bf00      	nop
 8001966:	f7ff fd85 	bl	8001474 <LL_RCC_GetSysClkSource>
 800196a:	4603      	mov	r3, r0
 800196c:	2b08      	cmp	r3, #8
 800196e:	d1fa      	bne.n	8001966 <SystemClock_Config+0x7e>
  {

  }
  LL_SetSystemCoreClock(180000000);
 8001970:	4807      	ldr	r0, [pc, #28]	; (8001990 <SystemClock_Config+0xa8>)
 8001972:	f002 fc8b 	bl	800428c <LL_SetSystemCoreClock>

   /* Update the time base */
  if (HAL_InitTick (TICK_INT_PRIORITY) != HAL_OK)
 8001976:	200f      	movs	r0, #15
 8001978:	f001 f884 	bl	8002a84 <HAL_InitTick>
 800197c:	4603      	mov	r3, r0
 800197e:	2b00      	cmp	r3, #0
 8001980:	d001      	beq.n	8001986 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8001982:	f000 f807 	bl	8001994 <Error_Handler>
  }
  LL_RCC_SetTIMPrescaler(LL_RCC_TIM_PRESCALER_TWICE);
 8001986:	2000      	movs	r0, #0
 8001988:	f7ff fdbe 	bl	8001508 <LL_RCC_SetTIMPrescaler>
}
 800198c:	bf00      	nop
 800198e:	bd80      	pop	{r7, pc}
 8001990:	0aba9500 	.word	0x0aba9500

08001994 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001994:	b480      	push	{r7}
 8001996:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8001998:	b672      	cpsid	i
}
 800199a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800199c:	e7fe      	b.n	800199c <Error_Handler+0x8>
	...

080019a0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80019a0:	b480      	push	{r7}
 80019a2:	b083      	sub	sp, #12
 80019a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80019a6:	2300      	movs	r3, #0
 80019a8:	607b      	str	r3, [r7, #4]
 80019aa:	4b10      	ldr	r3, [pc, #64]	; (80019ec <HAL_MspInit+0x4c>)
 80019ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019ae:	4a0f      	ldr	r2, [pc, #60]	; (80019ec <HAL_MspInit+0x4c>)
 80019b0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80019b4:	6453      	str	r3, [r2, #68]	; 0x44
 80019b6:	4b0d      	ldr	r3, [pc, #52]	; (80019ec <HAL_MspInit+0x4c>)
 80019b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019ba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80019be:	607b      	str	r3, [r7, #4]
 80019c0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80019c2:	2300      	movs	r3, #0
 80019c4:	603b      	str	r3, [r7, #0]
 80019c6:	4b09      	ldr	r3, [pc, #36]	; (80019ec <HAL_MspInit+0x4c>)
 80019c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019ca:	4a08      	ldr	r2, [pc, #32]	; (80019ec <HAL_MspInit+0x4c>)
 80019cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80019d0:	6413      	str	r3, [r2, #64]	; 0x40
 80019d2:	4b06      	ldr	r3, [pc, #24]	; (80019ec <HAL_MspInit+0x4c>)
 80019d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019da:	603b      	str	r3, [r7, #0]
 80019dc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80019de:	bf00      	nop
 80019e0:	370c      	adds	r7, #12
 80019e2:	46bd      	mov	sp, r7
 80019e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e8:	4770      	bx	lr
 80019ea:	bf00      	nop
 80019ec:	40023800 	.word	0x40023800

080019f0 <LL_TIM_ClearFlag_UPDATE>:
{
 80019f0:	b480      	push	{r7}
 80019f2:	b083      	sub	sp, #12
 80019f4:	af00      	add	r7, sp, #0
 80019f6:	6078      	str	r0, [r7, #4]
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	f06f 0201 	mvn.w	r2, #1
 80019fe:	611a      	str	r2, [r3, #16]
}
 8001a00:	bf00      	nop
 8001a02:	370c      	adds	r7, #12
 8001a04:	46bd      	mov	sp, r7
 8001a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a0a:	4770      	bx	lr

08001a0c <LL_TIM_IsActiveFlag_UPDATE>:
{
 8001a0c:	b480      	push	{r7}
 8001a0e:	b083      	sub	sp, #12
 8001a10:	af00      	add	r7, sp, #0
 8001a12:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	691b      	ldr	r3, [r3, #16]
 8001a18:	f003 0301 	and.w	r3, r3, #1
 8001a1c:	2b01      	cmp	r3, #1
 8001a1e:	d101      	bne.n	8001a24 <LL_TIM_IsActiveFlag_UPDATE+0x18>
 8001a20:	2301      	movs	r3, #1
 8001a22:	e000      	b.n	8001a26 <LL_TIM_IsActiveFlag_UPDATE+0x1a>
 8001a24:	2300      	movs	r3, #0
}
 8001a26:	4618      	mov	r0, r3
 8001a28:	370c      	adds	r7, #12
 8001a2a:	46bd      	mov	sp, r7
 8001a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a30:	4770      	bx	lr

08001a32 <LL_GPIO_SetPinMode>:
{
 8001a32:	b480      	push	{r7}
 8001a34:	b089      	sub	sp, #36	; 0x24
 8001a36:	af00      	add	r7, sp, #0
 8001a38:	60f8      	str	r0, [r7, #12]
 8001a3a:	60b9      	str	r1, [r7, #8]
 8001a3c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8001a3e:	68fb      	ldr	r3, [r7, #12]
 8001a40:	681a      	ldr	r2, [r3, #0]
 8001a42:	68bb      	ldr	r3, [r7, #8]
 8001a44:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a46:	697b      	ldr	r3, [r7, #20]
 8001a48:	fa93 f3a3 	rbit	r3, r3
 8001a4c:	613b      	str	r3, [r7, #16]
  return result;
 8001a4e:	693b      	ldr	r3, [r7, #16]
 8001a50:	fab3 f383 	clz	r3, r3
 8001a54:	b2db      	uxtb	r3, r3
 8001a56:	005b      	lsls	r3, r3, #1
 8001a58:	2103      	movs	r1, #3
 8001a5a:	fa01 f303 	lsl.w	r3, r1, r3
 8001a5e:	43db      	mvns	r3, r3
 8001a60:	401a      	ands	r2, r3
 8001a62:	68bb      	ldr	r3, [r7, #8]
 8001a64:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a66:	69fb      	ldr	r3, [r7, #28]
 8001a68:	fa93 f3a3 	rbit	r3, r3
 8001a6c:	61bb      	str	r3, [r7, #24]
  return result;
 8001a6e:	69bb      	ldr	r3, [r7, #24]
 8001a70:	fab3 f383 	clz	r3, r3
 8001a74:	b2db      	uxtb	r3, r3
 8001a76:	005b      	lsls	r3, r3, #1
 8001a78:	6879      	ldr	r1, [r7, #4]
 8001a7a:	fa01 f303 	lsl.w	r3, r1, r3
 8001a7e:	431a      	orrs	r2, r3
 8001a80:	68fb      	ldr	r3, [r7, #12]
 8001a82:	601a      	str	r2, [r3, #0]
}
 8001a84:	bf00      	nop
 8001a86:	3724      	adds	r7, #36	; 0x24
 8001a88:	46bd      	mov	sp, r7
 8001a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a8e:	4770      	bx	lr

08001a90 <LL_GPIO_IsInputPinSet>:
{
 8001a90:	b480      	push	{r7}
 8001a92:	b083      	sub	sp, #12
 8001a94:	af00      	add	r7, sp, #0
 8001a96:	6078      	str	r0, [r7, #4]
 8001a98:	6039      	str	r1, [r7, #0]
  return (READ_BIT(GPIOx->IDR, PinMask) == (PinMask));
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	691a      	ldr	r2, [r3, #16]
 8001a9e:	683b      	ldr	r3, [r7, #0]
 8001aa0:	4013      	ands	r3, r2
 8001aa2:	683a      	ldr	r2, [r7, #0]
 8001aa4:	429a      	cmp	r2, r3
 8001aa6:	bf0c      	ite	eq
 8001aa8:	2301      	moveq	r3, #1
 8001aaa:	2300      	movne	r3, #0
 8001aac:	b2db      	uxtb	r3, r3
}
 8001aae:	4618      	mov	r0, r3
 8001ab0:	370c      	adds	r7, #12
 8001ab2:	46bd      	mov	sp, r7
 8001ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab8:	4770      	bx	lr

08001aba <LL_GPIO_SetOutputPin>:
{
 8001aba:	b480      	push	{r7}
 8001abc:	b083      	sub	sp, #12
 8001abe:	af00      	add	r7, sp, #0
 8001ac0:	6078      	str	r0, [r7, #4]
 8001ac2:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	683a      	ldr	r2, [r7, #0]
 8001ac8:	619a      	str	r2, [r3, #24]
}
 8001aca:	bf00      	nop
 8001acc:	370c      	adds	r7, #12
 8001ace:	46bd      	mov	sp, r7
 8001ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad4:	4770      	bx	lr

08001ad6 <LL_GPIO_ResetOutputPin>:
{
 8001ad6:	b480      	push	{r7}
 8001ad8:	b083      	sub	sp, #12
 8001ada:	af00      	add	r7, sp, #0
 8001adc:	6078      	str	r0, [r7, #4]
 8001ade:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 8001ae0:	683b      	ldr	r3, [r7, #0]
 8001ae2:	041a      	lsls	r2, r3, #16
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	619a      	str	r2, [r3, #24]
}
 8001ae8:	bf00      	nop
 8001aea:	370c      	adds	r7, #12
 8001aec:	46bd      	mov	sp, r7
 8001aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af2:	4770      	bx	lr

08001af4 <Duty_Velocity>:

/* Private function prototypes -----------------------------------------------*/
/* USER CODE BEGIN PFP */

void Duty_Velocity()
{
 8001af4:	b580      	push	{r7, lr}
 8001af6:	b084      	sub	sp, #16
 8001af8:	af04      	add	r7, sp, #16
	Duty_Control_Velocity(&MotorDutyVelocity1, &Direction1, GPIOC, LL_GPIO_PIN_8, TIM1, 1, DutyTarget1);
 8001afa:	4b0f      	ldr	r3, [pc, #60]	; (8001b38 <Duty_Velocity+0x44>)
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	9302      	str	r3, [sp, #8]
 8001b00:	2301      	movs	r3, #1
 8001b02:	9301      	str	r3, [sp, #4]
 8001b04:	4b0d      	ldr	r3, [pc, #52]	; (8001b3c <Duty_Velocity+0x48>)
 8001b06:	9300      	str	r3, [sp, #0]
 8001b08:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001b0c:	4a0c      	ldr	r2, [pc, #48]	; (8001b40 <Duty_Velocity+0x4c>)
 8001b0e:	490d      	ldr	r1, [pc, #52]	; (8001b44 <Duty_Velocity+0x50>)
 8001b10:	480d      	ldr	r0, [pc, #52]	; (8001b48 <Duty_Velocity+0x54>)
 8001b12:	f7fe fdb3 	bl	800067c <Duty_Control_Velocity>
	Duty_Control_Velocity(&MotorDutyVelocity2, &Direction2, GPIOC, LL_GPIO_PIN_9, TIM1, 2, DutyTarget2);
 8001b16:	4b0d      	ldr	r3, [pc, #52]	; (8001b4c <Duty_Velocity+0x58>)
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	9302      	str	r3, [sp, #8]
 8001b1c:	2302      	movs	r3, #2
 8001b1e:	9301      	str	r3, [sp, #4]
 8001b20:	4b06      	ldr	r3, [pc, #24]	; (8001b3c <Duty_Velocity+0x48>)
 8001b22:	9300      	str	r3, [sp, #0]
 8001b24:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001b28:	4a05      	ldr	r2, [pc, #20]	; (8001b40 <Duty_Velocity+0x4c>)
 8001b2a:	4909      	ldr	r1, [pc, #36]	; (8001b50 <Duty_Velocity+0x5c>)
 8001b2c:	4809      	ldr	r0, [pc, #36]	; (8001b54 <Duty_Velocity+0x60>)
 8001b2e:	f7fe fda5 	bl	800067c <Duty_Control_Velocity>
}
 8001b32:	bf00      	nop
 8001b34:	46bd      	mov	sp, r7
 8001b36:	bd80      	pop	{r7, pc}
 8001b38:	20000098 	.word	0x20000098
 8001b3c:	40010000 	.word	0x40010000
 8001b40:	40020800 	.word	0x40020800
 8001b44:	20000078 	.word	0x20000078
 8001b48:	20000088 	.word	0x20000088
 8001b4c:	2000009c 	.word	0x2000009c
 8001b50:	20000080 	.word	0x20000080
 8001b54:	20000090 	.word	0x20000090

08001b58 <Stop>:

void Stop()
{
 8001b58:	b480      	push	{r7}
 8001b5a:	af00      	add	r7, sp, #0
	DutyTarget1 = 0;
 8001b5c:	4b05      	ldr	r3, [pc, #20]	; (8001b74 <Stop+0x1c>)
 8001b5e:	2200      	movs	r2, #0
 8001b60:	601a      	str	r2, [r3, #0]
	DutyTarget2 = 0;
 8001b62:	4b05      	ldr	r3, [pc, #20]	; (8001b78 <Stop+0x20>)
 8001b64:	2200      	movs	r2, #0
 8001b66:	601a      	str	r2, [r3, #0]
}
 8001b68:	bf00      	nop
 8001b6a:	46bd      	mov	sp, r7
 8001b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b70:	4770      	bx	lr
 8001b72:	bf00      	nop
 8001b74:	20000098 	.word	0x20000098
 8001b78:	2000009c 	.word	0x2000009c

08001b7c <GoFront>:

void GoFront()
{
 8001b7c:	b480      	push	{r7}
 8001b7e:	af00      	add	r7, sp, #0
	DutyTarget1 = FRONT;
 8001b80:	4b06      	ldr	r3, [pc, #24]	; (8001b9c <GoFront+0x20>)
 8001b82:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001b86:	601a      	str	r2, [r3, #0]
	DutyTarget2 = FRONT;
 8001b88:	4b05      	ldr	r3, [pc, #20]	; (8001ba0 <GoFront+0x24>)
 8001b8a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001b8e:	601a      	str	r2, [r3, #0]
}
 8001b90:	bf00      	nop
 8001b92:	46bd      	mov	sp, r7
 8001b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b98:	4770      	bx	lr
 8001b9a:	bf00      	nop
 8001b9c:	20000098 	.word	0x20000098
 8001ba0:	2000009c 	.word	0x2000009c

08001ba4 <GoFrontBoost>:

void GoFrontBoost()
{
 8001ba4:	b480      	push	{r7}
 8001ba6:	af00      	add	r7, sp, #0
	DutyTarget1 = BOOST;
 8001ba8:	4b06      	ldr	r3, [pc, #24]	; (8001bc4 <GoFrontBoost+0x20>)
 8001baa:	f240 3252 	movw	r2, #850	; 0x352
 8001bae:	601a      	str	r2, [r3, #0]
	DutyTarget2 = BOOST;
 8001bb0:	4b05      	ldr	r3, [pc, #20]	; (8001bc8 <GoFrontBoost+0x24>)
 8001bb2:	f240 3252 	movw	r2, #850	; 0x352
 8001bb6:	601a      	str	r2, [r3, #0]
}
 8001bb8:	bf00      	nop
 8001bba:	46bd      	mov	sp, r7
 8001bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc0:	4770      	bx	lr
 8001bc2:	bf00      	nop
 8001bc4:	20000098 	.word	0x20000098
 8001bc8:	2000009c 	.word	0x2000009c

08001bcc <GoStartBoost>:

void GoStartBoost()
{
 8001bcc:	b480      	push	{r7}
 8001bce:	af00      	add	r7, sp, #0
	DutyTarget1 = 800;
 8001bd0:	4b06      	ldr	r3, [pc, #24]	; (8001bec <GoStartBoost+0x20>)
 8001bd2:	f44f 7248 	mov.w	r2, #800	; 0x320
 8001bd6:	601a      	str	r2, [r3, #0]
	DutyTarget2 = 800;
 8001bd8:	4b05      	ldr	r3, [pc, #20]	; (8001bf0 <GoStartBoost+0x24>)
 8001bda:	f44f 7248 	mov.w	r2, #800	; 0x320
 8001bde:	601a      	str	r2, [r3, #0]
}
 8001be0:	bf00      	nop
 8001be2:	46bd      	mov	sp, r7
 8001be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be8:	4770      	bx	lr
 8001bea:	bf00      	nop
 8001bec:	20000098 	.word	0x20000098
 8001bf0:	2000009c 	.word	0x2000009c

08001bf4 <GoBack>:

void GoBack()
{
 8001bf4:	b480      	push	{r7}
 8001bf6:	af00      	add	r7, sp, #0
	DutyTarget1 = -BACK;
 8001bf8:	4b05      	ldr	r3, [pc, #20]	; (8001c10 <GoBack+0x1c>)
 8001bfa:	4a06      	ldr	r2, [pc, #24]	; (8001c14 <GoBack+0x20>)
 8001bfc:	601a      	str	r2, [r3, #0]
	DutyTarget2 = -BACK;
 8001bfe:	4b06      	ldr	r3, [pc, #24]	; (8001c18 <GoBack+0x24>)
 8001c00:	4a04      	ldr	r2, [pc, #16]	; (8001c14 <GoBack+0x20>)
 8001c02:	601a      	str	r2, [r3, #0]
}
 8001c04:	bf00      	nop
 8001c06:	46bd      	mov	sp, r7
 8001c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c0c:	4770      	bx	lr
 8001c0e:	bf00      	nop
 8001c10:	20000098 	.word	0x20000098
 8001c14:	fffffe0c 	.word	0xfffffe0c
 8001c18:	2000009c 	.word	0x2000009c

08001c1c <GoBackSlow>:

void GoBackSlow()
{
 8001c1c:	b480      	push	{r7}
 8001c1e:	af00      	add	r7, sp, #0
	DutyTarget1 = -150;
 8001c20:	4b06      	ldr	r3, [pc, #24]	; (8001c3c <GoBackSlow+0x20>)
 8001c22:	f06f 0295 	mvn.w	r2, #149	; 0x95
 8001c26:	601a      	str	r2, [r3, #0]
	DutyTarget2 = -150;
 8001c28:	4b05      	ldr	r3, [pc, #20]	; (8001c40 <GoBackSlow+0x24>)
 8001c2a:	f06f 0295 	mvn.w	r2, #149	; 0x95
 8001c2e:	601a      	str	r2, [r3, #0]
}
 8001c30:	bf00      	nop
 8001c32:	46bd      	mov	sp, r7
 8001c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c38:	4770      	bx	lr
 8001c3a:	bf00      	nop
 8001c3c:	20000098 	.word	0x20000098
 8001c40:	2000009c 	.word	0x2000009c

08001c44 <TurnLeft>:

void TurnLeft()
{
 8001c44:	b480      	push	{r7}
 8001c46:	af00      	add	r7, sp, #0
	DutyTarget1 = -TURN;
 8001c48:	4b05      	ldr	r3, [pc, #20]	; (8001c60 <TurnLeft+0x1c>)
 8001c4a:	4a06      	ldr	r2, [pc, #24]	; (8001c64 <TurnLeft+0x20>)
 8001c4c:	601a      	str	r2, [r3, #0]
	DutyTarget2 = TURN;
 8001c4e:	4b06      	ldr	r3, [pc, #24]	; (8001c68 <TurnLeft+0x24>)
 8001c50:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8001c54:	601a      	str	r2, [r3, #0]
}
 8001c56:	bf00      	nop
 8001c58:	46bd      	mov	sp, r7
 8001c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c5e:	4770      	bx	lr
 8001c60:	20000098 	.word	0x20000098
 8001c64:	fffffe70 	.word	0xfffffe70
 8001c68:	2000009c 	.word	0x2000009c

08001c6c <TurnRight>:

void TurnRight()
{
 8001c6c:	b480      	push	{r7}
 8001c6e:	af00      	add	r7, sp, #0
	DutyTarget1 = TURN;
 8001c70:	4b05      	ldr	r3, [pc, #20]	; (8001c88 <TurnRight+0x1c>)
 8001c72:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8001c76:	601a      	str	r2, [r3, #0]
	DutyTarget2 = -TURN;
 8001c78:	4b04      	ldr	r3, [pc, #16]	; (8001c8c <TurnRight+0x20>)
 8001c7a:	4a05      	ldr	r2, [pc, #20]	; (8001c90 <TurnRight+0x24>)
 8001c7c:	601a      	str	r2, [r3, #0]
}
 8001c7e:	bf00      	nop
 8001c80:	46bd      	mov	sp, r7
 8001c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c86:	4770      	bx	lr
 8001c88:	20000098 	.word	0x20000098
 8001c8c:	2000009c 	.word	0x2000009c
 8001c90:	fffffe70 	.word	0xfffffe70

08001c94 <HitFloor>:

void HitFloor()
{
 8001c94:	b580      	push	{r7, lr}
 8001c96:	af00      	add	r7, sp, #0
	hitflag == 1 ? Stop() : GoFrontBoost();
 8001c98:	4b05      	ldr	r3, [pc, #20]	; (8001cb0 <HitFloor+0x1c>)
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	2b01      	cmp	r3, #1
 8001c9e:	d102      	bne.n	8001ca6 <HitFloor+0x12>
 8001ca0:	f7ff ff5a 	bl	8001b58 <Stop>
}
 8001ca4:	e001      	b.n	8001caa <HitFloor+0x16>
	hitflag == 1 ? Stop() : GoFrontBoost();
 8001ca6:	f7ff ff7d 	bl	8001ba4 <GoFrontBoost>
}
 8001caa:	bf00      	nop
 8001cac:	bd80      	pop	{r7, pc}
 8001cae:	bf00      	nop
 8001cb0:	20000180 	.word	0x20000180

08001cb4 <QTI>:

long QTI(GPIO_TypeDef* GPIOx, uint16_t PINx)
{
 8001cb4:	b580      	push	{r7, lr}
 8001cb6:	b084      	sub	sp, #16
 8001cb8:	af00      	add	r7, sp, #0
 8001cba:	6078      	str	r0, [r7, #4]
 8001cbc:	460b      	mov	r3, r1
 8001cbe:	807b      	strh	r3, [r7, #2]
	long qti_value = 0;
 8001cc0:	2300      	movs	r3, #0
 8001cc2:	60fb      	str	r3, [r7, #12]

	LL_GPIO_SetPinMode(GPIOx, PINx, LL_GPIO_MODE_OUTPUT);
 8001cc4:	887b      	ldrh	r3, [r7, #2]
 8001cc6:	2201      	movs	r2, #1
 8001cc8:	4619      	mov	r1, r3
 8001cca:	6878      	ldr	r0, [r7, #4]
 8001ccc:	f7ff feb1 	bl	8001a32 <LL_GPIO_SetPinMode>
	LL_GPIO_SetOutputPin(GPIOx, PINx);
 8001cd0:	887b      	ldrh	r3, [r7, #2]
 8001cd2:	4619      	mov	r1, r3
 8001cd4:	6878      	ldr	r0, [r7, #4]
 8001cd6:	f7ff fef0 	bl	8001aba <LL_GPIO_SetOutputPin>

	LL_mDelay(1);
 8001cda:	2001      	movs	r0, #1
 8001cdc:	f002 fab0 	bl	8004240 <LL_mDelay>

	LL_GPIO_SetPinMode(GPIOx, PINx, LL_GPIO_MODE_INPUT);
 8001ce0:	887b      	ldrh	r3, [r7, #2]
 8001ce2:	2200      	movs	r2, #0
 8001ce4:	4619      	mov	r1, r3
 8001ce6:	6878      	ldr	r0, [r7, #4]
 8001ce8:	f7ff fea3 	bl	8001a32 <LL_GPIO_SetPinMode>
	LL_GPIO_ResetOutputPin(GPIOx, PINx);
 8001cec:	887b      	ldrh	r3, [r7, #2]
 8001cee:	4619      	mov	r1, r3
 8001cf0:	6878      	ldr	r0, [r7, #4]
 8001cf2:	f7ff fef0 	bl	8001ad6 <LL_GPIO_ResetOutputPin>

	while(LL_GPIO_IsInputPinSet(GPIOx, PINx))
 8001cf6:	e002      	b.n	8001cfe <QTI+0x4a>
	{
		qti_value++;
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	3301      	adds	r3, #1
 8001cfc:	60fb      	str	r3, [r7, #12]
	while(LL_GPIO_IsInputPinSet(GPIOx, PINx))
 8001cfe:	887b      	ldrh	r3, [r7, #2]
 8001d00:	4619      	mov	r1, r3
 8001d02:	6878      	ldr	r0, [r7, #4]
 8001d04:	f7ff fec4 	bl	8001a90 <LL_GPIO_IsInputPinSet>
 8001d08:	4603      	mov	r3, r0
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d1f4      	bne.n	8001cf8 <QTI+0x44>
	}

	return qti_value;
 8001d0e:	68fb      	ldr	r3, [r7, #12]
}
 8001d10:	4618      	mov	r0, r3
 8001d12:	3710      	adds	r7, #16
 8001d14:	46bd      	mov	sp, r7
 8001d16:	bd80      	pop	{r7, pc}

08001d18 <JudgeFrontQTI>:

void JudgeFrontQTI()
{
 8001d18:	b480      	push	{r7}
 8001d1a:	af00      	add	r7, sp, #0
	if((QTI_front_left < 1400 || QTI_front_right < 1300) || (IR1.output < 3900 || IR2.output < 2000)) //2800 1700 , 1400 1200 , 1300 1100
 8001d1c:	4b15      	ldr	r3, [pc, #84]	; (8001d74 <JudgeFrontQTI+0x5c>)
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	f5b3 6faf 	cmp.w	r3, #1400	; 0x578
 8001d24:	db19      	blt.n	8001d5a <JudgeFrontQTI+0x42>
 8001d26:	4b14      	ldr	r3, [pc, #80]	; (8001d78 <JudgeFrontQTI+0x60>)
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	f240 5213 	movw	r2, #1299	; 0x513
 8001d2e:	4293      	cmp	r3, r2
 8001d30:	dd13      	ble.n	8001d5a <JudgeFrontQTI+0x42>
 8001d32:	4b12      	ldr	r3, [pc, #72]	; (8001d7c <JudgeFrontQTI+0x64>)
 8001d34:	edd3 7a03 	vldr	s15, [r3, #12]
 8001d38:	ed9f 7a11 	vldr	s14, [pc, #68]	; 8001d80 <JudgeFrontQTI+0x68>
 8001d3c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001d40:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d44:	d409      	bmi.n	8001d5a <JudgeFrontQTI+0x42>
 8001d46:	4b0f      	ldr	r3, [pc, #60]	; (8001d84 <JudgeFrontQTI+0x6c>)
 8001d48:	edd3 7a03 	vldr	s15, [r3, #12]
 8001d4c:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 8001d88 <JudgeFrontQTI+0x70>
 8001d50:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001d54:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d58:	d503      	bpl.n	8001d62 <JudgeFrontQTI+0x4a>
	{
		frontQTIflag = 1;
 8001d5a:	4b0c      	ldr	r3, [pc, #48]	; (8001d8c <JudgeFrontQTI+0x74>)
 8001d5c:	2201      	movs	r2, #1
 8001d5e:	601a      	str	r2, [r3, #0]
 8001d60:	e003      	b.n	8001d6a <JudgeFrontQTI+0x52>
	}
	else
	{
		frontQTIflag = 0;
 8001d62:	4b0a      	ldr	r3, [pc, #40]	; (8001d8c <JudgeFrontQTI+0x74>)
 8001d64:	2200      	movs	r2, #0
 8001d66:	601a      	str	r2, [r3, #0]
	}
}
 8001d68:	bf00      	nop
 8001d6a:	bf00      	nop
 8001d6c:	46bd      	mov	sp, r7
 8001d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d72:	4770      	bx	lr
 8001d74:	2000016c 	.word	0x2000016c
 8001d78:	20000170 	.word	0x20000170
 8001d7c:	2000011c 	.word	0x2000011c
 8001d80:	4573c000 	.word	0x4573c000
 8001d84:	2000012c 	.word	0x2000012c
 8001d88:	44fa0000 	.word	0x44fa0000
 8001d8c:	20000174 	.word	0x20000174

08001d90 <JudgeCamera>:


void JudgeCamera() //flag : 1 = front, 2 = left, 3 = right, 4 = fail
{
 8001d90:	b480      	push	{r7}
 8001d92:	af00      	add	r7, sp, #0
	if(adc_rawdata[5] > UP_PAN_MIN && adc_rawdata[5] <= UP_PAN_MAX)
 8001d94:	4b1b      	ldr	r3, [pc, #108]	; (8001e04 <JudgeCamera+0x74>)
 8001d96:	695b      	ldr	r3, [r3, #20]
 8001d98:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
 8001d9c:	d90c      	bls.n	8001db8 <JudgeCamera+0x28>
 8001d9e:	4b19      	ldr	r3, [pc, #100]	; (8001e04 <JudgeCamera+0x74>)
 8001da0:	695b      	ldr	r3, [r3, #20]
 8001da2:	f640 6274 	movw	r2, #3700	; 0xe74
 8001da6:	4293      	cmp	r3, r2
 8001da8:	d806      	bhi.n	8001db8 <JudgeCamera+0x28>
	{
		cameraflag = 1;
 8001daa:	4b17      	ldr	r3, [pc, #92]	; (8001e08 <JudgeCamera+0x78>)
 8001dac:	2201      	movs	r2, #1
 8001dae:	601a      	str	r2, [r3, #0]
		DIRpixy = 1;
 8001db0:	4b16      	ldr	r3, [pc, #88]	; (8001e0c <JudgeCamera+0x7c>)
 8001db2:	2201      	movs	r2, #1
 8001db4:	601a      	str	r2, [r3, #0]
 8001db6:	e020      	b.n	8001dfa <JudgeCamera+0x6a>
	}
	else if(adc_rawdata[5] > UP_PAN_MAX)
 8001db8:	4b12      	ldr	r3, [pc, #72]	; (8001e04 <JudgeCamera+0x74>)
 8001dba:	695b      	ldr	r3, [r3, #20]
 8001dbc:	f640 6274 	movw	r2, #3700	; 0xe74
 8001dc0:	4293      	cmp	r3, r2
 8001dc2:	d906      	bls.n	8001dd2 <JudgeCamera+0x42>
	{
		cameraflag = 2;
 8001dc4:	4b10      	ldr	r3, [pc, #64]	; (8001e08 <JudgeCamera+0x78>)
 8001dc6:	2202      	movs	r2, #2
 8001dc8:	601a      	str	r2, [r3, #0]
		DIRpixy = 2;
 8001dca:	4b10      	ldr	r3, [pc, #64]	; (8001e0c <JudgeCamera+0x7c>)
 8001dcc:	2202      	movs	r2, #2
 8001dce:	601a      	str	r2, [r3, #0]

	else
	{
		cameraflag = 0;
	}
}
 8001dd0:	e013      	b.n	8001dfa <JudgeCamera+0x6a>
	else if(adc_rawdata[5] > UP_NO_PAN && adc_rawdata[5] <= UP_PAN_MIN)
 8001dd2:	4b0c      	ldr	r3, [pc, #48]	; (8001e04 <JudgeCamera+0x74>)
 8001dd4:	695b      	ldr	r3, [r3, #20]
 8001dd6:	2bc8      	cmp	r3, #200	; 0xc8
 8001dd8:	d90b      	bls.n	8001df2 <JudgeCamera+0x62>
 8001dda:	4b0a      	ldr	r3, [pc, #40]	; (8001e04 <JudgeCamera+0x74>)
 8001ddc:	695b      	ldr	r3, [r3, #20]
 8001dde:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
 8001de2:	d806      	bhi.n	8001df2 <JudgeCamera+0x62>
		cameraflag = 3;
 8001de4:	4b08      	ldr	r3, [pc, #32]	; (8001e08 <JudgeCamera+0x78>)
 8001de6:	2203      	movs	r2, #3
 8001de8:	601a      	str	r2, [r3, #0]
		DIRpixy = 3;
 8001dea:	4b08      	ldr	r3, [pc, #32]	; (8001e0c <JudgeCamera+0x7c>)
 8001dec:	2203      	movs	r2, #3
 8001dee:	601a      	str	r2, [r3, #0]
 8001df0:	e003      	b.n	8001dfa <JudgeCamera+0x6a>
		cameraflag = 0;
 8001df2:	4b05      	ldr	r3, [pc, #20]	; (8001e08 <JudgeCamera+0x78>)
 8001df4:	2200      	movs	r2, #0
 8001df6:	601a      	str	r2, [r3, #0]
}
 8001df8:	e7ff      	b.n	8001dfa <JudgeCamera+0x6a>
 8001dfa:	bf00      	nop
 8001dfc:	46bd      	mov	sp, r7
 8001dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e02:	4770      	bx	lr
 8001e04:	200000a0 	.word	0x200000a0
 8001e08:	20000178 	.word	0x20000178
 8001e0c:	2000017c 	.word	0x2000017c

08001e10 <AlgorithmCamera>:

void AlgorithmCamera()
{
 8001e10:	b580      	push	{r7, lr}
 8001e12:	af00      	add	r7, sp, #0
	switch(cameraflag)
 8001e14:	4b0f      	ldr	r3, [pc, #60]	; (8001e54 <AlgorithmCamera+0x44>)
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	2b03      	cmp	r3, #3
 8001e1a:	d00c      	beq.n	8001e36 <AlgorithmCamera+0x26>
 8001e1c:	2b03      	cmp	r3, #3
 8001e1e:	dc0d      	bgt.n	8001e3c <AlgorithmCamera+0x2c>
 8001e20:	2b01      	cmp	r3, #1
 8001e22:	d002      	beq.n	8001e2a <AlgorithmCamera+0x1a>
 8001e24:	2b02      	cmp	r3, #2
 8001e26:	d003      	beq.n	8001e30 <AlgorithmCamera+0x20>
 8001e28:	e008      	b.n	8001e3c <AlgorithmCamera+0x2c>
	{
	case 1:
	{
		GoFront();
 8001e2a:	f7ff fea7 	bl	8001b7c <GoFront>

		break;
 8001e2e:	e00f      	b.n	8001e50 <AlgorithmCamera+0x40>
	}

	case 2:
	{
		TurnRight();
 8001e30:	f7ff ff1c 	bl	8001c6c <TurnRight>

		break;
 8001e34:	e00c      	b.n	8001e50 <AlgorithmCamera+0x40>
	}

	case 3:
	{
		TurnLeft();
 8001e36:	f7ff ff05 	bl	8001c44 <TurnLeft>

		break;
 8001e3a:	e009      	b.n	8001e50 <AlgorithmCamera+0x40>
	}

	default:
	{
		if(DIRpixy == 2)
 8001e3c:	4b06      	ldr	r3, [pc, #24]	; (8001e58 <AlgorithmCamera+0x48>)
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	2b02      	cmp	r3, #2
 8001e42:	d102      	bne.n	8001e4a <AlgorithmCamera+0x3a>
		{
			TurnRight();
 8001e44:	f7ff ff12 	bl	8001c6c <TurnRight>
		}
		else
		{
			TurnLeft();
		}
		break;
 8001e48:	e001      	b.n	8001e4e <AlgorithmCamera+0x3e>
			TurnLeft();
 8001e4a:	f7ff fefb 	bl	8001c44 <TurnLeft>
		break;
 8001e4e:	bf00      	nop
	}
	}
}
 8001e50:	bf00      	nop
 8001e52:	bd80      	pop	{r7, pc}
 8001e54:	20000178 	.word	0x20000178
 8001e58:	2000017c 	.word	0x2000017c

08001e5c <Algorithm>:

void Algorithm()
{
 8001e5c:	b580      	push	{r7, lr}
 8001e5e:	af00      	add	r7, sp, #0
	JudgeFrontQTI();
 8001e60:	f7ff ff5a 	bl	8001d18 <JudgeFrontQTI>
	JudgeCamera();
 8001e64:	f7ff ff94 	bl	8001d90 <JudgeCamera>

	if(((PSD_back_left.output > 900 || PSD_back_right.output > 900) && PSD_Side1.output > 1200) || ((PSD_back_left.output > 900 || PSD_back_right.output > 900) && PSD_Side2.output > 1000)) //++ side psd
 8001e68:	4b71      	ldr	r3, [pc, #452]	; (8002030 <Algorithm+0x1d4>)
 8001e6a:	edd3 7a03 	vldr	s15, [r3, #12]
 8001e6e:	ed9f 7a71 	vldr	s14, [pc, #452]	; 8002034 <Algorithm+0x1d8>
 8001e72:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001e76:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e7a:	dc09      	bgt.n	8001e90 <Algorithm+0x34>
 8001e7c:	4b6e      	ldr	r3, [pc, #440]	; (8002038 <Algorithm+0x1dc>)
 8001e7e:	edd3 7a03 	vldr	s15, [r3, #12]
 8001e82:	ed9f 7a6c 	vldr	s14, [pc, #432]	; 8002034 <Algorithm+0x1d8>
 8001e86:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001e8a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e8e:	dd09      	ble.n	8001ea4 <Algorithm+0x48>
 8001e90:	4b6a      	ldr	r3, [pc, #424]	; (800203c <Algorithm+0x1e0>)
 8001e92:	edd3 7a03 	vldr	s15, [r3, #12]
 8001e96:	ed9f 7a6a 	vldr	s14, [pc, #424]	; 8002040 <Algorithm+0x1e4>
 8001e9a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001e9e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ea2:	dc1d      	bgt.n	8001ee0 <Algorithm+0x84>
 8001ea4:	4b62      	ldr	r3, [pc, #392]	; (8002030 <Algorithm+0x1d4>)
 8001ea6:	edd3 7a03 	vldr	s15, [r3, #12]
 8001eaa:	ed9f 7a62 	vldr	s14, [pc, #392]	; 8002034 <Algorithm+0x1d8>
 8001eae:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001eb2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001eb6:	dc09      	bgt.n	8001ecc <Algorithm+0x70>
 8001eb8:	4b5f      	ldr	r3, [pc, #380]	; (8002038 <Algorithm+0x1dc>)
 8001eba:	edd3 7a03 	vldr	s15, [r3, #12]
 8001ebe:	ed9f 7a5d 	vldr	s14, [pc, #372]	; 8002034 <Algorithm+0x1d8>
 8001ec2:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001ec6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001eca:	dd43      	ble.n	8001f54 <Algorithm+0xf8>
 8001ecc:	4b5d      	ldr	r3, [pc, #372]	; (8002044 <Algorithm+0x1e8>)
 8001ece:	edd3 7a03 	vldr	s15, [r3, #12]
 8001ed2:	ed9f 7a5d 	vldr	s14, [pc, #372]	; 8002048 <Algorithm+0x1ec>
 8001ed6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001eda:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ede:	dd39      	ble.n	8001f54 <Algorithm+0xf8>
	{
		stopcnt++;
 8001ee0:	4b5a      	ldr	r3, [pc, #360]	; (800204c <Algorithm+0x1f0>)
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	3301      	adds	r3, #1
 8001ee6:	4a59      	ldr	r2, [pc, #356]	; (800204c <Algorithm+0x1f0>)
 8001ee8:	6013      	str	r3, [r2, #0]

		if(stopcnt > 1000 && stopcnt <= 2000)
 8001eea:	4b58      	ldr	r3, [pc, #352]	; (800204c <Algorithm+0x1f0>)
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001ef2:	dd07      	ble.n	8001f04 <Algorithm+0xa8>
 8001ef4:	4b55      	ldr	r3, [pc, #340]	; (800204c <Algorithm+0x1f0>)
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8001efc:	dc02      	bgt.n	8001f04 <Algorithm+0xa8>
		{
			Stop();
 8001efe:	f7ff fe2b 	bl	8001b58 <Stop>
 8001f02:	e026      	b.n	8001f52 <Algorithm+0xf6>
		}
		else if(stopcnt > 2000 && stopcnt <= 3500)
 8001f04:	4b51      	ldr	r3, [pc, #324]	; (800204c <Algorithm+0x1f0>)
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8001f0c:	dd08      	ble.n	8001f20 <Algorithm+0xc4>
 8001f0e:	4b4f      	ldr	r3, [pc, #316]	; (800204c <Algorithm+0x1f0>)
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	f640 52ac 	movw	r2, #3500	; 0xdac
 8001f16:	4293      	cmp	r3, r2
 8001f18:	dc02      	bgt.n	8001f20 <Algorithm+0xc4>
		{
			GoBackSlow();
 8001f1a:	f7ff fe7f 	bl	8001c1c <GoBackSlow>
 8001f1e:	e018      	b.n	8001f52 <Algorithm+0xf6>
		}
		else if(stopcnt > 3500 && stopcnt <= 9000)
 8001f20:	4b4a      	ldr	r3, [pc, #296]	; (800204c <Algorithm+0x1f0>)
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	f640 52ac 	movw	r2, #3500	; 0xdac
 8001f28:	4293      	cmp	r3, r2
 8001f2a:	dd08      	ble.n	8001f3e <Algorithm+0xe2>
 8001f2c:	4b47      	ldr	r3, [pc, #284]	; (800204c <Algorithm+0x1f0>)
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	f242 3228 	movw	r2, #9000	; 0x2328
 8001f34:	4293      	cmp	r3, r2
 8001f36:	dc02      	bgt.n	8001f3e <Algorithm+0xe2>
		{
			GoFrontBoost();
 8001f38:	f7ff fe34 	bl	8001ba4 <GoFrontBoost>
 8001f3c:	e009      	b.n	8001f52 <Algorithm+0xf6>
		}
		else if(stopcnt > 9000)
 8001f3e:	4b43      	ldr	r3, [pc, #268]	; (800204c <Algorithm+0x1f0>)
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	f242 3228 	movw	r2, #9000	; 0x2328
 8001f46:	4293      	cmp	r3, r2
 8001f48:	dd6f      	ble.n	800202a <Algorithm+0x1ce>
		{
			stopcnt = 0;
 8001f4a:	4b40      	ldr	r3, [pc, #256]	; (800204c <Algorithm+0x1f0>)
 8001f4c:	2200      	movs	r2, #0
 8001f4e:	601a      	str	r2, [r3, #0]
		if(stopcnt > 1000 && stopcnt <= 2000)
 8001f50:	e06b      	b.n	800202a <Algorithm+0x1ce>
 8001f52:	e06a      	b.n	800202a <Algorithm+0x1ce>
		}
	}

	else if(PSD_back_left.output > 800 && PSD_back_right.output > 800) //++ side psd
 8001f54:	4b36      	ldr	r3, [pc, #216]	; (8002030 <Algorithm+0x1d4>)
 8001f56:	edd3 7a03 	vldr	s15, [r3, #12]
 8001f5a:	ed9f 7a3d 	vldr	s14, [pc, #244]	; 8002050 <Algorithm+0x1f4>
 8001f5e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001f62:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f66:	dd0c      	ble.n	8001f82 <Algorithm+0x126>
 8001f68:	4b33      	ldr	r3, [pc, #204]	; (8002038 <Algorithm+0x1dc>)
 8001f6a:	edd3 7a03 	vldr	s15, [r3, #12]
 8001f6e:	ed9f 7a38 	vldr	s14, [pc, #224]	; 8002050 <Algorithm+0x1f4>
 8001f72:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001f76:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f7a:	dd02      	ble.n	8001f82 <Algorithm+0x126>
	{
		GoFrontBoost();
 8001f7c:	f7ff fe12 	bl	8001ba4 <GoFrontBoost>
 8001f80:	e054      	b.n	800202c <Algorithm+0x1d0>
	}

	else if(frontQTIflag == 1)
 8001f82:	4b34      	ldr	r3, [pc, #208]	; (8002054 <Algorithm+0x1f8>)
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	2b01      	cmp	r3, #1
 8001f88:	d102      	bne.n	8001f90 <Algorithm+0x134>
	{
		GoBack();
 8001f8a:	f7ff fe33 	bl	8001bf4 <GoBack>

	else
	{
		AlgorithmCamera();
	}
}
 8001f8e:	e04d      	b.n	800202c <Algorithm+0x1d0>
	else if((PSD_front_left.output > PSD_BOOST_1 || PSD_front_right.output > PSD_BOOST_2) && !(cameraflag == 0))
 8001f90:	4b31      	ldr	r3, [pc, #196]	; (8002058 <Algorithm+0x1fc>)
 8001f92:	edd3 7a03 	vldr	s15, [r3, #12]
 8001f96:	ed9f 7a31 	vldr	s14, [pc, #196]	; 800205c <Algorithm+0x200>
 8001f9a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001f9e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001fa2:	dc09      	bgt.n	8001fb8 <Algorithm+0x15c>
 8001fa4:	4b2e      	ldr	r3, [pc, #184]	; (8002060 <Algorithm+0x204>)
 8001fa6:	edd3 7a03 	vldr	s15, [r3, #12]
 8001faa:	ed9f 7a2c 	vldr	s14, [pc, #176]	; 800205c <Algorithm+0x200>
 8001fae:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001fb2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001fb6:	dd06      	ble.n	8001fc6 <Algorithm+0x16a>
 8001fb8:	4b2a      	ldr	r3, [pc, #168]	; (8002064 <Algorithm+0x208>)
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d002      	beq.n	8001fc6 <Algorithm+0x16a>
		GoFrontBoost();
 8001fc0:	f7ff fdf0 	bl	8001ba4 <GoFrontBoost>
 8001fc4:	e032      	b.n	800202c <Algorithm+0x1d0>
	else if(((PSD_front_left.output > PSD_HIT_1 || PSD_front_right.output > PSD_HIT_2) && (PSD_front_left.output <= PSD_BOOST_1 && PSD_front_right.output <= PSD_BOOST_2)) && !(cameraflag == 0))
 8001fc6:	4b24      	ldr	r3, [pc, #144]	; (8002058 <Algorithm+0x1fc>)
 8001fc8:	edd3 7a03 	vldr	s15, [r3, #12]
 8001fcc:	ed9f 7a26 	vldr	s14, [pc, #152]	; 8002068 <Algorithm+0x20c>
 8001fd0:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001fd4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001fd8:	dc09      	bgt.n	8001fee <Algorithm+0x192>
 8001fda:	4b21      	ldr	r3, [pc, #132]	; (8002060 <Algorithm+0x204>)
 8001fdc:	edd3 7a03 	vldr	s15, [r3, #12]
 8001fe0:	ed9f 7a21 	vldr	s14, [pc, #132]	; 8002068 <Algorithm+0x20c>
 8001fe4:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001fe8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001fec:	dd1a      	ble.n	8002024 <Algorithm+0x1c8>
 8001fee:	4b1a      	ldr	r3, [pc, #104]	; (8002058 <Algorithm+0x1fc>)
 8001ff0:	edd3 7a03 	vldr	s15, [r3, #12]
 8001ff4:	ed9f 7a19 	vldr	s14, [pc, #100]	; 800205c <Algorithm+0x200>
 8001ff8:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001ffc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002000:	d810      	bhi.n	8002024 <Algorithm+0x1c8>
 8002002:	4b17      	ldr	r3, [pc, #92]	; (8002060 <Algorithm+0x204>)
 8002004:	edd3 7a03 	vldr	s15, [r3, #12]
 8002008:	ed9f 7a14 	vldr	s14, [pc, #80]	; 800205c <Algorithm+0x200>
 800200c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002010:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002014:	d806      	bhi.n	8002024 <Algorithm+0x1c8>
 8002016:	4b13      	ldr	r3, [pc, #76]	; (8002064 <Algorithm+0x208>)
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	2b00      	cmp	r3, #0
 800201c:	d002      	beq.n	8002024 <Algorithm+0x1c8>
		HitFloor();
 800201e:	f7ff fe39 	bl	8001c94 <HitFloor>
 8002022:	e003      	b.n	800202c <Algorithm+0x1d0>
		AlgorithmCamera();
 8002024:	f7ff fef4 	bl	8001e10 <AlgorithmCamera>
}
 8002028:	e000      	b.n	800202c <Algorithm+0x1d0>
		if(stopcnt > 1000 && stopcnt <= 2000)
 800202a:	bf00      	nop
}
 800202c:	bf00      	nop
 800202e:	bd80      	pop	{r7, pc}
 8002030:	200000ec 	.word	0x200000ec
 8002034:	44610000 	.word	0x44610000
 8002038:	200000fc 	.word	0x200000fc
 800203c:	2000013c 	.word	0x2000013c
 8002040:	44960000 	.word	0x44960000
 8002044:	2000014c 	.word	0x2000014c
 8002048:	447a0000 	.word	0x447a0000
 800204c:	20000190 	.word	0x20000190
 8002050:	44480000 	.word	0x44480000
 8002054:	20000174 	.word	0x20000174
 8002058:	200000cc 	.word	0x200000cc
 800205c:	44ed8000 	.word	0x44ed8000
 8002060:	200000dc 	.word	0x200000dc
 8002064:	20000178 	.word	0x20000178
 8002068:	442f0000 	.word	0x442f0000

0800206c <Start_Algorithm>:

void Start_Algorithm()
{
 800206c:	b580      	push	{r7, lr}
 800206e:	af00      	add	r7, sp, #0
	if(startflag == 1)
 8002070:	4b2b      	ldr	r3, [pc, #172]	; (8002120 <Start_Algorithm+0xb4>)
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	2b01      	cmp	r3, #1
 8002076:	d102      	bne.n	800207e <Start_Algorithm+0x12>
	{
		Algorithm();
 8002078:	f7ff fef0 	bl	8001e5c <Algorithm>
	{
		startcount++;

		TurnLeft();
	}
}
 800207c:	e04d      	b.n	800211a <Start_Algorithm+0xae>
	else if(startcount > fourthfront)
 800207e:	4b29      	ldr	r3, [pc, #164]	; (8002124 <Start_Algorithm+0xb8>)
 8002080:	681a      	ldr	r2, [r3, #0]
 8002082:	4b29      	ldr	r3, [pc, #164]	; (8002128 <Start_Algorithm+0xbc>)
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	429a      	cmp	r2, r3
 8002088:	dd03      	ble.n	8002092 <Start_Algorithm+0x26>
		startflag = 1;
 800208a:	4b25      	ldr	r3, [pc, #148]	; (8002120 <Start_Algorithm+0xb4>)
 800208c:	2201      	movs	r2, #1
 800208e:	601a      	str	r2, [r3, #0]
}
 8002090:	e043      	b.n	800211a <Start_Algorithm+0xae>
	else if(startcount > thirdleft && startcount <= fourthfront)
 8002092:	4b24      	ldr	r3, [pc, #144]	; (8002124 <Start_Algorithm+0xb8>)
 8002094:	681a      	ldr	r2, [r3, #0]
 8002096:	4b25      	ldr	r3, [pc, #148]	; (800212c <Start_Algorithm+0xc0>)
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	429a      	cmp	r2, r3
 800209c:	dd0d      	ble.n	80020ba <Start_Algorithm+0x4e>
 800209e:	4b21      	ldr	r3, [pc, #132]	; (8002124 <Start_Algorithm+0xb8>)
 80020a0:	681a      	ldr	r2, [r3, #0]
 80020a2:	4b21      	ldr	r3, [pc, #132]	; (8002128 <Start_Algorithm+0xbc>)
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	429a      	cmp	r2, r3
 80020a8:	dc07      	bgt.n	80020ba <Start_Algorithm+0x4e>
		startcount++;
 80020aa:	4b1e      	ldr	r3, [pc, #120]	; (8002124 <Start_Algorithm+0xb8>)
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	3301      	adds	r3, #1
 80020b0:	4a1c      	ldr	r2, [pc, #112]	; (8002124 <Start_Algorithm+0xb8>)
 80020b2:	6013      	str	r3, [r2, #0]
		HitFloor();
 80020b4:	f7ff fdee 	bl	8001c94 <HitFloor>
 80020b8:	e02f      	b.n	800211a <Start_Algorithm+0xae>
	else if(startcount > secondfront && startcount <= thirdleft)
 80020ba:	4b1a      	ldr	r3, [pc, #104]	; (8002124 <Start_Algorithm+0xb8>)
 80020bc:	681a      	ldr	r2, [r3, #0]
 80020be:	4b1c      	ldr	r3, [pc, #112]	; (8002130 <Start_Algorithm+0xc4>)
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	429a      	cmp	r2, r3
 80020c4:	dd0d      	ble.n	80020e2 <Start_Algorithm+0x76>
 80020c6:	4b17      	ldr	r3, [pc, #92]	; (8002124 <Start_Algorithm+0xb8>)
 80020c8:	681a      	ldr	r2, [r3, #0]
 80020ca:	4b18      	ldr	r3, [pc, #96]	; (800212c <Start_Algorithm+0xc0>)
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	429a      	cmp	r2, r3
 80020d0:	dc07      	bgt.n	80020e2 <Start_Algorithm+0x76>
		startcount++;
 80020d2:	4b14      	ldr	r3, [pc, #80]	; (8002124 <Start_Algorithm+0xb8>)
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	3301      	adds	r3, #1
 80020d8:	4a12      	ldr	r2, [pc, #72]	; (8002124 <Start_Algorithm+0xb8>)
 80020da:	6013      	str	r3, [r2, #0]
		TurnLeft();
 80020dc:	f7ff fdb2 	bl	8001c44 <TurnLeft>
 80020e0:	e01b      	b.n	800211a <Start_Algorithm+0xae>
	else if(startcount > firstleft && startcount <= secondfront)
 80020e2:	4b10      	ldr	r3, [pc, #64]	; (8002124 <Start_Algorithm+0xb8>)
 80020e4:	681a      	ldr	r2, [r3, #0]
 80020e6:	4b13      	ldr	r3, [pc, #76]	; (8002134 <Start_Algorithm+0xc8>)
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	429a      	cmp	r2, r3
 80020ec:	dd0d      	ble.n	800210a <Start_Algorithm+0x9e>
 80020ee:	4b0d      	ldr	r3, [pc, #52]	; (8002124 <Start_Algorithm+0xb8>)
 80020f0:	681a      	ldr	r2, [r3, #0]
 80020f2:	4b0f      	ldr	r3, [pc, #60]	; (8002130 <Start_Algorithm+0xc4>)
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	429a      	cmp	r2, r3
 80020f8:	dc07      	bgt.n	800210a <Start_Algorithm+0x9e>
		startcount++;
 80020fa:	4b0a      	ldr	r3, [pc, #40]	; (8002124 <Start_Algorithm+0xb8>)
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	3301      	adds	r3, #1
 8002100:	4a08      	ldr	r2, [pc, #32]	; (8002124 <Start_Algorithm+0xb8>)
 8002102:	6013      	str	r3, [r2, #0]
		GoStartBoost();
 8002104:	f7ff fd62 	bl	8001bcc <GoStartBoost>
 8002108:	e007      	b.n	800211a <Start_Algorithm+0xae>
		startcount++;
 800210a:	4b06      	ldr	r3, [pc, #24]	; (8002124 <Start_Algorithm+0xb8>)
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	3301      	adds	r3, #1
 8002110:	4a04      	ldr	r2, [pc, #16]	; (8002124 <Start_Algorithm+0xb8>)
 8002112:	6013      	str	r3, [r2, #0]
		TurnLeft();
 8002114:	f7ff fd96 	bl	8001c44 <TurnLeft>
}
 8002118:	e7ff      	b.n	800211a <Start_Algorithm+0xae>
 800211a:	bf00      	nop
 800211c:	bd80      	pop	{r7, pc}
 800211e:	bf00      	nop
 8002120:	2000018c 	.word	0x2000018c
 8002124:	20000188 	.word	0x20000188
 8002128:	20000168 	.word	0x20000168
 800212c:	20000164 	.word	0x20000164
 8002130:	20000160 	.word	0x20000160
 8002134:	2000015c 	.word	0x2000015c

08002138 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002138:	b480      	push	{r7}
 800213a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800213c:	e7fe      	b.n	800213c <NMI_Handler+0x4>

0800213e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800213e:	b480      	push	{r7}
 8002140:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002142:	e7fe      	b.n	8002142 <HardFault_Handler+0x4>

08002144 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002144:	b480      	push	{r7}
 8002146:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002148:	e7fe      	b.n	8002148 <MemManage_Handler+0x4>

0800214a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800214a:	b480      	push	{r7}
 800214c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800214e:	e7fe      	b.n	800214e <BusFault_Handler+0x4>

08002150 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002150:	b480      	push	{r7}
 8002152:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002154:	e7fe      	b.n	8002154 <UsageFault_Handler+0x4>

08002156 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002156:	b480      	push	{r7}
 8002158:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800215a:	bf00      	nop
 800215c:	46bd      	mov	sp, r7
 800215e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002162:	4770      	bx	lr

08002164 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002164:	b480      	push	{r7}
 8002166:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002168:	bf00      	nop
 800216a:	46bd      	mov	sp, r7
 800216c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002170:	4770      	bx	lr

08002172 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002172:	b480      	push	{r7}
 8002174:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002176:	bf00      	nop
 8002178:	46bd      	mov	sp, r7
 800217a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800217e:	4770      	bx	lr

08002180 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002180:	b580      	push	{r7, lr}
 8002182:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002184:	f000 fcae 	bl	8002ae4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002188:	bf00      	nop
 800218a:	bd80      	pop	{r7, pc}

0800218c <TIM1_BRK_TIM9_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM9 global interrupt.
  */
void TIM1_BRK_TIM9_IRQHandler(void)
{
 800218c:	b580      	push	{r7, lr}
 800218e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002190:	4802      	ldr	r0, [pc, #8]	; (800219c <TIM1_BRK_TIM9_IRQHandler+0x10>)
 8002192:	f000 ffff 	bl	8003194 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 1 */
}
 8002196:	bf00      	nop
 8002198:	bd80      	pop	{r7, pc}
 800219a:	bf00      	nop
 800219c:	20000198 	.word	0x20000198

080021a0 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 80021a0:	b580      	push	{r7, lr}
 80021a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80021a4:	4802      	ldr	r0, [pc, #8]	; (80021b0 <TIM1_UP_TIM10_IRQHandler+0x10>)
 80021a6:	f000 fff5 	bl	8003194 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 80021aa:	bf00      	nop
 80021ac:	bd80      	pop	{r7, pc}
 80021ae:	bf00      	nop
 80021b0:	20000198 	.word	0x20000198

080021b4 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 80021b4:	b580      	push	{r7, lr}
 80021b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80021b8:	4802      	ldr	r0, [pc, #8]	; (80021c4 <TIM1_TRG_COM_TIM11_IRQHandler+0x10>)
 80021ba:	f000 ffeb 	bl	8003194 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 80021be:	bf00      	nop
 80021c0:	bd80      	pop	{r7, pc}
 80021c2:	bf00      	nop
 80021c4:	20000198 	.word	0x20000198

080021c8 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 80021c8:	b580      	push	{r7, lr}
 80021ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80021cc:	4802      	ldr	r0, [pc, #8]	; (80021d8 <TIM1_CC_IRQHandler+0x10>)
 80021ce:	f000 ffe1 	bl	8003194 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 80021d2:	bf00      	nop
 80021d4:	bd80      	pop	{r7, pc}
 80021d6:	bf00      	nop
 80021d8:	20000198 	.word	0x20000198

080021dc <TIM8_UP_TIM13_IRQHandler>:

/**
  * @brief This function handles TIM8 update interrupt and TIM13 global interrupt.
  */
void TIM8_UP_TIM13_IRQHandler(void)
{
 80021dc:	b580      	push	{r7, lr}
 80021de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 0 */
	if(LL_TIM_IsActiveFlag_UPDATE(TIM8))
 80021e0:	4836      	ldr	r0, [pc, #216]	; (80022bc <TIM8_UP_TIM13_IRQHandler+0xe0>)
 80021e2:	f7ff fc13 	bl	8001a0c <LL_TIM_IsActiveFlag_UPDATE>
 80021e6:	4603      	mov	r3, r0
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d065      	beq.n	80022b8 <TIM8_UP_TIM13_IRQHandler+0xdc>
	{
		//right_back: 0, left_back: 1, bottom: 2, pixy1: 3 right_front: 4, pixy2: 5, left_front: 6
		MAF_Filter(&PSD_front_left, adc_rawdata[6]);
 80021ec:	4b34      	ldr	r3, [pc, #208]	; (80022c0 <TIM8_UP_TIM13_IRQHandler+0xe4>)
 80021ee:	699b      	ldr	r3, [r3, #24]
 80021f0:	ee07 3a90 	vmov	s15, r3
 80021f4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80021f8:	eeb0 0a67 	vmov.f32	s0, s15
 80021fc:	4831      	ldr	r0, [pc, #196]	; (80022c4 <TIM8_UP_TIM13_IRQHandler+0xe8>)
 80021fe:	f7fe fb4f 	bl	80008a0 <MAF_Filter>
		MAF_Filter(&PSD_front_right, adc_rawdata[4]);
 8002202:	4b2f      	ldr	r3, [pc, #188]	; (80022c0 <TIM8_UP_TIM13_IRQHandler+0xe4>)
 8002204:	691b      	ldr	r3, [r3, #16]
 8002206:	ee07 3a90 	vmov	s15, r3
 800220a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800220e:	eeb0 0a67 	vmov.f32	s0, s15
 8002212:	482d      	ldr	r0, [pc, #180]	; (80022c8 <TIM8_UP_TIM13_IRQHandler+0xec>)
 8002214:	f7fe fb44 	bl	80008a0 <MAF_Filter>
		MAF_Filter(&PSD_back_left, adc_rawdata[1]);
 8002218:	4b29      	ldr	r3, [pc, #164]	; (80022c0 <TIM8_UP_TIM13_IRQHandler+0xe4>)
 800221a:	685b      	ldr	r3, [r3, #4]
 800221c:	ee07 3a90 	vmov	s15, r3
 8002220:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002224:	eeb0 0a67 	vmov.f32	s0, s15
 8002228:	4828      	ldr	r0, [pc, #160]	; (80022cc <TIM8_UP_TIM13_IRQHandler+0xf0>)
 800222a:	f7fe fb39 	bl	80008a0 <MAF_Filter>
		MAF_Filter(&PSD_back_right, adc_rawdata[0]);
 800222e:	4b24      	ldr	r3, [pc, #144]	; (80022c0 <TIM8_UP_TIM13_IRQHandler+0xe4>)
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	ee07 3a90 	vmov	s15, r3
 8002236:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800223a:	eeb0 0a67 	vmov.f32	s0, s15
 800223e:	4824      	ldr	r0, [pc, #144]	; (80022d0 <TIM8_UP_TIM13_IRQHandler+0xf4>)
 8002240:	f7fe fb2e 	bl	80008a0 <MAF_Filter>
		MAF_Filter(&PSD_bottom, adc_rawdata[2]);
 8002244:	4b1e      	ldr	r3, [pc, #120]	; (80022c0 <TIM8_UP_TIM13_IRQHandler+0xe4>)
 8002246:	689b      	ldr	r3, [r3, #8]
 8002248:	ee07 3a90 	vmov	s15, r3
 800224c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002250:	eeb0 0a67 	vmov.f32	s0, s15
 8002254:	481f      	ldr	r0, [pc, #124]	; (80022d4 <TIM8_UP_TIM13_IRQHandler+0xf8>)
 8002256:	f7fe fb23 	bl	80008a0 <MAF_Filter>
		MAF_Filter(&IR1, adc_rawdata[7]);
 800225a:	4b19      	ldr	r3, [pc, #100]	; (80022c0 <TIM8_UP_TIM13_IRQHandler+0xe4>)
 800225c:	69db      	ldr	r3, [r3, #28]
 800225e:	ee07 3a90 	vmov	s15, r3
 8002262:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002266:	eeb0 0a67 	vmov.f32	s0, s15
 800226a:	481b      	ldr	r0, [pc, #108]	; (80022d8 <TIM8_UP_TIM13_IRQHandler+0xfc>)
 800226c:	f7fe fb18 	bl	80008a0 <MAF_Filter>
		MAF_Filter(&IR2, adc_rawdata[8]);
 8002270:	4b13      	ldr	r3, [pc, #76]	; (80022c0 <TIM8_UP_TIM13_IRQHandler+0xe4>)
 8002272:	6a1b      	ldr	r3, [r3, #32]
 8002274:	ee07 3a90 	vmov	s15, r3
 8002278:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800227c:	eeb0 0a67 	vmov.f32	s0, s15
 8002280:	4816      	ldr	r0, [pc, #88]	; (80022dc <TIM8_UP_TIM13_IRQHandler+0x100>)
 8002282:	f7fe fb0d 	bl	80008a0 <MAF_Filter>
		MAF_Filter(&PSD_Side1, adc_rawdata[9]);
 8002286:	4b0e      	ldr	r3, [pc, #56]	; (80022c0 <TIM8_UP_TIM13_IRQHandler+0xe4>)
 8002288:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800228a:	ee07 3a90 	vmov	s15, r3
 800228e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002292:	eeb0 0a67 	vmov.f32	s0, s15
 8002296:	4812      	ldr	r0, [pc, #72]	; (80022e0 <TIM8_UP_TIM13_IRQHandler+0x104>)
 8002298:	f7fe fb02 	bl	80008a0 <MAF_Filter>
		MAF_Filter(&PSD_Side2, adc_rawdata[10]);
 800229c:	4b08      	ldr	r3, [pc, #32]	; (80022c0 <TIM8_UP_TIM13_IRQHandler+0xe4>)
 800229e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022a0:	ee07 3a90 	vmov	s15, r3
 80022a4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80022a8:	eeb0 0a67 	vmov.f32	s0, s15
 80022ac:	480d      	ldr	r0, [pc, #52]	; (80022e4 <TIM8_UP_TIM13_IRQHandler+0x108>)
 80022ae:	f7fe faf7 	bl	80008a0 <MAF_Filter>

		LL_TIM_ClearFlag_UPDATE(TIM8);
 80022b2:	4802      	ldr	r0, [pc, #8]	; (80022bc <TIM8_UP_TIM13_IRQHandler+0xe0>)
 80022b4:	f7ff fb9c 	bl	80019f0 <LL_TIM_ClearFlag_UPDATE>
  /* USER CODE END TIM8_UP_TIM13_IRQn 0 */

  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 1 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 1 */
}
 80022b8:	bf00      	nop
 80022ba:	bd80      	pop	{r7, pc}
 80022bc:	40010400 	.word	0x40010400
 80022c0:	200000a0 	.word	0x200000a0
 80022c4:	200000cc 	.word	0x200000cc
 80022c8:	200000dc 	.word	0x200000dc
 80022cc:	200000ec 	.word	0x200000ec
 80022d0:	200000fc 	.word	0x200000fc
 80022d4:	2000010c 	.word	0x2000010c
 80022d8:	2000011c 	.word	0x2000011c
 80022dc:	2000012c 	.word	0x2000012c
 80022e0:	2000013c 	.word	0x2000013c
 80022e4:	2000014c 	.word	0x2000014c

080022e8 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1, DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80022e8:	b580      	push	{r7, lr}
 80022ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

	if(LL_TIM_IsActiveFlag_UPDATE(TIM6))
 80022ec:	4807      	ldr	r0, [pc, #28]	; (800230c <TIM6_DAC_IRQHandler+0x24>)
 80022ee:	f7ff fb8d 	bl	8001a0c <LL_TIM_IsActiveFlag_UPDATE>
 80022f2:	4603      	mov	r3, r0
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d006      	beq.n	8002306 <TIM6_DAC_IRQHandler+0x1e>
	{
		Duty_Velocity();
 80022f8:	f7ff fbfc 	bl	8001af4 <Duty_Velocity>

		Start_Algorithm();
 80022fc:	f7ff feb6 	bl	800206c <Start_Algorithm>

		LL_TIM_ClearFlag_UPDATE(TIM6);
 8002300:	4802      	ldr	r0, [pc, #8]	; (800230c <TIM6_DAC_IRQHandler+0x24>)
 8002302:	f7ff fb75 	bl	80019f0 <LL_TIM_ClearFlag_UPDATE>
  /* USER CODE END TIM6_DAC_IRQn 0 */

  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8002306:	bf00      	nop
 8002308:	bd80      	pop	{r7, pc}
 800230a:	bf00      	nop
 800230c:	40001000 	.word	0x40001000

08002310 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8002310:	b580      	push	{r7, lr}
 8002312:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

	QTI_front_left = QTI(GPIOA, LL_GPIO_PIN_7);
 8002314:	2180      	movs	r1, #128	; 0x80
 8002316:	4814      	ldr	r0, [pc, #80]	; (8002368 <TIM7_IRQHandler+0x58>)
 8002318:	f7ff fccc 	bl	8001cb4 <QTI>
 800231c:	4603      	mov	r3, r0
 800231e:	4a13      	ldr	r2, [pc, #76]	; (800236c <TIM7_IRQHandler+0x5c>)
 8002320:	6013      	str	r3, [r2, #0]
	QTI_front_right = QTI(GPIOA, LL_GPIO_PIN_6);
 8002322:	2140      	movs	r1, #64	; 0x40
 8002324:	4810      	ldr	r0, [pc, #64]	; (8002368 <TIM7_IRQHandler+0x58>)
 8002326:	f7ff fcc5 	bl	8001cb4 <QTI>
 800232a:	4603      	mov	r3, r0
 800232c:	4a10      	ldr	r2, [pc, #64]	; (8002370 <TIM7_IRQHandler+0x60>)
 800232e:	6013      	str	r3, [r2, #0]

	hitcount++;
 8002330:	4b10      	ldr	r3, [pc, #64]	; (8002374 <TIM7_IRQHandler+0x64>)
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	3301      	adds	r3, #1
 8002336:	4a0f      	ldr	r2, [pc, #60]	; (8002374 <TIM7_IRQHandler+0x64>)
 8002338:	6013      	str	r3, [r2, #0]
	if(hitcount == 7)
 800233a:	4b0e      	ldr	r3, [pc, #56]	; (8002374 <TIM7_IRQHandler+0x64>)
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	2b07      	cmp	r3, #7
 8002340:	d10c      	bne.n	800235c <TIM7_IRQHandler+0x4c>
	{
		hitflag = hitflag == 0 ? 1 : 0;
 8002342:	4b0d      	ldr	r3, [pc, #52]	; (8002378 <TIM7_IRQHandler+0x68>)
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	2b00      	cmp	r3, #0
 8002348:	bf0c      	ite	eq
 800234a:	2301      	moveq	r3, #1
 800234c:	2300      	movne	r3, #0
 800234e:	b2db      	uxtb	r3, r3
 8002350:	461a      	mov	r2, r3
 8002352:	4b09      	ldr	r3, [pc, #36]	; (8002378 <TIM7_IRQHandler+0x68>)
 8002354:	601a      	str	r2, [r3, #0]

		hitcount = 0;
 8002356:	4b07      	ldr	r3, [pc, #28]	; (8002374 <TIM7_IRQHandler+0x64>)
 8002358:	2200      	movs	r2, #0
 800235a:	601a      	str	r2, [r3, #0]
	}

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 800235c:	4807      	ldr	r0, [pc, #28]	; (800237c <TIM7_IRQHandler+0x6c>)
 800235e:	f000 ff19 	bl	8003194 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8002362:	bf00      	nop
 8002364:	bd80      	pop	{r7, pc}
 8002366:	bf00      	nop
 8002368:	40020000 	.word	0x40020000
 800236c:	2000016c 	.word	0x2000016c
 8002370:	20000170 	.word	0x20000170
 8002374:	20000184 	.word	0x20000184
 8002378:	20000180 	.word	0x20000180
 800237c:	200001e0 	.word	0x200001e0

08002380 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8002380:	b480      	push	{r7}
 8002382:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2_Stream0_IRQn 0 */

  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8002384:	bf00      	nop
 8002386:	46bd      	mov	sp, r7
 8002388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800238c:	4770      	bx	lr
	...

08002390 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002390:	b580      	push	{r7, lr}
 8002392:	b086      	sub	sp, #24
 8002394:	af00      	add	r7, sp, #0
 8002396:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002398:	4a14      	ldr	r2, [pc, #80]	; (80023ec <_sbrk+0x5c>)
 800239a:	4b15      	ldr	r3, [pc, #84]	; (80023f0 <_sbrk+0x60>)
 800239c:	1ad3      	subs	r3, r2, r3
 800239e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80023a0:	697b      	ldr	r3, [r7, #20]
 80023a2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80023a4:	4b13      	ldr	r3, [pc, #76]	; (80023f4 <_sbrk+0x64>)
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d102      	bne.n	80023b2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80023ac:	4b11      	ldr	r3, [pc, #68]	; (80023f4 <_sbrk+0x64>)
 80023ae:	4a12      	ldr	r2, [pc, #72]	; (80023f8 <_sbrk+0x68>)
 80023b0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80023b2:	4b10      	ldr	r3, [pc, #64]	; (80023f4 <_sbrk+0x64>)
 80023b4:	681a      	ldr	r2, [r3, #0]
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	4413      	add	r3, r2
 80023ba:	693a      	ldr	r2, [r7, #16]
 80023bc:	429a      	cmp	r2, r3
 80023be:	d207      	bcs.n	80023d0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80023c0:	f002 f840 	bl	8004444 <__errno>
 80023c4:	4603      	mov	r3, r0
 80023c6:	220c      	movs	r2, #12
 80023c8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80023ca:	f04f 33ff 	mov.w	r3, #4294967295
 80023ce:	e009      	b.n	80023e4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80023d0:	4b08      	ldr	r3, [pc, #32]	; (80023f4 <_sbrk+0x64>)
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80023d6:	4b07      	ldr	r3, [pc, #28]	; (80023f4 <_sbrk+0x64>)
 80023d8:	681a      	ldr	r2, [r3, #0]
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	4413      	add	r3, r2
 80023de:	4a05      	ldr	r2, [pc, #20]	; (80023f4 <_sbrk+0x64>)
 80023e0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80023e2:	68fb      	ldr	r3, [r7, #12]
}
 80023e4:	4618      	mov	r0, r3
 80023e6:	3718      	adds	r7, #24
 80023e8:	46bd      	mov	sp, r7
 80023ea:	bd80      	pop	{r7, pc}
 80023ec:	20020000 	.word	0x20020000
 80023f0:	00000400 	.word	0x00000400
 80023f4:	20000194 	.word	0x20000194
 80023f8:	20000378 	.word	0x20000378

080023fc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80023fc:	b480      	push	{r7}
 80023fe:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002400:	4b06      	ldr	r3, [pc, #24]	; (800241c <SystemInit+0x20>)
 8002402:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002406:	4a05      	ldr	r2, [pc, #20]	; (800241c <SystemInit+0x20>)
 8002408:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800240c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002410:	bf00      	nop
 8002412:	46bd      	mov	sp, r7
 8002414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002418:	4770      	bx	lr
 800241a:	bf00      	nop
 800241c:	e000ed00 	.word	0xe000ed00

08002420 <__NVIC_GetPriorityGrouping>:
{
 8002420:	b480      	push	{r7}
 8002422:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002424:	4b04      	ldr	r3, [pc, #16]	; (8002438 <__NVIC_GetPriorityGrouping+0x18>)
 8002426:	68db      	ldr	r3, [r3, #12]
 8002428:	0a1b      	lsrs	r3, r3, #8
 800242a:	f003 0307 	and.w	r3, r3, #7
}
 800242e:	4618      	mov	r0, r3
 8002430:	46bd      	mov	sp, r7
 8002432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002436:	4770      	bx	lr
 8002438:	e000ed00 	.word	0xe000ed00

0800243c <__NVIC_EnableIRQ>:
{
 800243c:	b480      	push	{r7}
 800243e:	b083      	sub	sp, #12
 8002440:	af00      	add	r7, sp, #0
 8002442:	4603      	mov	r3, r0
 8002444:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002446:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800244a:	2b00      	cmp	r3, #0
 800244c:	db0b      	blt.n	8002466 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800244e:	79fb      	ldrb	r3, [r7, #7]
 8002450:	f003 021f 	and.w	r2, r3, #31
 8002454:	4907      	ldr	r1, [pc, #28]	; (8002474 <__NVIC_EnableIRQ+0x38>)
 8002456:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800245a:	095b      	lsrs	r3, r3, #5
 800245c:	2001      	movs	r0, #1
 800245e:	fa00 f202 	lsl.w	r2, r0, r2
 8002462:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8002466:	bf00      	nop
 8002468:	370c      	adds	r7, #12
 800246a:	46bd      	mov	sp, r7
 800246c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002470:	4770      	bx	lr
 8002472:	bf00      	nop
 8002474:	e000e100 	.word	0xe000e100

08002478 <__NVIC_SetPriority>:
{
 8002478:	b480      	push	{r7}
 800247a:	b083      	sub	sp, #12
 800247c:	af00      	add	r7, sp, #0
 800247e:	4603      	mov	r3, r0
 8002480:	6039      	str	r1, [r7, #0]
 8002482:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002484:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002488:	2b00      	cmp	r3, #0
 800248a:	db0a      	blt.n	80024a2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800248c:	683b      	ldr	r3, [r7, #0]
 800248e:	b2da      	uxtb	r2, r3
 8002490:	490c      	ldr	r1, [pc, #48]	; (80024c4 <__NVIC_SetPriority+0x4c>)
 8002492:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002496:	0112      	lsls	r2, r2, #4
 8002498:	b2d2      	uxtb	r2, r2
 800249a:	440b      	add	r3, r1
 800249c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80024a0:	e00a      	b.n	80024b8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80024a2:	683b      	ldr	r3, [r7, #0]
 80024a4:	b2da      	uxtb	r2, r3
 80024a6:	4908      	ldr	r1, [pc, #32]	; (80024c8 <__NVIC_SetPriority+0x50>)
 80024a8:	79fb      	ldrb	r3, [r7, #7]
 80024aa:	f003 030f 	and.w	r3, r3, #15
 80024ae:	3b04      	subs	r3, #4
 80024b0:	0112      	lsls	r2, r2, #4
 80024b2:	b2d2      	uxtb	r2, r2
 80024b4:	440b      	add	r3, r1
 80024b6:	761a      	strb	r2, [r3, #24]
}
 80024b8:	bf00      	nop
 80024ba:	370c      	adds	r7, #12
 80024bc:	46bd      	mov	sp, r7
 80024be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c2:	4770      	bx	lr
 80024c4:	e000e100 	.word	0xe000e100
 80024c8:	e000ed00 	.word	0xe000ed00

080024cc <NVIC_EncodePriority>:
{
 80024cc:	b480      	push	{r7}
 80024ce:	b089      	sub	sp, #36	; 0x24
 80024d0:	af00      	add	r7, sp, #0
 80024d2:	60f8      	str	r0, [r7, #12]
 80024d4:	60b9      	str	r1, [r7, #8]
 80024d6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	f003 0307 	and.w	r3, r3, #7
 80024de:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80024e0:	69fb      	ldr	r3, [r7, #28]
 80024e2:	f1c3 0307 	rsb	r3, r3, #7
 80024e6:	2b04      	cmp	r3, #4
 80024e8:	bf28      	it	cs
 80024ea:	2304      	movcs	r3, #4
 80024ec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80024ee:	69fb      	ldr	r3, [r7, #28]
 80024f0:	3304      	adds	r3, #4
 80024f2:	2b06      	cmp	r3, #6
 80024f4:	d902      	bls.n	80024fc <NVIC_EncodePriority+0x30>
 80024f6:	69fb      	ldr	r3, [r7, #28]
 80024f8:	3b03      	subs	r3, #3
 80024fa:	e000      	b.n	80024fe <NVIC_EncodePriority+0x32>
 80024fc:	2300      	movs	r3, #0
 80024fe:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002500:	f04f 32ff 	mov.w	r2, #4294967295
 8002504:	69bb      	ldr	r3, [r7, #24]
 8002506:	fa02 f303 	lsl.w	r3, r2, r3
 800250a:	43da      	mvns	r2, r3
 800250c:	68bb      	ldr	r3, [r7, #8]
 800250e:	401a      	ands	r2, r3
 8002510:	697b      	ldr	r3, [r7, #20]
 8002512:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002514:	f04f 31ff 	mov.w	r1, #4294967295
 8002518:	697b      	ldr	r3, [r7, #20]
 800251a:	fa01 f303 	lsl.w	r3, r1, r3
 800251e:	43d9      	mvns	r1, r3
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002524:	4313      	orrs	r3, r2
}
 8002526:	4618      	mov	r0, r3
 8002528:	3724      	adds	r7, #36	; 0x24
 800252a:	46bd      	mov	sp, r7
 800252c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002530:	4770      	bx	lr
	...

08002534 <LL_APB1_GRP1_EnableClock>:
{
 8002534:	b480      	push	{r7}
 8002536:	b085      	sub	sp, #20
 8002538:	af00      	add	r7, sp, #0
 800253a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR, Periphs);
 800253c:	4b08      	ldr	r3, [pc, #32]	; (8002560 <LL_APB1_GRP1_EnableClock+0x2c>)
 800253e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002540:	4907      	ldr	r1, [pc, #28]	; (8002560 <LL_APB1_GRP1_EnableClock+0x2c>)
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	4313      	orrs	r3, r2
 8002546:	640b      	str	r3, [r1, #64]	; 0x40
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8002548:	4b05      	ldr	r3, [pc, #20]	; (8002560 <LL_APB1_GRP1_EnableClock+0x2c>)
 800254a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	4013      	ands	r3, r2
 8002550:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002552:	68fb      	ldr	r3, [r7, #12]
}
 8002554:	bf00      	nop
 8002556:	3714      	adds	r7, #20
 8002558:	46bd      	mov	sp, r7
 800255a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800255e:	4770      	bx	lr
 8002560:	40023800 	.word	0x40023800

08002564 <LL_APB2_GRP1_EnableClock>:
{
 8002564:	b480      	push	{r7}
 8002566:	b085      	sub	sp, #20
 8002568:	af00      	add	r7, sp, #0
 800256a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 800256c:	4b08      	ldr	r3, [pc, #32]	; (8002590 <LL_APB2_GRP1_EnableClock+0x2c>)
 800256e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002570:	4907      	ldr	r1, [pc, #28]	; (8002590 <LL_APB2_GRP1_EnableClock+0x2c>)
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	4313      	orrs	r3, r2
 8002576:	644b      	str	r3, [r1, #68]	; 0x44
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8002578:	4b05      	ldr	r3, [pc, #20]	; (8002590 <LL_APB2_GRP1_EnableClock+0x2c>)
 800257a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	4013      	ands	r3, r2
 8002580:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002582:	68fb      	ldr	r3, [r7, #12]
}
 8002584:	bf00      	nop
 8002586:	3714      	adds	r7, #20
 8002588:	46bd      	mov	sp, r7
 800258a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800258e:	4770      	bx	lr
 8002590:	40023800 	.word	0x40023800

08002594 <LL_TIM_DisableARRPreload>:
{
 8002594:	b480      	push	{r7}
 8002596:	b083      	sub	sp, #12
 8002598:	af00      	add	r7, sp, #0
 800259a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->CR1, TIM_CR1_ARPE);
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	601a      	str	r2, [r3, #0]
}
 80025a8:	bf00      	nop
 80025aa:	370c      	adds	r7, #12
 80025ac:	46bd      	mov	sp, r7
 80025ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b2:	4770      	bx	lr

080025b4 <LL_TIM_SetClockSource>:
{
 80025b4:	b480      	push	{r7}
 80025b6:	b083      	sub	sp, #12
 80025b8:	af00      	add	r7, sp, #0
 80025ba:	6078      	str	r0, [r7, #4]
 80025bc:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->SMCR, TIM_SMCR_SMS | TIM_SMCR_ECE, ClockSource);
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	689b      	ldr	r3, [r3, #8]
 80025c2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80025c6:	f023 0307 	bic.w	r3, r3, #7
 80025ca:	683a      	ldr	r2, [r7, #0]
 80025cc:	431a      	orrs	r2, r3
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	609a      	str	r2, [r3, #8]
}
 80025d2:	bf00      	nop
 80025d4:	370c      	adds	r7, #12
 80025d6:	46bd      	mov	sp, r7
 80025d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025dc:	4770      	bx	lr

080025de <LL_TIM_SetTriggerOutput>:
{
 80025de:	b480      	push	{r7}
 80025e0:	b083      	sub	sp, #12
 80025e2:	af00      	add	r7, sp, #0
 80025e4:	6078      	str	r0, [r7, #4]
 80025e6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	685b      	ldr	r3, [r3, #4]
 80025ec:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80025f0:	683b      	ldr	r3, [r7, #0]
 80025f2:	431a      	orrs	r2, r3
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	605a      	str	r2, [r3, #4]
}
 80025f8:	bf00      	nop
 80025fa:	370c      	adds	r7, #12
 80025fc:	46bd      	mov	sp, r7
 80025fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002602:	4770      	bx	lr

08002604 <LL_TIM_DisableMasterSlaveMode>:
{
 8002604:	b480      	push	{r7}
 8002606:	b083      	sub	sp, #12
 8002608:	af00      	add	r7, sp, #0
 800260a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->SMCR, TIM_SMCR_MSM);
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	689b      	ldr	r3, [r3, #8]
 8002610:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	609a      	str	r2, [r3, #8]
}
 8002618:	bf00      	nop
 800261a:	370c      	adds	r7, #12
 800261c:	46bd      	mov	sp, r7
 800261e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002622:	4770      	bx	lr

08002624 <MX_TIM1_Init>:
TIM_HandleTypeDef htim1;
TIM_HandleTypeDef htim7;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8002624:	b580      	push	{r7, lr}
 8002626:	b092      	sub	sp, #72	; 0x48
 8002628:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800262a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800262e:	2200      	movs	r2, #0
 8002630:	601a      	str	r2, [r3, #0]
 8002632:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002634:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002638:	2200      	movs	r2, #0
 800263a:	601a      	str	r2, [r3, #0]
 800263c:	605a      	str	r2, [r3, #4]
 800263e:	609a      	str	r2, [r3, #8]
 8002640:	60da      	str	r2, [r3, #12]
 8002642:	611a      	str	r2, [r3, #16]
 8002644:	615a      	str	r2, [r3, #20]
 8002646:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002648:	1d3b      	adds	r3, r7, #4
 800264a:	2220      	movs	r2, #32
 800264c:	2100      	movs	r1, #0
 800264e:	4618      	mov	r0, r3
 8002650:	f001 fee0 	bl	8004414 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8002654:	4b39      	ldr	r3, [pc, #228]	; (800273c <MX_TIM1_Init+0x118>)
 8002656:	4a3a      	ldr	r2, [pc, #232]	; (8002740 <MX_TIM1_Init+0x11c>)
 8002658:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 18-1;
 800265a:	4b38      	ldr	r3, [pc, #224]	; (800273c <MX_TIM1_Init+0x118>)
 800265c:	2211      	movs	r2, #17
 800265e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002660:	4b36      	ldr	r3, [pc, #216]	; (800273c <MX_TIM1_Init+0x118>)
 8002662:	2200      	movs	r2, #0
 8002664:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1000-1;
 8002666:	4b35      	ldr	r3, [pc, #212]	; (800273c <MX_TIM1_Init+0x118>)
 8002668:	f240 32e7 	movw	r2, #999	; 0x3e7
 800266c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800266e:	4b33      	ldr	r3, [pc, #204]	; (800273c <MX_TIM1_Init+0x118>)
 8002670:	2200      	movs	r2, #0
 8002672:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002674:	4b31      	ldr	r3, [pc, #196]	; (800273c <MX_TIM1_Init+0x118>)
 8002676:	2200      	movs	r2, #0
 8002678:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800267a:	4b30      	ldr	r3, [pc, #192]	; (800273c <MX_TIM1_Init+0x118>)
 800267c:	2200      	movs	r2, #0
 800267e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8002680:	482e      	ldr	r0, [pc, #184]	; (800273c <MX_TIM1_Init+0x118>)
 8002682:	f000 fd38 	bl	80030f6 <HAL_TIM_PWM_Init>
 8002686:	4603      	mov	r3, r0
 8002688:	2b00      	cmp	r3, #0
 800268a:	d001      	beq.n	8002690 <MX_TIM1_Init+0x6c>
  {
    Error_Handler();
 800268c:	f7ff f982 	bl	8001994 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002690:	2300      	movs	r3, #0
 8002692:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002694:	2300      	movs	r3, #0
 8002696:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002698:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800269c:	4619      	mov	r1, r3
 800269e:	4827      	ldr	r0, [pc, #156]	; (800273c <MX_TIM1_Init+0x118>)
 80026a0:	f001 f9c4 	bl	8003a2c <HAL_TIMEx_MasterConfigSynchronization>
 80026a4:	4603      	mov	r3, r0
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d001      	beq.n	80026ae <MX_TIM1_Init+0x8a>
  {
    Error_Handler();
 80026aa:	f7ff f973 	bl	8001994 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80026ae:	2360      	movs	r3, #96	; 0x60
 80026b0:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 80026b2:	2300      	movs	r3, #0
 80026b4:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80026b6:	2300      	movs	r3, #0
 80026b8:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80026ba:	2300      	movs	r3, #0
 80026bc:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80026be:	2300      	movs	r3, #0
 80026c0:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80026c2:	2300      	movs	r3, #0
 80026c4:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80026c6:	2300      	movs	r3, #0
 80026c8:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80026ca:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80026ce:	2200      	movs	r2, #0
 80026d0:	4619      	mov	r1, r3
 80026d2:	481a      	ldr	r0, [pc, #104]	; (800273c <MX_TIM1_Init+0x118>)
 80026d4:	f000 fe66 	bl	80033a4 <HAL_TIM_PWM_ConfigChannel>
 80026d8:	4603      	mov	r3, r0
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d001      	beq.n	80026e2 <MX_TIM1_Init+0xbe>
  {
    Error_Handler();
 80026de:	f7ff f959 	bl	8001994 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80026e2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80026e6:	2204      	movs	r2, #4
 80026e8:	4619      	mov	r1, r3
 80026ea:	4814      	ldr	r0, [pc, #80]	; (800273c <MX_TIM1_Init+0x118>)
 80026ec:	f000 fe5a 	bl	80033a4 <HAL_TIM_PWM_ConfigChannel>
 80026f0:	4603      	mov	r3, r0
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d001      	beq.n	80026fa <MX_TIM1_Init+0xd6>
  {
    Error_Handler();
 80026f6:	f7ff f94d 	bl	8001994 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80026fa:	2300      	movs	r3, #0
 80026fc:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80026fe:	2300      	movs	r3, #0
 8002700:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002702:	2300      	movs	r3, #0
 8002704:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8002706:	2300      	movs	r3, #0
 8002708:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800270a:	2300      	movs	r3, #0
 800270c:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800270e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002712:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_ENABLE;
 8002714:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002718:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800271a:	1d3b      	adds	r3, r7, #4
 800271c:	4619      	mov	r1, r3
 800271e:	4807      	ldr	r0, [pc, #28]	; (800273c <MX_TIM1_Init+0x118>)
 8002720:	f001 fa00 	bl	8003b24 <HAL_TIMEx_ConfigBreakDeadTime>
 8002724:	4603      	mov	r3, r0
 8002726:	2b00      	cmp	r3, #0
 8002728:	d001      	beq.n	800272e <MX_TIM1_Init+0x10a>
  {
    Error_Handler();
 800272a:	f7ff f933 	bl	8001994 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800272e:	4803      	ldr	r0, [pc, #12]	; (800273c <MX_TIM1_Init+0x118>)
 8002730:	f000 f922 	bl	8002978 <HAL_TIM_MspPostInit>

}
 8002734:	bf00      	nop
 8002736:	3748      	adds	r7, #72	; 0x48
 8002738:	46bd      	mov	sp, r7
 800273a:	bd80      	pop	{r7, pc}
 800273c:	20000198 	.word	0x20000198
 8002740:	40010000 	.word	0x40010000

08002744 <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8002744:	b580      	push	{r7, lr}
 8002746:	b086      	sub	sp, #24
 8002748:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 800274a:	1d3b      	adds	r3, r7, #4
 800274c:	2200      	movs	r2, #0
 800274e:	601a      	str	r2, [r3, #0]
 8002750:	605a      	str	r2, [r3, #4]
 8002752:	609a      	str	r2, [r3, #8]
 8002754:	60da      	str	r2, [r3, #12]
 8002756:	611a      	str	r2, [r3, #16]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM6);
 8002758:	2010      	movs	r0, #16
 800275a:	f7ff feeb 	bl	8002534 <LL_APB1_GRP1_EnableClock>

  /* TIM6 interrupt Init */
  NVIC_SetPriority(TIM6_DAC_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 800275e:	f7ff fe5f 	bl	8002420 <__NVIC_GetPriorityGrouping>
 8002762:	4603      	mov	r3, r0
 8002764:	2200      	movs	r2, #0
 8002766:	2100      	movs	r1, #0
 8002768:	4618      	mov	r0, r3
 800276a:	f7ff feaf 	bl	80024cc <NVIC_EncodePriority>
 800276e:	4603      	mov	r3, r0
 8002770:	4619      	mov	r1, r3
 8002772:	2036      	movs	r0, #54	; 0x36
 8002774:	f7ff fe80 	bl	8002478 <__NVIC_SetPriority>
  NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8002778:	2036      	movs	r0, #54	; 0x36
 800277a:	f7ff fe5f 	bl	800243c <__NVIC_EnableIRQ>

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  TIM_InitStruct.Prescaler = 90-LL_TIM_IC_FILTER_FDIV1_N2;
 800277e:	235a      	movs	r3, #90	; 0x5a
 8002780:	80bb      	strh	r3, [r7, #4]
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 8002782:	2300      	movs	r3, #0
 8002784:	60bb      	str	r3, [r7, #8]
  TIM_InitStruct.Autoreload = 1000-LL_TIM_IC_FILTER_FDIV1_N2;
 8002786:	4b0a      	ldr	r3, [pc, #40]	; (80027b0 <MX_TIM6_Init+0x6c>)
 8002788:	60fb      	str	r3, [r7, #12]
  LL_TIM_Init(TIM6, &TIM_InitStruct);
 800278a:	1d3b      	adds	r3, r7, #4
 800278c:	4619      	mov	r1, r3
 800278e:	4809      	ldr	r0, [pc, #36]	; (80027b4 <MX_TIM6_Init+0x70>)
 8002790:	f001 fcbc 	bl	800410c <LL_TIM_Init>
  LL_TIM_DisableARRPreload(TIM6);
 8002794:	4807      	ldr	r0, [pc, #28]	; (80027b4 <MX_TIM6_Init+0x70>)
 8002796:	f7ff fefd 	bl	8002594 <LL_TIM_DisableARRPreload>
  LL_TIM_SetTriggerOutput(TIM6, LL_TIM_TRGO_RESET);
 800279a:	2100      	movs	r1, #0
 800279c:	4805      	ldr	r0, [pc, #20]	; (80027b4 <MX_TIM6_Init+0x70>)
 800279e:	f7ff ff1e 	bl	80025de <LL_TIM_SetTriggerOutput>
  LL_TIM_DisableMasterSlaveMode(TIM6);
 80027a2:	4804      	ldr	r0, [pc, #16]	; (80027b4 <MX_TIM6_Init+0x70>)
 80027a4:	f7ff ff2e 	bl	8002604 <LL_TIM_DisableMasterSlaveMode>
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 80027a8:	bf00      	nop
 80027aa:	3718      	adds	r7, #24
 80027ac:	46bd      	mov	sp, r7
 80027ae:	bd80      	pop	{r7, pc}
 80027b0:	fff003e8 	.word	0xfff003e8
 80027b4:	40001000 	.word	0x40001000

080027b8 <MX_TIM7_Init>:
/* TIM7 init function */
void MX_TIM7_Init(void)
{
 80027b8:	b580      	push	{r7, lr}
 80027ba:	b082      	sub	sp, #8
 80027bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80027be:	463b      	mov	r3, r7
 80027c0:	2200      	movs	r2, #0
 80027c2:	601a      	str	r2, [r3, #0]
 80027c4:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 80027c6:	4b15      	ldr	r3, [pc, #84]	; (800281c <MX_TIM7_Init+0x64>)
 80027c8:	4a15      	ldr	r2, [pc, #84]	; (8002820 <MX_TIM7_Init+0x68>)
 80027ca:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 90-1;
 80027cc:	4b13      	ldr	r3, [pc, #76]	; (800281c <MX_TIM7_Init+0x64>)
 80027ce:	2259      	movs	r2, #89	; 0x59
 80027d0:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 80027d2:	4b12      	ldr	r3, [pc, #72]	; (800281c <MX_TIM7_Init+0x64>)
 80027d4:	2200      	movs	r2, #0
 80027d6:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 20000-1;
 80027d8:	4b10      	ldr	r3, [pc, #64]	; (800281c <MX_TIM7_Init+0x64>)
 80027da:	f644 621f 	movw	r2, #19999	; 0x4e1f
 80027de:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80027e0:	4b0e      	ldr	r3, [pc, #56]	; (800281c <MX_TIM7_Init+0x64>)
 80027e2:	2200      	movs	r2, #0
 80027e4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 80027e6:	480d      	ldr	r0, [pc, #52]	; (800281c <MX_TIM7_Init+0x64>)
 80027e8:	f000 fc36 	bl	8003058 <HAL_TIM_Base_Init>
 80027ec:	4603      	mov	r3, r0
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d001      	beq.n	80027f6 <MX_TIM7_Init+0x3e>
  {
    Error_Handler();
 80027f2:	f7ff f8cf 	bl	8001994 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80027f6:	2300      	movs	r3, #0
 80027f8:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80027fa:	2300      	movs	r3, #0
 80027fc:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 80027fe:	463b      	mov	r3, r7
 8002800:	4619      	mov	r1, r3
 8002802:	4806      	ldr	r0, [pc, #24]	; (800281c <MX_TIM7_Init+0x64>)
 8002804:	f001 f912 	bl	8003a2c <HAL_TIMEx_MasterConfigSynchronization>
 8002808:	4603      	mov	r3, r0
 800280a:	2b00      	cmp	r3, #0
 800280c:	d001      	beq.n	8002812 <MX_TIM7_Init+0x5a>
  {
    Error_Handler();
 800280e:	f7ff f8c1 	bl	8001994 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8002812:	bf00      	nop
 8002814:	3708      	adds	r7, #8
 8002816:	46bd      	mov	sp, r7
 8002818:	bd80      	pop	{r7, pc}
 800281a:	bf00      	nop
 800281c:	200001e0 	.word	0x200001e0
 8002820:	40001400 	.word	0x40001400

08002824 <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 8002824:	b580      	push	{r7, lr}
 8002826:	b086      	sub	sp, #24
 8002828:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 800282a:	1d3b      	adds	r3, r7, #4
 800282c:	2200      	movs	r2, #0
 800282e:	601a      	str	r2, [r3, #0]
 8002830:	605a      	str	r2, [r3, #4]
 8002832:	609a      	str	r2, [r3, #8]
 8002834:	60da      	str	r2, [r3, #12]
 8002836:	611a      	str	r2, [r3, #16]

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_TIM8);
 8002838:	2002      	movs	r0, #2
 800283a:	f7ff fe93 	bl	8002564 <LL_APB2_GRP1_EnableClock>

  /* TIM8 interrupt Init */
  NVIC_SetPriority(TIM8_UP_TIM13_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 800283e:	f7ff fdef 	bl	8002420 <__NVIC_GetPriorityGrouping>
 8002842:	4603      	mov	r3, r0
 8002844:	2200      	movs	r2, #0
 8002846:	2100      	movs	r1, #0
 8002848:	4618      	mov	r0, r3
 800284a:	f7ff fe3f 	bl	80024cc <NVIC_EncodePriority>
 800284e:	4603      	mov	r3, r0
 8002850:	4619      	mov	r1, r3
 8002852:	202c      	movs	r0, #44	; 0x2c
 8002854:	f7ff fe10 	bl	8002478 <__NVIC_SetPriority>
  NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 8002858:	202c      	movs	r0, #44	; 0x2c
 800285a:	f7ff fdef 	bl	800243c <__NVIC_EnableIRQ>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  TIM_InitStruct.Prescaler = 180-LL_TIM_IC_FILTER_FDIV1_N2;
 800285e:	23b4      	movs	r3, #180	; 0xb4
 8002860:	80bb      	strh	r3, [r7, #4]
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 8002862:	2300      	movs	r3, #0
 8002864:	60bb      	str	r3, [r7, #8]
  TIM_InitStruct.Autoreload = 1000-LL_TIM_IC_FILTER_FDIV1_N2;
 8002866:	4b0e      	ldr	r3, [pc, #56]	; (80028a0 <MX_TIM8_Init+0x7c>)
 8002868:	60fb      	str	r3, [r7, #12]
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 800286a:	2300      	movs	r3, #0
 800286c:	613b      	str	r3, [r7, #16]
  TIM_InitStruct.RepetitionCounter = 0;
 800286e:	2300      	movs	r3, #0
 8002870:	617b      	str	r3, [r7, #20]
  LL_TIM_Init(TIM8, &TIM_InitStruct);
 8002872:	1d3b      	adds	r3, r7, #4
 8002874:	4619      	mov	r1, r3
 8002876:	480b      	ldr	r0, [pc, #44]	; (80028a4 <MX_TIM8_Init+0x80>)
 8002878:	f001 fc48 	bl	800410c <LL_TIM_Init>
  LL_TIM_DisableARRPreload(TIM8);
 800287c:	4809      	ldr	r0, [pc, #36]	; (80028a4 <MX_TIM8_Init+0x80>)
 800287e:	f7ff fe89 	bl	8002594 <LL_TIM_DisableARRPreload>
  LL_TIM_SetClockSource(TIM8, LL_TIM_CLOCKSOURCE_INTERNAL);
 8002882:	2100      	movs	r1, #0
 8002884:	4807      	ldr	r0, [pc, #28]	; (80028a4 <MX_TIM8_Init+0x80>)
 8002886:	f7ff fe95 	bl	80025b4 <LL_TIM_SetClockSource>
  LL_TIM_SetTriggerOutput(TIM8, LL_TIM_TRGO_UPDATE);
 800288a:	2120      	movs	r1, #32
 800288c:	4805      	ldr	r0, [pc, #20]	; (80028a4 <MX_TIM8_Init+0x80>)
 800288e:	f7ff fea6 	bl	80025de <LL_TIM_SetTriggerOutput>
  LL_TIM_DisableMasterSlaveMode(TIM8);
 8002892:	4804      	ldr	r0, [pc, #16]	; (80028a4 <MX_TIM8_Init+0x80>)
 8002894:	f7ff feb6 	bl	8002604 <LL_TIM_DisableMasterSlaveMode>
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 8002898:	bf00      	nop
 800289a:	3718      	adds	r7, #24
 800289c:	46bd      	mov	sp, r7
 800289e:	bd80      	pop	{r7, pc}
 80028a0:	fff003e8 	.word	0xfff003e8
 80028a4:	40010400 	.word	0x40010400

080028a8 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 80028a8:	b580      	push	{r7, lr}
 80028aa:	b084      	sub	sp, #16
 80028ac:	af00      	add	r7, sp, #0
 80028ae:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM1)
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	4a1a      	ldr	r2, [pc, #104]	; (8002920 <HAL_TIM_PWM_MspInit+0x78>)
 80028b6:	4293      	cmp	r3, r2
 80028b8:	d12d      	bne.n	8002916 <HAL_TIM_PWM_MspInit+0x6e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80028ba:	2300      	movs	r3, #0
 80028bc:	60fb      	str	r3, [r7, #12]
 80028be:	4b19      	ldr	r3, [pc, #100]	; (8002924 <HAL_TIM_PWM_MspInit+0x7c>)
 80028c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028c2:	4a18      	ldr	r2, [pc, #96]	; (8002924 <HAL_TIM_PWM_MspInit+0x7c>)
 80028c4:	f043 0301 	orr.w	r3, r3, #1
 80028c8:	6453      	str	r3, [r2, #68]	; 0x44
 80028ca:	4b16      	ldr	r3, [pc, #88]	; (8002924 <HAL_TIM_PWM_MspInit+0x7c>)
 80028cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028ce:	f003 0301 	and.w	r3, r3, #1
 80028d2:	60fb      	str	r3, [r7, #12]
 80028d4:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 0, 0);
 80028d6:	2200      	movs	r2, #0
 80028d8:	2100      	movs	r1, #0
 80028da:	2018      	movs	r0, #24
 80028dc:	f000 f9f1 	bl	8002cc2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 80028e0:	2018      	movs	r0, #24
 80028e2:	f000 fa0a 	bl	8002cfa <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 80028e6:	2200      	movs	r2, #0
 80028e8:	2100      	movs	r1, #0
 80028ea:	2019      	movs	r0, #25
 80028ec:	f000 f9e9 	bl	8002cc2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 80028f0:	2019      	movs	r0, #25
 80028f2:	f000 fa02 	bl	8002cfa <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 80028f6:	2200      	movs	r2, #0
 80028f8:	2100      	movs	r1, #0
 80028fa:	201a      	movs	r0, #26
 80028fc:	f000 f9e1 	bl	8002cc2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8002900:	201a      	movs	r0, #26
 8002902:	f000 f9fa 	bl	8002cfa <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 8002906:	2200      	movs	r2, #0
 8002908:	2100      	movs	r1, #0
 800290a:	201b      	movs	r0, #27
 800290c:	f000 f9d9 	bl	8002cc2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8002910:	201b      	movs	r0, #27
 8002912:	f000 f9f2 	bl	8002cfa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8002916:	bf00      	nop
 8002918:	3710      	adds	r7, #16
 800291a:	46bd      	mov	sp, r7
 800291c:	bd80      	pop	{r7, pc}
 800291e:	bf00      	nop
 8002920:	40010000 	.word	0x40010000
 8002924:	40023800 	.word	0x40023800

08002928 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002928:	b580      	push	{r7, lr}
 800292a:	b084      	sub	sp, #16
 800292c:	af00      	add	r7, sp, #0
 800292e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM7)
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	4a0e      	ldr	r2, [pc, #56]	; (8002970 <HAL_TIM_Base_MspInit+0x48>)
 8002936:	4293      	cmp	r3, r2
 8002938:	d115      	bne.n	8002966 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM7_MspInit 0 */

  /* USER CODE END TIM7_MspInit 0 */
    /* TIM7 clock enable */
    __HAL_RCC_TIM7_CLK_ENABLE();
 800293a:	2300      	movs	r3, #0
 800293c:	60fb      	str	r3, [r7, #12]
 800293e:	4b0d      	ldr	r3, [pc, #52]	; (8002974 <HAL_TIM_Base_MspInit+0x4c>)
 8002940:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002942:	4a0c      	ldr	r2, [pc, #48]	; (8002974 <HAL_TIM_Base_MspInit+0x4c>)
 8002944:	f043 0320 	orr.w	r3, r3, #32
 8002948:	6413      	str	r3, [r2, #64]	; 0x40
 800294a:	4b0a      	ldr	r3, [pc, #40]	; (8002974 <HAL_TIM_Base_MspInit+0x4c>)
 800294c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800294e:	f003 0320 	and.w	r3, r3, #32
 8002952:	60fb      	str	r3, [r7, #12]
 8002954:	68fb      	ldr	r3, [r7, #12]

    /* TIM7 interrupt Init */
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8002956:	2200      	movs	r2, #0
 8002958:	2100      	movs	r1, #0
 800295a:	2037      	movs	r0, #55	; 0x37
 800295c:	f000 f9b1 	bl	8002cc2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8002960:	2037      	movs	r0, #55	; 0x37
 8002962:	f000 f9ca 	bl	8002cfa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }
}
 8002966:	bf00      	nop
 8002968:	3710      	adds	r7, #16
 800296a:	46bd      	mov	sp, r7
 800296c:	bd80      	pop	{r7, pc}
 800296e:	bf00      	nop
 8002970:	40001400 	.word	0x40001400
 8002974:	40023800 	.word	0x40023800

08002978 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8002978:	b580      	push	{r7, lr}
 800297a:	b088      	sub	sp, #32
 800297c:	af00      	add	r7, sp, #0
 800297e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002980:	f107 030c 	add.w	r3, r7, #12
 8002984:	2200      	movs	r2, #0
 8002986:	601a      	str	r2, [r3, #0]
 8002988:	605a      	str	r2, [r3, #4]
 800298a:	609a      	str	r2, [r3, #8]
 800298c:	60da      	str	r2, [r3, #12]
 800298e:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	4a12      	ldr	r2, [pc, #72]	; (80029e0 <HAL_TIM_MspPostInit+0x68>)
 8002996:	4293      	cmp	r3, r2
 8002998:	d11e      	bne.n	80029d8 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800299a:	2300      	movs	r3, #0
 800299c:	60bb      	str	r3, [r7, #8]
 800299e:	4b11      	ldr	r3, [pc, #68]	; (80029e4 <HAL_TIM_MspPostInit+0x6c>)
 80029a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029a2:	4a10      	ldr	r2, [pc, #64]	; (80029e4 <HAL_TIM_MspPostInit+0x6c>)
 80029a4:	f043 0301 	orr.w	r3, r3, #1
 80029a8:	6313      	str	r3, [r2, #48]	; 0x30
 80029aa:	4b0e      	ldr	r3, [pc, #56]	; (80029e4 <HAL_TIM_MspPostInit+0x6c>)
 80029ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029ae:	f003 0301 	and.w	r3, r3, #1
 80029b2:	60bb      	str	r3, [r7, #8]
 80029b4:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80029b6:	f44f 7340 	mov.w	r3, #768	; 0x300
 80029ba:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029bc:	2302      	movs	r3, #2
 80029be:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029c0:	2300      	movs	r3, #0
 80029c2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80029c4:	2300      	movs	r3, #0
 80029c6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80029c8:	2301      	movs	r3, #1
 80029ca:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80029cc:	f107 030c 	add.w	r3, r7, #12
 80029d0:	4619      	mov	r1, r3
 80029d2:	4805      	ldr	r0, [pc, #20]	; (80029e8 <HAL_TIM_MspPostInit+0x70>)
 80029d4:	f000 f9ac 	bl	8002d30 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80029d8:	bf00      	nop
 80029da:	3720      	adds	r7, #32
 80029dc:	46bd      	mov	sp, r7
 80029de:	bd80      	pop	{r7, pc}
 80029e0:	40010000 	.word	0x40010000
 80029e4:	40023800 	.word	0x40023800
 80029e8:	40020000 	.word	0x40020000

080029ec <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80029ec:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002a24 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80029f0:	480d      	ldr	r0, [pc, #52]	; (8002a28 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80029f2:	490e      	ldr	r1, [pc, #56]	; (8002a2c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80029f4:	4a0e      	ldr	r2, [pc, #56]	; (8002a30 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80029f6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80029f8:	e002      	b.n	8002a00 <LoopCopyDataInit>

080029fa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80029fa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80029fc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80029fe:	3304      	adds	r3, #4

08002a00 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002a00:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002a02:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002a04:	d3f9      	bcc.n	80029fa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002a06:	4a0b      	ldr	r2, [pc, #44]	; (8002a34 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002a08:	4c0b      	ldr	r4, [pc, #44]	; (8002a38 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002a0a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002a0c:	e001      	b.n	8002a12 <LoopFillZerobss>

08002a0e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002a0e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002a10:	3204      	adds	r2, #4

08002a12 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002a12:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002a14:	d3fb      	bcc.n	8002a0e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002a16:	f7ff fcf1 	bl	80023fc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002a1a:	f001 fd19 	bl	8004450 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002a1e:	f7fe fe9b 	bl	8001758 <main>
  bx  lr    
 8002a22:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002a24:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002a28:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002a2c:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8002a30:	080044cc 	.word	0x080044cc
  ldr r2, =_sbss
 8002a34:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8002a38:	20000374 	.word	0x20000374

08002a3c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002a3c:	e7fe      	b.n	8002a3c <ADC_IRQHandler>
	...

08002a40 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002a40:	b580      	push	{r7, lr}
 8002a42:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002a44:	4b0e      	ldr	r3, [pc, #56]	; (8002a80 <HAL_Init+0x40>)
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	4a0d      	ldr	r2, [pc, #52]	; (8002a80 <HAL_Init+0x40>)
 8002a4a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002a4e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002a50:	4b0b      	ldr	r3, [pc, #44]	; (8002a80 <HAL_Init+0x40>)
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	4a0a      	ldr	r2, [pc, #40]	; (8002a80 <HAL_Init+0x40>)
 8002a56:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002a5a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002a5c:	4b08      	ldr	r3, [pc, #32]	; (8002a80 <HAL_Init+0x40>)
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	4a07      	ldr	r2, [pc, #28]	; (8002a80 <HAL_Init+0x40>)
 8002a62:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a66:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002a68:	2003      	movs	r0, #3
 8002a6a:	f000 f91f 	bl	8002cac <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002a6e:	200f      	movs	r0, #15
 8002a70:	f000 f808 	bl	8002a84 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002a74:	f7fe ff94 	bl	80019a0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002a78:	2300      	movs	r3, #0
}
 8002a7a:	4618      	mov	r0, r3
 8002a7c:	bd80      	pop	{r7, pc}
 8002a7e:	bf00      	nop
 8002a80:	40023c00 	.word	0x40023c00

08002a84 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002a84:	b580      	push	{r7, lr}
 8002a86:	b082      	sub	sp, #8
 8002a88:	af00      	add	r7, sp, #0
 8002a8a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002a8c:	4b12      	ldr	r3, [pc, #72]	; (8002ad8 <HAL_InitTick+0x54>)
 8002a8e:	681a      	ldr	r2, [r3, #0]
 8002a90:	4b12      	ldr	r3, [pc, #72]	; (8002adc <HAL_InitTick+0x58>)
 8002a92:	781b      	ldrb	r3, [r3, #0]
 8002a94:	4619      	mov	r1, r3
 8002a96:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002a9a:	fbb3 f3f1 	udiv	r3, r3, r1
 8002a9e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002aa2:	4618      	mov	r0, r3
 8002aa4:	f000 f937 	bl	8002d16 <HAL_SYSTICK_Config>
 8002aa8:	4603      	mov	r3, r0
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d001      	beq.n	8002ab2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002aae:	2301      	movs	r3, #1
 8002ab0:	e00e      	b.n	8002ad0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	2b0f      	cmp	r3, #15
 8002ab6:	d80a      	bhi.n	8002ace <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002ab8:	2200      	movs	r2, #0
 8002aba:	6879      	ldr	r1, [r7, #4]
 8002abc:	f04f 30ff 	mov.w	r0, #4294967295
 8002ac0:	f000 f8ff 	bl	8002cc2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002ac4:	4a06      	ldr	r2, [pc, #24]	; (8002ae0 <HAL_InitTick+0x5c>)
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002aca:	2300      	movs	r3, #0
 8002acc:	e000      	b.n	8002ad0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002ace:	2301      	movs	r3, #1
}
 8002ad0:	4618      	mov	r0, r3
 8002ad2:	3708      	adds	r7, #8
 8002ad4:	46bd      	mov	sp, r7
 8002ad6:	bd80      	pop	{r7, pc}
 8002ad8:	20000000 	.word	0x20000000
 8002adc:	20000008 	.word	0x20000008
 8002ae0:	20000004 	.word	0x20000004

08002ae4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002ae4:	b480      	push	{r7}
 8002ae6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002ae8:	4b06      	ldr	r3, [pc, #24]	; (8002b04 <HAL_IncTick+0x20>)
 8002aea:	781b      	ldrb	r3, [r3, #0]
 8002aec:	461a      	mov	r2, r3
 8002aee:	4b06      	ldr	r3, [pc, #24]	; (8002b08 <HAL_IncTick+0x24>)
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	4413      	add	r3, r2
 8002af4:	4a04      	ldr	r2, [pc, #16]	; (8002b08 <HAL_IncTick+0x24>)
 8002af6:	6013      	str	r3, [r2, #0]
}
 8002af8:	bf00      	nop
 8002afa:	46bd      	mov	sp, r7
 8002afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b00:	4770      	bx	lr
 8002b02:	bf00      	nop
 8002b04:	20000008 	.word	0x20000008
 8002b08:	20000228 	.word	0x20000228

08002b0c <__NVIC_SetPriorityGrouping>:
{
 8002b0c:	b480      	push	{r7}
 8002b0e:	b085      	sub	sp, #20
 8002b10:	af00      	add	r7, sp, #0
 8002b12:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	f003 0307 	and.w	r3, r3, #7
 8002b1a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002b1c:	4b0c      	ldr	r3, [pc, #48]	; (8002b50 <__NVIC_SetPriorityGrouping+0x44>)
 8002b1e:	68db      	ldr	r3, [r3, #12]
 8002b20:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002b22:	68ba      	ldr	r2, [r7, #8]
 8002b24:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002b28:	4013      	ands	r3, r2
 8002b2a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002b30:	68bb      	ldr	r3, [r7, #8]
 8002b32:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002b34:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002b38:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002b3c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002b3e:	4a04      	ldr	r2, [pc, #16]	; (8002b50 <__NVIC_SetPriorityGrouping+0x44>)
 8002b40:	68bb      	ldr	r3, [r7, #8]
 8002b42:	60d3      	str	r3, [r2, #12]
}
 8002b44:	bf00      	nop
 8002b46:	3714      	adds	r7, #20
 8002b48:	46bd      	mov	sp, r7
 8002b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b4e:	4770      	bx	lr
 8002b50:	e000ed00 	.word	0xe000ed00

08002b54 <__NVIC_GetPriorityGrouping>:
{
 8002b54:	b480      	push	{r7}
 8002b56:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002b58:	4b04      	ldr	r3, [pc, #16]	; (8002b6c <__NVIC_GetPriorityGrouping+0x18>)
 8002b5a:	68db      	ldr	r3, [r3, #12]
 8002b5c:	0a1b      	lsrs	r3, r3, #8
 8002b5e:	f003 0307 	and.w	r3, r3, #7
}
 8002b62:	4618      	mov	r0, r3
 8002b64:	46bd      	mov	sp, r7
 8002b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b6a:	4770      	bx	lr
 8002b6c:	e000ed00 	.word	0xe000ed00

08002b70 <__NVIC_EnableIRQ>:
{
 8002b70:	b480      	push	{r7}
 8002b72:	b083      	sub	sp, #12
 8002b74:	af00      	add	r7, sp, #0
 8002b76:	4603      	mov	r3, r0
 8002b78:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002b7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	db0b      	blt.n	8002b9a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002b82:	79fb      	ldrb	r3, [r7, #7]
 8002b84:	f003 021f 	and.w	r2, r3, #31
 8002b88:	4907      	ldr	r1, [pc, #28]	; (8002ba8 <__NVIC_EnableIRQ+0x38>)
 8002b8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b8e:	095b      	lsrs	r3, r3, #5
 8002b90:	2001      	movs	r0, #1
 8002b92:	fa00 f202 	lsl.w	r2, r0, r2
 8002b96:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8002b9a:	bf00      	nop
 8002b9c:	370c      	adds	r7, #12
 8002b9e:	46bd      	mov	sp, r7
 8002ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba4:	4770      	bx	lr
 8002ba6:	bf00      	nop
 8002ba8:	e000e100 	.word	0xe000e100

08002bac <__NVIC_SetPriority>:
{
 8002bac:	b480      	push	{r7}
 8002bae:	b083      	sub	sp, #12
 8002bb0:	af00      	add	r7, sp, #0
 8002bb2:	4603      	mov	r3, r0
 8002bb4:	6039      	str	r1, [r7, #0]
 8002bb6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002bb8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	db0a      	blt.n	8002bd6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002bc0:	683b      	ldr	r3, [r7, #0]
 8002bc2:	b2da      	uxtb	r2, r3
 8002bc4:	490c      	ldr	r1, [pc, #48]	; (8002bf8 <__NVIC_SetPriority+0x4c>)
 8002bc6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002bca:	0112      	lsls	r2, r2, #4
 8002bcc:	b2d2      	uxtb	r2, r2
 8002bce:	440b      	add	r3, r1
 8002bd0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8002bd4:	e00a      	b.n	8002bec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002bd6:	683b      	ldr	r3, [r7, #0]
 8002bd8:	b2da      	uxtb	r2, r3
 8002bda:	4908      	ldr	r1, [pc, #32]	; (8002bfc <__NVIC_SetPriority+0x50>)
 8002bdc:	79fb      	ldrb	r3, [r7, #7]
 8002bde:	f003 030f 	and.w	r3, r3, #15
 8002be2:	3b04      	subs	r3, #4
 8002be4:	0112      	lsls	r2, r2, #4
 8002be6:	b2d2      	uxtb	r2, r2
 8002be8:	440b      	add	r3, r1
 8002bea:	761a      	strb	r2, [r3, #24]
}
 8002bec:	bf00      	nop
 8002bee:	370c      	adds	r7, #12
 8002bf0:	46bd      	mov	sp, r7
 8002bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf6:	4770      	bx	lr
 8002bf8:	e000e100 	.word	0xe000e100
 8002bfc:	e000ed00 	.word	0xe000ed00

08002c00 <NVIC_EncodePriority>:
{
 8002c00:	b480      	push	{r7}
 8002c02:	b089      	sub	sp, #36	; 0x24
 8002c04:	af00      	add	r7, sp, #0
 8002c06:	60f8      	str	r0, [r7, #12]
 8002c08:	60b9      	str	r1, [r7, #8]
 8002c0a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	f003 0307 	and.w	r3, r3, #7
 8002c12:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002c14:	69fb      	ldr	r3, [r7, #28]
 8002c16:	f1c3 0307 	rsb	r3, r3, #7
 8002c1a:	2b04      	cmp	r3, #4
 8002c1c:	bf28      	it	cs
 8002c1e:	2304      	movcs	r3, #4
 8002c20:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002c22:	69fb      	ldr	r3, [r7, #28]
 8002c24:	3304      	adds	r3, #4
 8002c26:	2b06      	cmp	r3, #6
 8002c28:	d902      	bls.n	8002c30 <NVIC_EncodePriority+0x30>
 8002c2a:	69fb      	ldr	r3, [r7, #28]
 8002c2c:	3b03      	subs	r3, #3
 8002c2e:	e000      	b.n	8002c32 <NVIC_EncodePriority+0x32>
 8002c30:	2300      	movs	r3, #0
 8002c32:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002c34:	f04f 32ff 	mov.w	r2, #4294967295
 8002c38:	69bb      	ldr	r3, [r7, #24]
 8002c3a:	fa02 f303 	lsl.w	r3, r2, r3
 8002c3e:	43da      	mvns	r2, r3
 8002c40:	68bb      	ldr	r3, [r7, #8]
 8002c42:	401a      	ands	r2, r3
 8002c44:	697b      	ldr	r3, [r7, #20]
 8002c46:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002c48:	f04f 31ff 	mov.w	r1, #4294967295
 8002c4c:	697b      	ldr	r3, [r7, #20]
 8002c4e:	fa01 f303 	lsl.w	r3, r1, r3
 8002c52:	43d9      	mvns	r1, r3
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002c58:	4313      	orrs	r3, r2
}
 8002c5a:	4618      	mov	r0, r3
 8002c5c:	3724      	adds	r7, #36	; 0x24
 8002c5e:	46bd      	mov	sp, r7
 8002c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c64:	4770      	bx	lr
	...

08002c68 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002c68:	b580      	push	{r7, lr}
 8002c6a:	b082      	sub	sp, #8
 8002c6c:	af00      	add	r7, sp, #0
 8002c6e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	3b01      	subs	r3, #1
 8002c74:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002c78:	d301      	bcc.n	8002c7e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002c7a:	2301      	movs	r3, #1
 8002c7c:	e00f      	b.n	8002c9e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002c7e:	4a0a      	ldr	r2, [pc, #40]	; (8002ca8 <SysTick_Config+0x40>)
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	3b01      	subs	r3, #1
 8002c84:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002c86:	210f      	movs	r1, #15
 8002c88:	f04f 30ff 	mov.w	r0, #4294967295
 8002c8c:	f7ff ff8e 	bl	8002bac <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002c90:	4b05      	ldr	r3, [pc, #20]	; (8002ca8 <SysTick_Config+0x40>)
 8002c92:	2200      	movs	r2, #0
 8002c94:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002c96:	4b04      	ldr	r3, [pc, #16]	; (8002ca8 <SysTick_Config+0x40>)
 8002c98:	2207      	movs	r2, #7
 8002c9a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002c9c:	2300      	movs	r3, #0
}
 8002c9e:	4618      	mov	r0, r3
 8002ca0:	3708      	adds	r7, #8
 8002ca2:	46bd      	mov	sp, r7
 8002ca4:	bd80      	pop	{r7, pc}
 8002ca6:	bf00      	nop
 8002ca8:	e000e010 	.word	0xe000e010

08002cac <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002cac:	b580      	push	{r7, lr}
 8002cae:	b082      	sub	sp, #8
 8002cb0:	af00      	add	r7, sp, #0
 8002cb2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002cb4:	6878      	ldr	r0, [r7, #4]
 8002cb6:	f7ff ff29 	bl	8002b0c <__NVIC_SetPriorityGrouping>
}
 8002cba:	bf00      	nop
 8002cbc:	3708      	adds	r7, #8
 8002cbe:	46bd      	mov	sp, r7
 8002cc0:	bd80      	pop	{r7, pc}

08002cc2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002cc2:	b580      	push	{r7, lr}
 8002cc4:	b086      	sub	sp, #24
 8002cc6:	af00      	add	r7, sp, #0
 8002cc8:	4603      	mov	r3, r0
 8002cca:	60b9      	str	r1, [r7, #8]
 8002ccc:	607a      	str	r2, [r7, #4]
 8002cce:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002cd0:	2300      	movs	r3, #0
 8002cd2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002cd4:	f7ff ff3e 	bl	8002b54 <__NVIC_GetPriorityGrouping>
 8002cd8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002cda:	687a      	ldr	r2, [r7, #4]
 8002cdc:	68b9      	ldr	r1, [r7, #8]
 8002cde:	6978      	ldr	r0, [r7, #20]
 8002ce0:	f7ff ff8e 	bl	8002c00 <NVIC_EncodePriority>
 8002ce4:	4602      	mov	r2, r0
 8002ce6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002cea:	4611      	mov	r1, r2
 8002cec:	4618      	mov	r0, r3
 8002cee:	f7ff ff5d 	bl	8002bac <__NVIC_SetPriority>
}
 8002cf2:	bf00      	nop
 8002cf4:	3718      	adds	r7, #24
 8002cf6:	46bd      	mov	sp, r7
 8002cf8:	bd80      	pop	{r7, pc}

08002cfa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002cfa:	b580      	push	{r7, lr}
 8002cfc:	b082      	sub	sp, #8
 8002cfe:	af00      	add	r7, sp, #0
 8002d00:	4603      	mov	r3, r0
 8002d02:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002d04:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d08:	4618      	mov	r0, r3
 8002d0a:	f7ff ff31 	bl	8002b70 <__NVIC_EnableIRQ>
}
 8002d0e:	bf00      	nop
 8002d10:	3708      	adds	r7, #8
 8002d12:	46bd      	mov	sp, r7
 8002d14:	bd80      	pop	{r7, pc}

08002d16 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002d16:	b580      	push	{r7, lr}
 8002d18:	b082      	sub	sp, #8
 8002d1a:	af00      	add	r7, sp, #0
 8002d1c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002d1e:	6878      	ldr	r0, [r7, #4]
 8002d20:	f7ff ffa2 	bl	8002c68 <SysTick_Config>
 8002d24:	4603      	mov	r3, r0
}
 8002d26:	4618      	mov	r0, r3
 8002d28:	3708      	adds	r7, #8
 8002d2a:	46bd      	mov	sp, r7
 8002d2c:	bd80      	pop	{r7, pc}
	...

08002d30 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002d30:	b480      	push	{r7}
 8002d32:	b089      	sub	sp, #36	; 0x24
 8002d34:	af00      	add	r7, sp, #0
 8002d36:	6078      	str	r0, [r7, #4]
 8002d38:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002d3a:	2300      	movs	r3, #0
 8002d3c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002d3e:	2300      	movs	r3, #0
 8002d40:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002d42:	2300      	movs	r3, #0
 8002d44:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002d46:	2300      	movs	r3, #0
 8002d48:	61fb      	str	r3, [r7, #28]
 8002d4a:	e165      	b.n	8003018 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002d4c:	2201      	movs	r2, #1
 8002d4e:	69fb      	ldr	r3, [r7, #28]
 8002d50:	fa02 f303 	lsl.w	r3, r2, r3
 8002d54:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002d56:	683b      	ldr	r3, [r7, #0]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	697a      	ldr	r2, [r7, #20]
 8002d5c:	4013      	ands	r3, r2
 8002d5e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002d60:	693a      	ldr	r2, [r7, #16]
 8002d62:	697b      	ldr	r3, [r7, #20]
 8002d64:	429a      	cmp	r2, r3
 8002d66:	f040 8154 	bne.w	8003012 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002d6a:	683b      	ldr	r3, [r7, #0]
 8002d6c:	685b      	ldr	r3, [r3, #4]
 8002d6e:	f003 0303 	and.w	r3, r3, #3
 8002d72:	2b01      	cmp	r3, #1
 8002d74:	d005      	beq.n	8002d82 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002d76:	683b      	ldr	r3, [r7, #0]
 8002d78:	685b      	ldr	r3, [r3, #4]
 8002d7a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002d7e:	2b02      	cmp	r3, #2
 8002d80:	d130      	bne.n	8002de4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	689b      	ldr	r3, [r3, #8]
 8002d86:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002d88:	69fb      	ldr	r3, [r7, #28]
 8002d8a:	005b      	lsls	r3, r3, #1
 8002d8c:	2203      	movs	r2, #3
 8002d8e:	fa02 f303 	lsl.w	r3, r2, r3
 8002d92:	43db      	mvns	r3, r3
 8002d94:	69ba      	ldr	r2, [r7, #24]
 8002d96:	4013      	ands	r3, r2
 8002d98:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002d9a:	683b      	ldr	r3, [r7, #0]
 8002d9c:	68da      	ldr	r2, [r3, #12]
 8002d9e:	69fb      	ldr	r3, [r7, #28]
 8002da0:	005b      	lsls	r3, r3, #1
 8002da2:	fa02 f303 	lsl.w	r3, r2, r3
 8002da6:	69ba      	ldr	r2, [r7, #24]
 8002da8:	4313      	orrs	r3, r2
 8002daa:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	69ba      	ldr	r2, [r7, #24]
 8002db0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	685b      	ldr	r3, [r3, #4]
 8002db6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002db8:	2201      	movs	r2, #1
 8002dba:	69fb      	ldr	r3, [r7, #28]
 8002dbc:	fa02 f303 	lsl.w	r3, r2, r3
 8002dc0:	43db      	mvns	r3, r3
 8002dc2:	69ba      	ldr	r2, [r7, #24]
 8002dc4:	4013      	ands	r3, r2
 8002dc6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002dc8:	683b      	ldr	r3, [r7, #0]
 8002dca:	685b      	ldr	r3, [r3, #4]
 8002dcc:	091b      	lsrs	r3, r3, #4
 8002dce:	f003 0201 	and.w	r2, r3, #1
 8002dd2:	69fb      	ldr	r3, [r7, #28]
 8002dd4:	fa02 f303 	lsl.w	r3, r2, r3
 8002dd8:	69ba      	ldr	r2, [r7, #24]
 8002dda:	4313      	orrs	r3, r2
 8002ddc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	69ba      	ldr	r2, [r7, #24]
 8002de2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002de4:	683b      	ldr	r3, [r7, #0]
 8002de6:	685b      	ldr	r3, [r3, #4]
 8002de8:	f003 0303 	and.w	r3, r3, #3
 8002dec:	2b03      	cmp	r3, #3
 8002dee:	d017      	beq.n	8002e20 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	68db      	ldr	r3, [r3, #12]
 8002df4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002df6:	69fb      	ldr	r3, [r7, #28]
 8002df8:	005b      	lsls	r3, r3, #1
 8002dfa:	2203      	movs	r2, #3
 8002dfc:	fa02 f303 	lsl.w	r3, r2, r3
 8002e00:	43db      	mvns	r3, r3
 8002e02:	69ba      	ldr	r2, [r7, #24]
 8002e04:	4013      	ands	r3, r2
 8002e06:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002e08:	683b      	ldr	r3, [r7, #0]
 8002e0a:	689a      	ldr	r2, [r3, #8]
 8002e0c:	69fb      	ldr	r3, [r7, #28]
 8002e0e:	005b      	lsls	r3, r3, #1
 8002e10:	fa02 f303 	lsl.w	r3, r2, r3
 8002e14:	69ba      	ldr	r2, [r7, #24]
 8002e16:	4313      	orrs	r3, r2
 8002e18:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	69ba      	ldr	r2, [r7, #24]
 8002e1e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002e20:	683b      	ldr	r3, [r7, #0]
 8002e22:	685b      	ldr	r3, [r3, #4]
 8002e24:	f003 0303 	and.w	r3, r3, #3
 8002e28:	2b02      	cmp	r3, #2
 8002e2a:	d123      	bne.n	8002e74 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002e2c:	69fb      	ldr	r3, [r7, #28]
 8002e2e:	08da      	lsrs	r2, r3, #3
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	3208      	adds	r2, #8
 8002e34:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002e38:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002e3a:	69fb      	ldr	r3, [r7, #28]
 8002e3c:	f003 0307 	and.w	r3, r3, #7
 8002e40:	009b      	lsls	r3, r3, #2
 8002e42:	220f      	movs	r2, #15
 8002e44:	fa02 f303 	lsl.w	r3, r2, r3
 8002e48:	43db      	mvns	r3, r3
 8002e4a:	69ba      	ldr	r2, [r7, #24]
 8002e4c:	4013      	ands	r3, r2
 8002e4e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002e50:	683b      	ldr	r3, [r7, #0]
 8002e52:	691a      	ldr	r2, [r3, #16]
 8002e54:	69fb      	ldr	r3, [r7, #28]
 8002e56:	f003 0307 	and.w	r3, r3, #7
 8002e5a:	009b      	lsls	r3, r3, #2
 8002e5c:	fa02 f303 	lsl.w	r3, r2, r3
 8002e60:	69ba      	ldr	r2, [r7, #24]
 8002e62:	4313      	orrs	r3, r2
 8002e64:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002e66:	69fb      	ldr	r3, [r7, #28]
 8002e68:	08da      	lsrs	r2, r3, #3
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	3208      	adds	r2, #8
 8002e6e:	69b9      	ldr	r1, [r7, #24]
 8002e70:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002e7a:	69fb      	ldr	r3, [r7, #28]
 8002e7c:	005b      	lsls	r3, r3, #1
 8002e7e:	2203      	movs	r2, #3
 8002e80:	fa02 f303 	lsl.w	r3, r2, r3
 8002e84:	43db      	mvns	r3, r3
 8002e86:	69ba      	ldr	r2, [r7, #24]
 8002e88:	4013      	ands	r3, r2
 8002e8a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002e8c:	683b      	ldr	r3, [r7, #0]
 8002e8e:	685b      	ldr	r3, [r3, #4]
 8002e90:	f003 0203 	and.w	r2, r3, #3
 8002e94:	69fb      	ldr	r3, [r7, #28]
 8002e96:	005b      	lsls	r3, r3, #1
 8002e98:	fa02 f303 	lsl.w	r3, r2, r3
 8002e9c:	69ba      	ldr	r2, [r7, #24]
 8002e9e:	4313      	orrs	r3, r2
 8002ea0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	69ba      	ldr	r2, [r7, #24]
 8002ea6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002ea8:	683b      	ldr	r3, [r7, #0]
 8002eaa:	685b      	ldr	r3, [r3, #4]
 8002eac:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	f000 80ae 	beq.w	8003012 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002eb6:	2300      	movs	r3, #0
 8002eb8:	60fb      	str	r3, [r7, #12]
 8002eba:	4b5d      	ldr	r3, [pc, #372]	; (8003030 <HAL_GPIO_Init+0x300>)
 8002ebc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ebe:	4a5c      	ldr	r2, [pc, #368]	; (8003030 <HAL_GPIO_Init+0x300>)
 8002ec0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002ec4:	6453      	str	r3, [r2, #68]	; 0x44
 8002ec6:	4b5a      	ldr	r3, [pc, #360]	; (8003030 <HAL_GPIO_Init+0x300>)
 8002ec8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002eca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002ece:	60fb      	str	r3, [r7, #12]
 8002ed0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002ed2:	4a58      	ldr	r2, [pc, #352]	; (8003034 <HAL_GPIO_Init+0x304>)
 8002ed4:	69fb      	ldr	r3, [r7, #28]
 8002ed6:	089b      	lsrs	r3, r3, #2
 8002ed8:	3302      	adds	r3, #2
 8002eda:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002ede:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002ee0:	69fb      	ldr	r3, [r7, #28]
 8002ee2:	f003 0303 	and.w	r3, r3, #3
 8002ee6:	009b      	lsls	r3, r3, #2
 8002ee8:	220f      	movs	r2, #15
 8002eea:	fa02 f303 	lsl.w	r3, r2, r3
 8002eee:	43db      	mvns	r3, r3
 8002ef0:	69ba      	ldr	r2, [r7, #24]
 8002ef2:	4013      	ands	r3, r2
 8002ef4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	4a4f      	ldr	r2, [pc, #316]	; (8003038 <HAL_GPIO_Init+0x308>)
 8002efa:	4293      	cmp	r3, r2
 8002efc:	d025      	beq.n	8002f4a <HAL_GPIO_Init+0x21a>
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	4a4e      	ldr	r2, [pc, #312]	; (800303c <HAL_GPIO_Init+0x30c>)
 8002f02:	4293      	cmp	r3, r2
 8002f04:	d01f      	beq.n	8002f46 <HAL_GPIO_Init+0x216>
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	4a4d      	ldr	r2, [pc, #308]	; (8003040 <HAL_GPIO_Init+0x310>)
 8002f0a:	4293      	cmp	r3, r2
 8002f0c:	d019      	beq.n	8002f42 <HAL_GPIO_Init+0x212>
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	4a4c      	ldr	r2, [pc, #304]	; (8003044 <HAL_GPIO_Init+0x314>)
 8002f12:	4293      	cmp	r3, r2
 8002f14:	d013      	beq.n	8002f3e <HAL_GPIO_Init+0x20e>
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	4a4b      	ldr	r2, [pc, #300]	; (8003048 <HAL_GPIO_Init+0x318>)
 8002f1a:	4293      	cmp	r3, r2
 8002f1c:	d00d      	beq.n	8002f3a <HAL_GPIO_Init+0x20a>
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	4a4a      	ldr	r2, [pc, #296]	; (800304c <HAL_GPIO_Init+0x31c>)
 8002f22:	4293      	cmp	r3, r2
 8002f24:	d007      	beq.n	8002f36 <HAL_GPIO_Init+0x206>
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	4a49      	ldr	r2, [pc, #292]	; (8003050 <HAL_GPIO_Init+0x320>)
 8002f2a:	4293      	cmp	r3, r2
 8002f2c:	d101      	bne.n	8002f32 <HAL_GPIO_Init+0x202>
 8002f2e:	2306      	movs	r3, #6
 8002f30:	e00c      	b.n	8002f4c <HAL_GPIO_Init+0x21c>
 8002f32:	2307      	movs	r3, #7
 8002f34:	e00a      	b.n	8002f4c <HAL_GPIO_Init+0x21c>
 8002f36:	2305      	movs	r3, #5
 8002f38:	e008      	b.n	8002f4c <HAL_GPIO_Init+0x21c>
 8002f3a:	2304      	movs	r3, #4
 8002f3c:	e006      	b.n	8002f4c <HAL_GPIO_Init+0x21c>
 8002f3e:	2303      	movs	r3, #3
 8002f40:	e004      	b.n	8002f4c <HAL_GPIO_Init+0x21c>
 8002f42:	2302      	movs	r3, #2
 8002f44:	e002      	b.n	8002f4c <HAL_GPIO_Init+0x21c>
 8002f46:	2301      	movs	r3, #1
 8002f48:	e000      	b.n	8002f4c <HAL_GPIO_Init+0x21c>
 8002f4a:	2300      	movs	r3, #0
 8002f4c:	69fa      	ldr	r2, [r7, #28]
 8002f4e:	f002 0203 	and.w	r2, r2, #3
 8002f52:	0092      	lsls	r2, r2, #2
 8002f54:	4093      	lsls	r3, r2
 8002f56:	69ba      	ldr	r2, [r7, #24]
 8002f58:	4313      	orrs	r3, r2
 8002f5a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002f5c:	4935      	ldr	r1, [pc, #212]	; (8003034 <HAL_GPIO_Init+0x304>)
 8002f5e:	69fb      	ldr	r3, [r7, #28]
 8002f60:	089b      	lsrs	r3, r3, #2
 8002f62:	3302      	adds	r3, #2
 8002f64:	69ba      	ldr	r2, [r7, #24]
 8002f66:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002f6a:	4b3a      	ldr	r3, [pc, #232]	; (8003054 <HAL_GPIO_Init+0x324>)
 8002f6c:	689b      	ldr	r3, [r3, #8]
 8002f6e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002f70:	693b      	ldr	r3, [r7, #16]
 8002f72:	43db      	mvns	r3, r3
 8002f74:	69ba      	ldr	r2, [r7, #24]
 8002f76:	4013      	ands	r3, r2
 8002f78:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002f7a:	683b      	ldr	r3, [r7, #0]
 8002f7c:	685b      	ldr	r3, [r3, #4]
 8002f7e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d003      	beq.n	8002f8e <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8002f86:	69ba      	ldr	r2, [r7, #24]
 8002f88:	693b      	ldr	r3, [r7, #16]
 8002f8a:	4313      	orrs	r3, r2
 8002f8c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002f8e:	4a31      	ldr	r2, [pc, #196]	; (8003054 <HAL_GPIO_Init+0x324>)
 8002f90:	69bb      	ldr	r3, [r7, #24]
 8002f92:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002f94:	4b2f      	ldr	r3, [pc, #188]	; (8003054 <HAL_GPIO_Init+0x324>)
 8002f96:	68db      	ldr	r3, [r3, #12]
 8002f98:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002f9a:	693b      	ldr	r3, [r7, #16]
 8002f9c:	43db      	mvns	r3, r3
 8002f9e:	69ba      	ldr	r2, [r7, #24]
 8002fa0:	4013      	ands	r3, r2
 8002fa2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002fa4:	683b      	ldr	r3, [r7, #0]
 8002fa6:	685b      	ldr	r3, [r3, #4]
 8002fa8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d003      	beq.n	8002fb8 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8002fb0:	69ba      	ldr	r2, [r7, #24]
 8002fb2:	693b      	ldr	r3, [r7, #16]
 8002fb4:	4313      	orrs	r3, r2
 8002fb6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002fb8:	4a26      	ldr	r2, [pc, #152]	; (8003054 <HAL_GPIO_Init+0x324>)
 8002fba:	69bb      	ldr	r3, [r7, #24]
 8002fbc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002fbe:	4b25      	ldr	r3, [pc, #148]	; (8003054 <HAL_GPIO_Init+0x324>)
 8002fc0:	685b      	ldr	r3, [r3, #4]
 8002fc2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002fc4:	693b      	ldr	r3, [r7, #16]
 8002fc6:	43db      	mvns	r3, r3
 8002fc8:	69ba      	ldr	r2, [r7, #24]
 8002fca:	4013      	ands	r3, r2
 8002fcc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002fce:	683b      	ldr	r3, [r7, #0]
 8002fd0:	685b      	ldr	r3, [r3, #4]
 8002fd2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d003      	beq.n	8002fe2 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8002fda:	69ba      	ldr	r2, [r7, #24]
 8002fdc:	693b      	ldr	r3, [r7, #16]
 8002fde:	4313      	orrs	r3, r2
 8002fe0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002fe2:	4a1c      	ldr	r2, [pc, #112]	; (8003054 <HAL_GPIO_Init+0x324>)
 8002fe4:	69bb      	ldr	r3, [r7, #24]
 8002fe6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002fe8:	4b1a      	ldr	r3, [pc, #104]	; (8003054 <HAL_GPIO_Init+0x324>)
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002fee:	693b      	ldr	r3, [r7, #16]
 8002ff0:	43db      	mvns	r3, r3
 8002ff2:	69ba      	ldr	r2, [r7, #24]
 8002ff4:	4013      	ands	r3, r2
 8002ff6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002ff8:	683b      	ldr	r3, [r7, #0]
 8002ffa:	685b      	ldr	r3, [r3, #4]
 8002ffc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003000:	2b00      	cmp	r3, #0
 8003002:	d003      	beq.n	800300c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8003004:	69ba      	ldr	r2, [r7, #24]
 8003006:	693b      	ldr	r3, [r7, #16]
 8003008:	4313      	orrs	r3, r2
 800300a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800300c:	4a11      	ldr	r2, [pc, #68]	; (8003054 <HAL_GPIO_Init+0x324>)
 800300e:	69bb      	ldr	r3, [r7, #24]
 8003010:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003012:	69fb      	ldr	r3, [r7, #28]
 8003014:	3301      	adds	r3, #1
 8003016:	61fb      	str	r3, [r7, #28]
 8003018:	69fb      	ldr	r3, [r7, #28]
 800301a:	2b0f      	cmp	r3, #15
 800301c:	f67f ae96 	bls.w	8002d4c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003020:	bf00      	nop
 8003022:	bf00      	nop
 8003024:	3724      	adds	r7, #36	; 0x24
 8003026:	46bd      	mov	sp, r7
 8003028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800302c:	4770      	bx	lr
 800302e:	bf00      	nop
 8003030:	40023800 	.word	0x40023800
 8003034:	40013800 	.word	0x40013800
 8003038:	40020000 	.word	0x40020000
 800303c:	40020400 	.word	0x40020400
 8003040:	40020800 	.word	0x40020800
 8003044:	40020c00 	.word	0x40020c00
 8003048:	40021000 	.word	0x40021000
 800304c:	40021400 	.word	0x40021400
 8003050:	40021800 	.word	0x40021800
 8003054:	40013c00 	.word	0x40013c00

08003058 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003058:	b580      	push	{r7, lr}
 800305a:	b082      	sub	sp, #8
 800305c:	af00      	add	r7, sp, #0
 800305e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	2b00      	cmp	r3, #0
 8003064:	d101      	bne.n	800306a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003066:	2301      	movs	r3, #1
 8003068:	e041      	b.n	80030ee <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003070:	b2db      	uxtb	r3, r3
 8003072:	2b00      	cmp	r3, #0
 8003074:	d106      	bne.n	8003084 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	2200      	movs	r2, #0
 800307a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800307e:	6878      	ldr	r0, [r7, #4]
 8003080:	f7ff fc52 	bl	8002928 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	2202      	movs	r2, #2
 8003088:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681a      	ldr	r2, [r3, #0]
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	3304      	adds	r3, #4
 8003094:	4619      	mov	r1, r3
 8003096:	4610      	mov	r0, r2
 8003098:	f000 fa78 	bl	800358c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	2201      	movs	r2, #1
 80030a0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	2201      	movs	r2, #1
 80030a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	2201      	movs	r2, #1
 80030b0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	2201      	movs	r2, #1
 80030b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	2201      	movs	r2, #1
 80030c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	2201      	movs	r2, #1
 80030c8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	2201      	movs	r2, #1
 80030d0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	2201      	movs	r2, #1
 80030d8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	2201      	movs	r2, #1
 80030e0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	2201      	movs	r2, #1
 80030e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80030ec:	2300      	movs	r3, #0
}
 80030ee:	4618      	mov	r0, r3
 80030f0:	3708      	adds	r7, #8
 80030f2:	46bd      	mov	sp, r7
 80030f4:	bd80      	pop	{r7, pc}

080030f6 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80030f6:	b580      	push	{r7, lr}
 80030f8:	b082      	sub	sp, #8
 80030fa:	af00      	add	r7, sp, #0
 80030fc:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	2b00      	cmp	r3, #0
 8003102:	d101      	bne.n	8003108 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003104:	2301      	movs	r3, #1
 8003106:	e041      	b.n	800318c <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800310e:	b2db      	uxtb	r3, r3
 8003110:	2b00      	cmp	r3, #0
 8003112:	d106      	bne.n	8003122 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	2200      	movs	r2, #0
 8003118:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800311c:	6878      	ldr	r0, [r7, #4]
 800311e:	f7ff fbc3 	bl	80028a8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	2202      	movs	r2, #2
 8003126:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681a      	ldr	r2, [r3, #0]
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	3304      	adds	r3, #4
 8003132:	4619      	mov	r1, r3
 8003134:	4610      	mov	r0, r2
 8003136:	f000 fa29 	bl	800358c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	2201      	movs	r2, #1
 800313e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	2201      	movs	r2, #1
 8003146:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	2201      	movs	r2, #1
 800314e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	2201      	movs	r2, #1
 8003156:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	2201      	movs	r2, #1
 800315e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	2201      	movs	r2, #1
 8003166:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	2201      	movs	r2, #1
 800316e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	2201      	movs	r2, #1
 8003176:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	2201      	movs	r2, #1
 800317e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	2201      	movs	r2, #1
 8003186:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800318a:	2300      	movs	r3, #0
}
 800318c:	4618      	mov	r0, r3
 800318e:	3708      	adds	r7, #8
 8003190:	46bd      	mov	sp, r7
 8003192:	bd80      	pop	{r7, pc}

08003194 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003194:	b580      	push	{r7, lr}
 8003196:	b082      	sub	sp, #8
 8003198:	af00      	add	r7, sp, #0
 800319a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	691b      	ldr	r3, [r3, #16]
 80031a2:	f003 0302 	and.w	r3, r3, #2
 80031a6:	2b02      	cmp	r3, #2
 80031a8:	d122      	bne.n	80031f0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	68db      	ldr	r3, [r3, #12]
 80031b0:	f003 0302 	and.w	r3, r3, #2
 80031b4:	2b02      	cmp	r3, #2
 80031b6:	d11b      	bne.n	80031f0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	f06f 0202 	mvn.w	r2, #2
 80031c0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	2201      	movs	r2, #1
 80031c6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	699b      	ldr	r3, [r3, #24]
 80031ce:	f003 0303 	and.w	r3, r3, #3
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d003      	beq.n	80031de <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80031d6:	6878      	ldr	r0, [r7, #4]
 80031d8:	f000 f9ba 	bl	8003550 <HAL_TIM_IC_CaptureCallback>
 80031dc:	e005      	b.n	80031ea <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80031de:	6878      	ldr	r0, [r7, #4]
 80031e0:	f000 f9ac 	bl	800353c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80031e4:	6878      	ldr	r0, [r7, #4]
 80031e6:	f000 f9bd 	bl	8003564 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	2200      	movs	r2, #0
 80031ee:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	691b      	ldr	r3, [r3, #16]
 80031f6:	f003 0304 	and.w	r3, r3, #4
 80031fa:	2b04      	cmp	r3, #4
 80031fc:	d122      	bne.n	8003244 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	68db      	ldr	r3, [r3, #12]
 8003204:	f003 0304 	and.w	r3, r3, #4
 8003208:	2b04      	cmp	r3, #4
 800320a:	d11b      	bne.n	8003244 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	f06f 0204 	mvn.w	r2, #4
 8003214:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	2202      	movs	r2, #2
 800321a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	699b      	ldr	r3, [r3, #24]
 8003222:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003226:	2b00      	cmp	r3, #0
 8003228:	d003      	beq.n	8003232 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800322a:	6878      	ldr	r0, [r7, #4]
 800322c:	f000 f990 	bl	8003550 <HAL_TIM_IC_CaptureCallback>
 8003230:	e005      	b.n	800323e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003232:	6878      	ldr	r0, [r7, #4]
 8003234:	f000 f982 	bl	800353c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003238:	6878      	ldr	r0, [r7, #4]
 800323a:	f000 f993 	bl	8003564 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	2200      	movs	r2, #0
 8003242:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	691b      	ldr	r3, [r3, #16]
 800324a:	f003 0308 	and.w	r3, r3, #8
 800324e:	2b08      	cmp	r3, #8
 8003250:	d122      	bne.n	8003298 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	68db      	ldr	r3, [r3, #12]
 8003258:	f003 0308 	and.w	r3, r3, #8
 800325c:	2b08      	cmp	r3, #8
 800325e:	d11b      	bne.n	8003298 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	f06f 0208 	mvn.w	r2, #8
 8003268:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	2204      	movs	r2, #4
 800326e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	69db      	ldr	r3, [r3, #28]
 8003276:	f003 0303 	and.w	r3, r3, #3
 800327a:	2b00      	cmp	r3, #0
 800327c:	d003      	beq.n	8003286 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800327e:	6878      	ldr	r0, [r7, #4]
 8003280:	f000 f966 	bl	8003550 <HAL_TIM_IC_CaptureCallback>
 8003284:	e005      	b.n	8003292 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003286:	6878      	ldr	r0, [r7, #4]
 8003288:	f000 f958 	bl	800353c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800328c:	6878      	ldr	r0, [r7, #4]
 800328e:	f000 f969 	bl	8003564 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	2200      	movs	r2, #0
 8003296:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	691b      	ldr	r3, [r3, #16]
 800329e:	f003 0310 	and.w	r3, r3, #16
 80032a2:	2b10      	cmp	r3, #16
 80032a4:	d122      	bne.n	80032ec <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	68db      	ldr	r3, [r3, #12]
 80032ac:	f003 0310 	and.w	r3, r3, #16
 80032b0:	2b10      	cmp	r3, #16
 80032b2:	d11b      	bne.n	80032ec <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	f06f 0210 	mvn.w	r2, #16
 80032bc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	2208      	movs	r2, #8
 80032c2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	69db      	ldr	r3, [r3, #28]
 80032ca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d003      	beq.n	80032da <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80032d2:	6878      	ldr	r0, [r7, #4]
 80032d4:	f000 f93c 	bl	8003550 <HAL_TIM_IC_CaptureCallback>
 80032d8:	e005      	b.n	80032e6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80032da:	6878      	ldr	r0, [r7, #4]
 80032dc:	f000 f92e 	bl	800353c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80032e0:	6878      	ldr	r0, [r7, #4]
 80032e2:	f000 f93f 	bl	8003564 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	2200      	movs	r2, #0
 80032ea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	691b      	ldr	r3, [r3, #16]
 80032f2:	f003 0301 	and.w	r3, r3, #1
 80032f6:	2b01      	cmp	r3, #1
 80032f8:	d10e      	bne.n	8003318 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	68db      	ldr	r3, [r3, #12]
 8003300:	f003 0301 	and.w	r3, r3, #1
 8003304:	2b01      	cmp	r3, #1
 8003306:	d107      	bne.n	8003318 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	f06f 0201 	mvn.w	r2, #1
 8003310:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003312:	6878      	ldr	r0, [r7, #4]
 8003314:	f000 f908 	bl	8003528 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	691b      	ldr	r3, [r3, #16]
 800331e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003322:	2b80      	cmp	r3, #128	; 0x80
 8003324:	d10e      	bne.n	8003344 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	68db      	ldr	r3, [r3, #12]
 800332c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003330:	2b80      	cmp	r3, #128	; 0x80
 8003332:	d107      	bne.n	8003344 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800333c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800333e:	6878      	ldr	r0, [r7, #4]
 8003340:	f000 fc4c 	bl	8003bdc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	691b      	ldr	r3, [r3, #16]
 800334a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800334e:	2b40      	cmp	r3, #64	; 0x40
 8003350:	d10e      	bne.n	8003370 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	68db      	ldr	r3, [r3, #12]
 8003358:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800335c:	2b40      	cmp	r3, #64	; 0x40
 800335e:	d107      	bne.n	8003370 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003368:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800336a:	6878      	ldr	r0, [r7, #4]
 800336c:	f000 f904 	bl	8003578 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	691b      	ldr	r3, [r3, #16]
 8003376:	f003 0320 	and.w	r3, r3, #32
 800337a:	2b20      	cmp	r3, #32
 800337c:	d10e      	bne.n	800339c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	68db      	ldr	r3, [r3, #12]
 8003384:	f003 0320 	and.w	r3, r3, #32
 8003388:	2b20      	cmp	r3, #32
 800338a:	d107      	bne.n	800339c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	f06f 0220 	mvn.w	r2, #32
 8003394:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003396:	6878      	ldr	r0, [r7, #4]
 8003398:	f000 fc16 	bl	8003bc8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800339c:	bf00      	nop
 800339e:	3708      	adds	r7, #8
 80033a0:	46bd      	mov	sp, r7
 80033a2:	bd80      	pop	{r7, pc}

080033a4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80033a4:	b580      	push	{r7, lr}
 80033a6:	b086      	sub	sp, #24
 80033a8:	af00      	add	r7, sp, #0
 80033aa:	60f8      	str	r0, [r7, #12]
 80033ac:	60b9      	str	r1, [r7, #8]
 80033ae:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80033b0:	2300      	movs	r3, #0
 80033b2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80033ba:	2b01      	cmp	r3, #1
 80033bc:	d101      	bne.n	80033c2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80033be:	2302      	movs	r3, #2
 80033c0:	e0ae      	b.n	8003520 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	2201      	movs	r2, #1
 80033c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	2b0c      	cmp	r3, #12
 80033ce:	f200 809f 	bhi.w	8003510 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80033d2:	a201      	add	r2, pc, #4	; (adr r2, 80033d8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80033d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80033d8:	0800340d 	.word	0x0800340d
 80033dc:	08003511 	.word	0x08003511
 80033e0:	08003511 	.word	0x08003511
 80033e4:	08003511 	.word	0x08003511
 80033e8:	0800344d 	.word	0x0800344d
 80033ec:	08003511 	.word	0x08003511
 80033f0:	08003511 	.word	0x08003511
 80033f4:	08003511 	.word	0x08003511
 80033f8:	0800348f 	.word	0x0800348f
 80033fc:	08003511 	.word	0x08003511
 8003400:	08003511 	.word	0x08003511
 8003404:	08003511 	.word	0x08003511
 8003408:	080034cf 	.word	0x080034cf
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	68b9      	ldr	r1, [r7, #8]
 8003412:	4618      	mov	r0, r3
 8003414:	f000 f95a 	bl	80036cc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	699a      	ldr	r2, [r3, #24]
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	f042 0208 	orr.w	r2, r2, #8
 8003426:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	699a      	ldr	r2, [r3, #24]
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	f022 0204 	bic.w	r2, r2, #4
 8003436:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	6999      	ldr	r1, [r3, #24]
 800343e:	68bb      	ldr	r3, [r7, #8]
 8003440:	691a      	ldr	r2, [r3, #16]
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	430a      	orrs	r2, r1
 8003448:	619a      	str	r2, [r3, #24]
      break;
 800344a:	e064      	b.n	8003516 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	68b9      	ldr	r1, [r7, #8]
 8003452:	4618      	mov	r0, r3
 8003454:	f000 f9aa 	bl	80037ac <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	699a      	ldr	r2, [r3, #24]
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003466:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	699a      	ldr	r2, [r3, #24]
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003476:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	6999      	ldr	r1, [r3, #24]
 800347e:	68bb      	ldr	r3, [r7, #8]
 8003480:	691b      	ldr	r3, [r3, #16]
 8003482:	021a      	lsls	r2, r3, #8
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	430a      	orrs	r2, r1
 800348a:	619a      	str	r2, [r3, #24]
      break;
 800348c:	e043      	b.n	8003516 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	68b9      	ldr	r1, [r7, #8]
 8003494:	4618      	mov	r0, r3
 8003496:	f000 f9ff 	bl	8003898 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	69da      	ldr	r2, [r3, #28]
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	f042 0208 	orr.w	r2, r2, #8
 80034a8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	69da      	ldr	r2, [r3, #28]
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	f022 0204 	bic.w	r2, r2, #4
 80034b8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	69d9      	ldr	r1, [r3, #28]
 80034c0:	68bb      	ldr	r3, [r7, #8]
 80034c2:	691a      	ldr	r2, [r3, #16]
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	430a      	orrs	r2, r1
 80034ca:	61da      	str	r2, [r3, #28]
      break;
 80034cc:	e023      	b.n	8003516 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	68b9      	ldr	r1, [r7, #8]
 80034d4:	4618      	mov	r0, r3
 80034d6:	f000 fa53 	bl	8003980 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	69da      	ldr	r2, [r3, #28]
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80034e8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	69da      	ldr	r2, [r3, #28]
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80034f8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	69d9      	ldr	r1, [r3, #28]
 8003500:	68bb      	ldr	r3, [r7, #8]
 8003502:	691b      	ldr	r3, [r3, #16]
 8003504:	021a      	lsls	r2, r3, #8
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	430a      	orrs	r2, r1
 800350c:	61da      	str	r2, [r3, #28]
      break;
 800350e:	e002      	b.n	8003516 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8003510:	2301      	movs	r3, #1
 8003512:	75fb      	strb	r3, [r7, #23]
      break;
 8003514:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	2200      	movs	r2, #0
 800351a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800351e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003520:	4618      	mov	r0, r3
 8003522:	3718      	adds	r7, #24
 8003524:	46bd      	mov	sp, r7
 8003526:	bd80      	pop	{r7, pc}

08003528 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003528:	b480      	push	{r7}
 800352a:	b083      	sub	sp, #12
 800352c:	af00      	add	r7, sp, #0
 800352e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8003530:	bf00      	nop
 8003532:	370c      	adds	r7, #12
 8003534:	46bd      	mov	sp, r7
 8003536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800353a:	4770      	bx	lr

0800353c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800353c:	b480      	push	{r7}
 800353e:	b083      	sub	sp, #12
 8003540:	af00      	add	r7, sp, #0
 8003542:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003544:	bf00      	nop
 8003546:	370c      	adds	r7, #12
 8003548:	46bd      	mov	sp, r7
 800354a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800354e:	4770      	bx	lr

08003550 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003550:	b480      	push	{r7}
 8003552:	b083      	sub	sp, #12
 8003554:	af00      	add	r7, sp, #0
 8003556:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003558:	bf00      	nop
 800355a:	370c      	adds	r7, #12
 800355c:	46bd      	mov	sp, r7
 800355e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003562:	4770      	bx	lr

08003564 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003564:	b480      	push	{r7}
 8003566:	b083      	sub	sp, #12
 8003568:	af00      	add	r7, sp, #0
 800356a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800356c:	bf00      	nop
 800356e:	370c      	adds	r7, #12
 8003570:	46bd      	mov	sp, r7
 8003572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003576:	4770      	bx	lr

08003578 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003578:	b480      	push	{r7}
 800357a:	b083      	sub	sp, #12
 800357c:	af00      	add	r7, sp, #0
 800357e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003580:	bf00      	nop
 8003582:	370c      	adds	r7, #12
 8003584:	46bd      	mov	sp, r7
 8003586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800358a:	4770      	bx	lr

0800358c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800358c:	b480      	push	{r7}
 800358e:	b085      	sub	sp, #20
 8003590:	af00      	add	r7, sp, #0
 8003592:	6078      	str	r0, [r7, #4]
 8003594:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	4a40      	ldr	r2, [pc, #256]	; (80036a0 <TIM_Base_SetConfig+0x114>)
 80035a0:	4293      	cmp	r3, r2
 80035a2:	d013      	beq.n	80035cc <TIM_Base_SetConfig+0x40>
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80035aa:	d00f      	beq.n	80035cc <TIM_Base_SetConfig+0x40>
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	4a3d      	ldr	r2, [pc, #244]	; (80036a4 <TIM_Base_SetConfig+0x118>)
 80035b0:	4293      	cmp	r3, r2
 80035b2:	d00b      	beq.n	80035cc <TIM_Base_SetConfig+0x40>
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	4a3c      	ldr	r2, [pc, #240]	; (80036a8 <TIM_Base_SetConfig+0x11c>)
 80035b8:	4293      	cmp	r3, r2
 80035ba:	d007      	beq.n	80035cc <TIM_Base_SetConfig+0x40>
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	4a3b      	ldr	r2, [pc, #236]	; (80036ac <TIM_Base_SetConfig+0x120>)
 80035c0:	4293      	cmp	r3, r2
 80035c2:	d003      	beq.n	80035cc <TIM_Base_SetConfig+0x40>
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	4a3a      	ldr	r2, [pc, #232]	; (80036b0 <TIM_Base_SetConfig+0x124>)
 80035c8:	4293      	cmp	r3, r2
 80035ca:	d108      	bne.n	80035de <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80035d2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80035d4:	683b      	ldr	r3, [r7, #0]
 80035d6:	685b      	ldr	r3, [r3, #4]
 80035d8:	68fa      	ldr	r2, [r7, #12]
 80035da:	4313      	orrs	r3, r2
 80035dc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	4a2f      	ldr	r2, [pc, #188]	; (80036a0 <TIM_Base_SetConfig+0x114>)
 80035e2:	4293      	cmp	r3, r2
 80035e4:	d02b      	beq.n	800363e <TIM_Base_SetConfig+0xb2>
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80035ec:	d027      	beq.n	800363e <TIM_Base_SetConfig+0xb2>
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	4a2c      	ldr	r2, [pc, #176]	; (80036a4 <TIM_Base_SetConfig+0x118>)
 80035f2:	4293      	cmp	r3, r2
 80035f4:	d023      	beq.n	800363e <TIM_Base_SetConfig+0xb2>
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	4a2b      	ldr	r2, [pc, #172]	; (80036a8 <TIM_Base_SetConfig+0x11c>)
 80035fa:	4293      	cmp	r3, r2
 80035fc:	d01f      	beq.n	800363e <TIM_Base_SetConfig+0xb2>
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	4a2a      	ldr	r2, [pc, #168]	; (80036ac <TIM_Base_SetConfig+0x120>)
 8003602:	4293      	cmp	r3, r2
 8003604:	d01b      	beq.n	800363e <TIM_Base_SetConfig+0xb2>
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	4a29      	ldr	r2, [pc, #164]	; (80036b0 <TIM_Base_SetConfig+0x124>)
 800360a:	4293      	cmp	r3, r2
 800360c:	d017      	beq.n	800363e <TIM_Base_SetConfig+0xb2>
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	4a28      	ldr	r2, [pc, #160]	; (80036b4 <TIM_Base_SetConfig+0x128>)
 8003612:	4293      	cmp	r3, r2
 8003614:	d013      	beq.n	800363e <TIM_Base_SetConfig+0xb2>
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	4a27      	ldr	r2, [pc, #156]	; (80036b8 <TIM_Base_SetConfig+0x12c>)
 800361a:	4293      	cmp	r3, r2
 800361c:	d00f      	beq.n	800363e <TIM_Base_SetConfig+0xb2>
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	4a26      	ldr	r2, [pc, #152]	; (80036bc <TIM_Base_SetConfig+0x130>)
 8003622:	4293      	cmp	r3, r2
 8003624:	d00b      	beq.n	800363e <TIM_Base_SetConfig+0xb2>
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	4a25      	ldr	r2, [pc, #148]	; (80036c0 <TIM_Base_SetConfig+0x134>)
 800362a:	4293      	cmp	r3, r2
 800362c:	d007      	beq.n	800363e <TIM_Base_SetConfig+0xb2>
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	4a24      	ldr	r2, [pc, #144]	; (80036c4 <TIM_Base_SetConfig+0x138>)
 8003632:	4293      	cmp	r3, r2
 8003634:	d003      	beq.n	800363e <TIM_Base_SetConfig+0xb2>
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	4a23      	ldr	r2, [pc, #140]	; (80036c8 <TIM_Base_SetConfig+0x13c>)
 800363a:	4293      	cmp	r3, r2
 800363c:	d108      	bne.n	8003650 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003644:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003646:	683b      	ldr	r3, [r7, #0]
 8003648:	68db      	ldr	r3, [r3, #12]
 800364a:	68fa      	ldr	r2, [r7, #12]
 800364c:	4313      	orrs	r3, r2
 800364e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003656:	683b      	ldr	r3, [r7, #0]
 8003658:	695b      	ldr	r3, [r3, #20]
 800365a:	4313      	orrs	r3, r2
 800365c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	68fa      	ldr	r2, [r7, #12]
 8003662:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003664:	683b      	ldr	r3, [r7, #0]
 8003666:	689a      	ldr	r2, [r3, #8]
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800366c:	683b      	ldr	r3, [r7, #0]
 800366e:	681a      	ldr	r2, [r3, #0]
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	4a0a      	ldr	r2, [pc, #40]	; (80036a0 <TIM_Base_SetConfig+0x114>)
 8003678:	4293      	cmp	r3, r2
 800367a:	d003      	beq.n	8003684 <TIM_Base_SetConfig+0xf8>
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	4a0c      	ldr	r2, [pc, #48]	; (80036b0 <TIM_Base_SetConfig+0x124>)
 8003680:	4293      	cmp	r3, r2
 8003682:	d103      	bne.n	800368c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003684:	683b      	ldr	r3, [r7, #0]
 8003686:	691a      	ldr	r2, [r3, #16]
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	2201      	movs	r2, #1
 8003690:	615a      	str	r2, [r3, #20]
}
 8003692:	bf00      	nop
 8003694:	3714      	adds	r7, #20
 8003696:	46bd      	mov	sp, r7
 8003698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800369c:	4770      	bx	lr
 800369e:	bf00      	nop
 80036a0:	40010000 	.word	0x40010000
 80036a4:	40000400 	.word	0x40000400
 80036a8:	40000800 	.word	0x40000800
 80036ac:	40000c00 	.word	0x40000c00
 80036b0:	40010400 	.word	0x40010400
 80036b4:	40014000 	.word	0x40014000
 80036b8:	40014400 	.word	0x40014400
 80036bc:	40014800 	.word	0x40014800
 80036c0:	40001800 	.word	0x40001800
 80036c4:	40001c00 	.word	0x40001c00
 80036c8:	40002000 	.word	0x40002000

080036cc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80036cc:	b480      	push	{r7}
 80036ce:	b087      	sub	sp, #28
 80036d0:	af00      	add	r7, sp, #0
 80036d2:	6078      	str	r0, [r7, #4]
 80036d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	6a1b      	ldr	r3, [r3, #32]
 80036da:	f023 0201 	bic.w	r2, r3, #1
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	6a1b      	ldr	r3, [r3, #32]
 80036e6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	685b      	ldr	r3, [r3, #4]
 80036ec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	699b      	ldr	r3, [r3, #24]
 80036f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80036fa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	f023 0303 	bic.w	r3, r3, #3
 8003702:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003704:	683b      	ldr	r3, [r7, #0]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	68fa      	ldr	r2, [r7, #12]
 800370a:	4313      	orrs	r3, r2
 800370c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800370e:	697b      	ldr	r3, [r7, #20]
 8003710:	f023 0302 	bic.w	r3, r3, #2
 8003714:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003716:	683b      	ldr	r3, [r7, #0]
 8003718:	689b      	ldr	r3, [r3, #8]
 800371a:	697a      	ldr	r2, [r7, #20]
 800371c:	4313      	orrs	r3, r2
 800371e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	4a20      	ldr	r2, [pc, #128]	; (80037a4 <TIM_OC1_SetConfig+0xd8>)
 8003724:	4293      	cmp	r3, r2
 8003726:	d003      	beq.n	8003730 <TIM_OC1_SetConfig+0x64>
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	4a1f      	ldr	r2, [pc, #124]	; (80037a8 <TIM_OC1_SetConfig+0xdc>)
 800372c:	4293      	cmp	r3, r2
 800372e:	d10c      	bne.n	800374a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003730:	697b      	ldr	r3, [r7, #20]
 8003732:	f023 0308 	bic.w	r3, r3, #8
 8003736:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003738:	683b      	ldr	r3, [r7, #0]
 800373a:	68db      	ldr	r3, [r3, #12]
 800373c:	697a      	ldr	r2, [r7, #20]
 800373e:	4313      	orrs	r3, r2
 8003740:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003742:	697b      	ldr	r3, [r7, #20]
 8003744:	f023 0304 	bic.w	r3, r3, #4
 8003748:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	4a15      	ldr	r2, [pc, #84]	; (80037a4 <TIM_OC1_SetConfig+0xd8>)
 800374e:	4293      	cmp	r3, r2
 8003750:	d003      	beq.n	800375a <TIM_OC1_SetConfig+0x8e>
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	4a14      	ldr	r2, [pc, #80]	; (80037a8 <TIM_OC1_SetConfig+0xdc>)
 8003756:	4293      	cmp	r3, r2
 8003758:	d111      	bne.n	800377e <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800375a:	693b      	ldr	r3, [r7, #16]
 800375c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003760:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003762:	693b      	ldr	r3, [r7, #16]
 8003764:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003768:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800376a:	683b      	ldr	r3, [r7, #0]
 800376c:	695b      	ldr	r3, [r3, #20]
 800376e:	693a      	ldr	r2, [r7, #16]
 8003770:	4313      	orrs	r3, r2
 8003772:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003774:	683b      	ldr	r3, [r7, #0]
 8003776:	699b      	ldr	r3, [r3, #24]
 8003778:	693a      	ldr	r2, [r7, #16]
 800377a:	4313      	orrs	r3, r2
 800377c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	693a      	ldr	r2, [r7, #16]
 8003782:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	68fa      	ldr	r2, [r7, #12]
 8003788:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800378a:	683b      	ldr	r3, [r7, #0]
 800378c:	685a      	ldr	r2, [r3, #4]
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	697a      	ldr	r2, [r7, #20]
 8003796:	621a      	str	r2, [r3, #32]
}
 8003798:	bf00      	nop
 800379a:	371c      	adds	r7, #28
 800379c:	46bd      	mov	sp, r7
 800379e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037a2:	4770      	bx	lr
 80037a4:	40010000 	.word	0x40010000
 80037a8:	40010400 	.word	0x40010400

080037ac <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80037ac:	b480      	push	{r7}
 80037ae:	b087      	sub	sp, #28
 80037b0:	af00      	add	r7, sp, #0
 80037b2:	6078      	str	r0, [r7, #4]
 80037b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	6a1b      	ldr	r3, [r3, #32]
 80037ba:	f023 0210 	bic.w	r2, r3, #16
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	6a1b      	ldr	r3, [r3, #32]
 80037c6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	685b      	ldr	r3, [r3, #4]
 80037cc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	699b      	ldr	r3, [r3, #24]
 80037d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80037da:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80037e2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80037e4:	683b      	ldr	r3, [r7, #0]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	021b      	lsls	r3, r3, #8
 80037ea:	68fa      	ldr	r2, [r7, #12]
 80037ec:	4313      	orrs	r3, r2
 80037ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80037f0:	697b      	ldr	r3, [r7, #20]
 80037f2:	f023 0320 	bic.w	r3, r3, #32
 80037f6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80037f8:	683b      	ldr	r3, [r7, #0]
 80037fa:	689b      	ldr	r3, [r3, #8]
 80037fc:	011b      	lsls	r3, r3, #4
 80037fe:	697a      	ldr	r2, [r7, #20]
 8003800:	4313      	orrs	r3, r2
 8003802:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	4a22      	ldr	r2, [pc, #136]	; (8003890 <TIM_OC2_SetConfig+0xe4>)
 8003808:	4293      	cmp	r3, r2
 800380a:	d003      	beq.n	8003814 <TIM_OC2_SetConfig+0x68>
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	4a21      	ldr	r2, [pc, #132]	; (8003894 <TIM_OC2_SetConfig+0xe8>)
 8003810:	4293      	cmp	r3, r2
 8003812:	d10d      	bne.n	8003830 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003814:	697b      	ldr	r3, [r7, #20]
 8003816:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800381a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800381c:	683b      	ldr	r3, [r7, #0]
 800381e:	68db      	ldr	r3, [r3, #12]
 8003820:	011b      	lsls	r3, r3, #4
 8003822:	697a      	ldr	r2, [r7, #20]
 8003824:	4313      	orrs	r3, r2
 8003826:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003828:	697b      	ldr	r3, [r7, #20]
 800382a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800382e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	4a17      	ldr	r2, [pc, #92]	; (8003890 <TIM_OC2_SetConfig+0xe4>)
 8003834:	4293      	cmp	r3, r2
 8003836:	d003      	beq.n	8003840 <TIM_OC2_SetConfig+0x94>
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	4a16      	ldr	r2, [pc, #88]	; (8003894 <TIM_OC2_SetConfig+0xe8>)
 800383c:	4293      	cmp	r3, r2
 800383e:	d113      	bne.n	8003868 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003840:	693b      	ldr	r3, [r7, #16]
 8003842:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003846:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003848:	693b      	ldr	r3, [r7, #16]
 800384a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800384e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003850:	683b      	ldr	r3, [r7, #0]
 8003852:	695b      	ldr	r3, [r3, #20]
 8003854:	009b      	lsls	r3, r3, #2
 8003856:	693a      	ldr	r2, [r7, #16]
 8003858:	4313      	orrs	r3, r2
 800385a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800385c:	683b      	ldr	r3, [r7, #0]
 800385e:	699b      	ldr	r3, [r3, #24]
 8003860:	009b      	lsls	r3, r3, #2
 8003862:	693a      	ldr	r2, [r7, #16]
 8003864:	4313      	orrs	r3, r2
 8003866:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	693a      	ldr	r2, [r7, #16]
 800386c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	68fa      	ldr	r2, [r7, #12]
 8003872:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003874:	683b      	ldr	r3, [r7, #0]
 8003876:	685a      	ldr	r2, [r3, #4]
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	697a      	ldr	r2, [r7, #20]
 8003880:	621a      	str	r2, [r3, #32]
}
 8003882:	bf00      	nop
 8003884:	371c      	adds	r7, #28
 8003886:	46bd      	mov	sp, r7
 8003888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800388c:	4770      	bx	lr
 800388e:	bf00      	nop
 8003890:	40010000 	.word	0x40010000
 8003894:	40010400 	.word	0x40010400

08003898 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003898:	b480      	push	{r7}
 800389a:	b087      	sub	sp, #28
 800389c:	af00      	add	r7, sp, #0
 800389e:	6078      	str	r0, [r7, #4]
 80038a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	6a1b      	ldr	r3, [r3, #32]
 80038a6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	6a1b      	ldr	r3, [r3, #32]
 80038b2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	685b      	ldr	r3, [r3, #4]
 80038b8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	69db      	ldr	r3, [r3, #28]
 80038be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80038c6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	f023 0303 	bic.w	r3, r3, #3
 80038ce:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80038d0:	683b      	ldr	r3, [r7, #0]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	68fa      	ldr	r2, [r7, #12]
 80038d6:	4313      	orrs	r3, r2
 80038d8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80038da:	697b      	ldr	r3, [r7, #20]
 80038dc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80038e0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80038e2:	683b      	ldr	r3, [r7, #0]
 80038e4:	689b      	ldr	r3, [r3, #8]
 80038e6:	021b      	lsls	r3, r3, #8
 80038e8:	697a      	ldr	r2, [r7, #20]
 80038ea:	4313      	orrs	r3, r2
 80038ec:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	4a21      	ldr	r2, [pc, #132]	; (8003978 <TIM_OC3_SetConfig+0xe0>)
 80038f2:	4293      	cmp	r3, r2
 80038f4:	d003      	beq.n	80038fe <TIM_OC3_SetConfig+0x66>
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	4a20      	ldr	r2, [pc, #128]	; (800397c <TIM_OC3_SetConfig+0xe4>)
 80038fa:	4293      	cmp	r3, r2
 80038fc:	d10d      	bne.n	800391a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80038fe:	697b      	ldr	r3, [r7, #20]
 8003900:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003904:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003906:	683b      	ldr	r3, [r7, #0]
 8003908:	68db      	ldr	r3, [r3, #12]
 800390a:	021b      	lsls	r3, r3, #8
 800390c:	697a      	ldr	r2, [r7, #20]
 800390e:	4313      	orrs	r3, r2
 8003910:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003912:	697b      	ldr	r3, [r7, #20]
 8003914:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003918:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	4a16      	ldr	r2, [pc, #88]	; (8003978 <TIM_OC3_SetConfig+0xe0>)
 800391e:	4293      	cmp	r3, r2
 8003920:	d003      	beq.n	800392a <TIM_OC3_SetConfig+0x92>
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	4a15      	ldr	r2, [pc, #84]	; (800397c <TIM_OC3_SetConfig+0xe4>)
 8003926:	4293      	cmp	r3, r2
 8003928:	d113      	bne.n	8003952 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800392a:	693b      	ldr	r3, [r7, #16]
 800392c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003930:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003932:	693b      	ldr	r3, [r7, #16]
 8003934:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003938:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800393a:	683b      	ldr	r3, [r7, #0]
 800393c:	695b      	ldr	r3, [r3, #20]
 800393e:	011b      	lsls	r3, r3, #4
 8003940:	693a      	ldr	r2, [r7, #16]
 8003942:	4313      	orrs	r3, r2
 8003944:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003946:	683b      	ldr	r3, [r7, #0]
 8003948:	699b      	ldr	r3, [r3, #24]
 800394a:	011b      	lsls	r3, r3, #4
 800394c:	693a      	ldr	r2, [r7, #16]
 800394e:	4313      	orrs	r3, r2
 8003950:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	693a      	ldr	r2, [r7, #16]
 8003956:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	68fa      	ldr	r2, [r7, #12]
 800395c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800395e:	683b      	ldr	r3, [r7, #0]
 8003960:	685a      	ldr	r2, [r3, #4]
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	697a      	ldr	r2, [r7, #20]
 800396a:	621a      	str	r2, [r3, #32]
}
 800396c:	bf00      	nop
 800396e:	371c      	adds	r7, #28
 8003970:	46bd      	mov	sp, r7
 8003972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003976:	4770      	bx	lr
 8003978:	40010000 	.word	0x40010000
 800397c:	40010400 	.word	0x40010400

08003980 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003980:	b480      	push	{r7}
 8003982:	b087      	sub	sp, #28
 8003984:	af00      	add	r7, sp, #0
 8003986:	6078      	str	r0, [r7, #4]
 8003988:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	6a1b      	ldr	r3, [r3, #32]
 800398e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	6a1b      	ldr	r3, [r3, #32]
 800399a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	685b      	ldr	r3, [r3, #4]
 80039a0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	69db      	ldr	r3, [r3, #28]
 80039a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80039ae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80039b6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80039b8:	683b      	ldr	r3, [r7, #0]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	021b      	lsls	r3, r3, #8
 80039be:	68fa      	ldr	r2, [r7, #12]
 80039c0:	4313      	orrs	r3, r2
 80039c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80039c4:	693b      	ldr	r3, [r7, #16]
 80039c6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80039ca:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80039cc:	683b      	ldr	r3, [r7, #0]
 80039ce:	689b      	ldr	r3, [r3, #8]
 80039d0:	031b      	lsls	r3, r3, #12
 80039d2:	693a      	ldr	r2, [r7, #16]
 80039d4:	4313      	orrs	r3, r2
 80039d6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	4a12      	ldr	r2, [pc, #72]	; (8003a24 <TIM_OC4_SetConfig+0xa4>)
 80039dc:	4293      	cmp	r3, r2
 80039de:	d003      	beq.n	80039e8 <TIM_OC4_SetConfig+0x68>
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	4a11      	ldr	r2, [pc, #68]	; (8003a28 <TIM_OC4_SetConfig+0xa8>)
 80039e4:	4293      	cmp	r3, r2
 80039e6:	d109      	bne.n	80039fc <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80039e8:	697b      	ldr	r3, [r7, #20]
 80039ea:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80039ee:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80039f0:	683b      	ldr	r3, [r7, #0]
 80039f2:	695b      	ldr	r3, [r3, #20]
 80039f4:	019b      	lsls	r3, r3, #6
 80039f6:	697a      	ldr	r2, [r7, #20]
 80039f8:	4313      	orrs	r3, r2
 80039fa:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	697a      	ldr	r2, [r7, #20]
 8003a00:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	68fa      	ldr	r2, [r7, #12]
 8003a06:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003a08:	683b      	ldr	r3, [r7, #0]
 8003a0a:	685a      	ldr	r2, [r3, #4]
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	693a      	ldr	r2, [r7, #16]
 8003a14:	621a      	str	r2, [r3, #32]
}
 8003a16:	bf00      	nop
 8003a18:	371c      	adds	r7, #28
 8003a1a:	46bd      	mov	sp, r7
 8003a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a20:	4770      	bx	lr
 8003a22:	bf00      	nop
 8003a24:	40010000 	.word	0x40010000
 8003a28:	40010400 	.word	0x40010400

08003a2c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003a2c:	b480      	push	{r7}
 8003a2e:	b085      	sub	sp, #20
 8003a30:	af00      	add	r7, sp, #0
 8003a32:	6078      	str	r0, [r7, #4]
 8003a34:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003a3c:	2b01      	cmp	r3, #1
 8003a3e:	d101      	bne.n	8003a44 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003a40:	2302      	movs	r3, #2
 8003a42:	e05a      	b.n	8003afa <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	2201      	movs	r2, #1
 8003a48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	2202      	movs	r2, #2
 8003a50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	685b      	ldr	r3, [r3, #4]
 8003a5a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	689b      	ldr	r3, [r3, #8]
 8003a62:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003a6a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003a6c:	683b      	ldr	r3, [r7, #0]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	68fa      	ldr	r2, [r7, #12]
 8003a72:	4313      	orrs	r3, r2
 8003a74:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	68fa      	ldr	r2, [r7, #12]
 8003a7c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	4a21      	ldr	r2, [pc, #132]	; (8003b08 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8003a84:	4293      	cmp	r3, r2
 8003a86:	d022      	beq.n	8003ace <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003a90:	d01d      	beq.n	8003ace <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	4a1d      	ldr	r2, [pc, #116]	; (8003b0c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8003a98:	4293      	cmp	r3, r2
 8003a9a:	d018      	beq.n	8003ace <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	4a1b      	ldr	r2, [pc, #108]	; (8003b10 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8003aa2:	4293      	cmp	r3, r2
 8003aa4:	d013      	beq.n	8003ace <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	4a1a      	ldr	r2, [pc, #104]	; (8003b14 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8003aac:	4293      	cmp	r3, r2
 8003aae:	d00e      	beq.n	8003ace <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	4a18      	ldr	r2, [pc, #96]	; (8003b18 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8003ab6:	4293      	cmp	r3, r2
 8003ab8:	d009      	beq.n	8003ace <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	4a17      	ldr	r2, [pc, #92]	; (8003b1c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8003ac0:	4293      	cmp	r3, r2
 8003ac2:	d004      	beq.n	8003ace <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	4a15      	ldr	r2, [pc, #84]	; (8003b20 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8003aca:	4293      	cmp	r3, r2
 8003acc:	d10c      	bne.n	8003ae8 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003ace:	68bb      	ldr	r3, [r7, #8]
 8003ad0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003ad4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003ad6:	683b      	ldr	r3, [r7, #0]
 8003ad8:	685b      	ldr	r3, [r3, #4]
 8003ada:	68ba      	ldr	r2, [r7, #8]
 8003adc:	4313      	orrs	r3, r2
 8003ade:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	68ba      	ldr	r2, [r7, #8]
 8003ae6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	2201      	movs	r2, #1
 8003aec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	2200      	movs	r2, #0
 8003af4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003af8:	2300      	movs	r3, #0
}
 8003afa:	4618      	mov	r0, r3
 8003afc:	3714      	adds	r7, #20
 8003afe:	46bd      	mov	sp, r7
 8003b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b04:	4770      	bx	lr
 8003b06:	bf00      	nop
 8003b08:	40010000 	.word	0x40010000
 8003b0c:	40000400 	.word	0x40000400
 8003b10:	40000800 	.word	0x40000800
 8003b14:	40000c00 	.word	0x40000c00
 8003b18:	40010400 	.word	0x40010400
 8003b1c:	40014000 	.word	0x40014000
 8003b20:	40001800 	.word	0x40001800

08003b24 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8003b24:	b480      	push	{r7}
 8003b26:	b085      	sub	sp, #20
 8003b28:	af00      	add	r7, sp, #0
 8003b2a:	6078      	str	r0, [r7, #4]
 8003b2c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8003b2e:	2300      	movs	r3, #0
 8003b30:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003b38:	2b01      	cmp	r3, #1
 8003b3a:	d101      	bne.n	8003b40 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8003b3c:	2302      	movs	r3, #2
 8003b3e:	e03d      	b.n	8003bbc <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	2201      	movs	r2, #1
 8003b44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8003b4e:	683b      	ldr	r3, [r7, #0]
 8003b50:	68db      	ldr	r3, [r3, #12]
 8003b52:	4313      	orrs	r3, r2
 8003b54:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003b5c:	683b      	ldr	r3, [r7, #0]
 8003b5e:	689b      	ldr	r3, [r3, #8]
 8003b60:	4313      	orrs	r3, r2
 8003b62:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8003b6a:	683b      	ldr	r3, [r7, #0]
 8003b6c:	685b      	ldr	r3, [r3, #4]
 8003b6e:	4313      	orrs	r3, r2
 8003b70:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8003b78:	683b      	ldr	r3, [r7, #0]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	4313      	orrs	r3, r2
 8003b7e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003b86:	683b      	ldr	r3, [r7, #0]
 8003b88:	691b      	ldr	r3, [r3, #16]
 8003b8a:	4313      	orrs	r3, r2
 8003b8c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8003b94:	683b      	ldr	r3, [r7, #0]
 8003b96:	695b      	ldr	r3, [r3, #20]
 8003b98:	4313      	orrs	r3, r2
 8003b9a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8003ba2:	683b      	ldr	r3, [r7, #0]
 8003ba4:	69db      	ldr	r3, [r3, #28]
 8003ba6:	4313      	orrs	r3, r2
 8003ba8:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	68fa      	ldr	r2, [r7, #12]
 8003bb0:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	2200      	movs	r2, #0
 8003bb6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003bba:	2300      	movs	r3, #0
}
 8003bbc:	4618      	mov	r0, r3
 8003bbe:	3714      	adds	r7, #20
 8003bc0:	46bd      	mov	sp, r7
 8003bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bc6:	4770      	bx	lr

08003bc8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003bc8:	b480      	push	{r7}
 8003bca:	b083      	sub	sp, #12
 8003bcc:	af00      	add	r7, sp, #0
 8003bce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003bd0:	bf00      	nop
 8003bd2:	370c      	adds	r7, #12
 8003bd4:	46bd      	mov	sp, r7
 8003bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bda:	4770      	bx	lr

08003bdc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003bdc:	b480      	push	{r7}
 8003bde:	b083      	sub	sp, #12
 8003be0:	af00      	add	r7, sp, #0
 8003be2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003be4:	bf00      	nop
 8003be6:	370c      	adds	r7, #12
 8003be8:	46bd      	mov	sp, r7
 8003bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bee:	4770      	bx	lr

08003bf0 <LL_ADC_REG_SetSequencerLength>:
{
 8003bf0:	b480      	push	{r7}
 8003bf2:	b083      	sub	sp, #12
 8003bf4:	af00      	add	r7, sp, #0
 8003bf6:	6078      	str	r0, [r7, #4]
 8003bf8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SQR1, ADC_SQR1_L, SequencerNbRanks);
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bfe:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8003c02:	683b      	ldr	r3, [r7, #0]
 8003c04:	431a      	orrs	r2, r3
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8003c0a:	bf00      	nop
 8003c0c:	370c      	adds	r7, #12
 8003c0e:	46bd      	mov	sp, r7
 8003c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c14:	4770      	bx	lr

08003c16 <LL_ADC_IsEnabled>:
{
 8003c16:	b480      	push	{r7}
 8003c18:	b083      	sub	sp, #12
 8003c1a:	af00      	add	r7, sp, #0
 8003c1c:	6078      	str	r0, [r7, #4]
  return (READ_BIT(ADCx->CR2, ADC_CR2_ADON) == (ADC_CR2_ADON));
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	689b      	ldr	r3, [r3, #8]
 8003c22:	f003 0301 	and.w	r3, r3, #1
 8003c26:	2b01      	cmp	r3, #1
 8003c28:	bf0c      	ite	eq
 8003c2a:	2301      	moveq	r3, #1
 8003c2c:	2300      	movne	r3, #0
 8003c2e:	b2db      	uxtb	r3, r3
}
 8003c30:	4618      	mov	r0, r3
 8003c32:	370c      	adds	r7, #12
 8003c34:	46bd      	mov	sp, r7
 8003c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c3a:	4770      	bx	lr

08003c3c <LL_ADC_CommonInit>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: ADC common registers are initialized
  *          - ERROR: ADC common registers are not initialized
  */
ErrorStatus LL_ADC_CommonInit(ADC_Common_TypeDef *ADCxy_COMMON, LL_ADC_CommonInitTypeDef *ADC_CommonInitStruct)
{
 8003c3c:	b590      	push	{r4, r7, lr}
 8003c3e:	b085      	sub	sp, #20
 8003c40:	af00      	add	r7, sp, #0
 8003c42:	6078      	str	r0, [r7, #4]
 8003c44:	6039      	str	r1, [r7, #0]
  ErrorStatus status = SUCCESS;
 8003c46:	2300      	movs	r3, #0
 8003c48:	73fb      	strb	r3, [r7, #15]
  /* Note: Hardware constraint (refer to description of functions             */
  /*       "LL_ADC_SetCommonXXX()" and "LL_ADC_SetMultiXXX()"):               */
  /*       On this STM32 series, setting of these features is conditioned to  */
  /*       ADC state:                                                         */
  /*       All ADC instances of the ADC common group must be disabled.        */
  if(__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(ADCxy_COMMON) == 0UL)
 8003c4a:	481c      	ldr	r0, [pc, #112]	; (8003cbc <LL_ADC_CommonInit+0x80>)
 8003c4c:	f7ff ffe3 	bl	8003c16 <LL_ADC_IsEnabled>
 8003c50:	4604      	mov	r4, r0
 8003c52:	481b      	ldr	r0, [pc, #108]	; (8003cc0 <LL_ADC_CommonInit+0x84>)
 8003c54:	f7ff ffdf 	bl	8003c16 <LL_ADC_IsEnabled>
 8003c58:	4603      	mov	r3, r0
 8003c5a:	431c      	orrs	r4, r3
 8003c5c:	4819      	ldr	r0, [pc, #100]	; (8003cc4 <LL_ADC_CommonInit+0x88>)
 8003c5e:	f7ff ffda 	bl	8003c16 <LL_ADC_IsEnabled>
 8003c62:	4603      	mov	r3, r0
 8003c64:	4323      	orrs	r3, r4
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d120      	bne.n	8003cac <LL_ADC_CommonInit+0x70>
    /*    selected device)                                                    */
    /*    - Set ADC multimode configuration                                   */
    /*    - Set ADC multimode DMA transfer                                    */
    /*    - Set ADC multimode: delay between 2 sampling phases                */
#if defined(ADC_MULTIMODE_SUPPORT)
    if(ADC_CommonInitStruct->Multimode != LL_ADC_MULTI_INDEPENDENT)
 8003c6a:	683b      	ldr	r3, [r7, #0]
 8003c6c:	685b      	ldr	r3, [r3, #4]
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d012      	beq.n	8003c98 <LL_ADC_CommonInit+0x5c>
    {
      MODIFY_REG(ADCxy_COMMON->CCR,
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	685a      	ldr	r2, [r3, #4]
 8003c76:	4b14      	ldr	r3, [pc, #80]	; (8003cc8 <LL_ADC_CommonInit+0x8c>)
 8003c78:	4013      	ands	r3, r2
 8003c7a:	683a      	ldr	r2, [r7, #0]
 8003c7c:	6811      	ldr	r1, [r2, #0]
 8003c7e:	683a      	ldr	r2, [r7, #0]
 8003c80:	6852      	ldr	r2, [r2, #4]
 8003c82:	4311      	orrs	r1, r2
 8003c84:	683a      	ldr	r2, [r7, #0]
 8003c86:	6892      	ldr	r2, [r2, #8]
 8003c88:	4311      	orrs	r1, r2
 8003c8a:	683a      	ldr	r2, [r7, #0]
 8003c8c:	68d2      	ldr	r2, [r2, #12]
 8003c8e:	430a      	orrs	r2, r1
 8003c90:	431a      	orrs	r2, r3
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	605a      	str	r2, [r3, #4]
 8003c96:	e00b      	b.n	8003cb0 <LL_ADC_CommonInit+0x74>
                 | ADC_CommonInitStruct->MultiTwoSamplingDelay
                );
    }
    else
    {
      MODIFY_REG(ADCxy_COMMON->CCR,
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	685a      	ldr	r2, [r3, #4]
 8003c9c:	4b0a      	ldr	r3, [pc, #40]	; (8003cc8 <LL_ADC_CommonInit+0x8c>)
 8003c9e:	4013      	ands	r3, r2
 8003ca0:	683a      	ldr	r2, [r7, #0]
 8003ca2:	6812      	ldr	r2, [r2, #0]
 8003ca4:	431a      	orrs	r2, r3
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	605a      	str	r2, [r3, #4]
 8003caa:	e001      	b.n	8003cb0 <LL_ADC_CommonInit+0x74>
  }
  else
  {
    /* Initialization error: One or several ADC instances belonging to        */
    /* the same ADC common instance are not disabled.                         */
    status = ERROR;
 8003cac:	2301      	movs	r3, #1
 8003cae:	73fb      	strb	r3, [r7, #15]
  }
  
  return status;
 8003cb0:	7bfb      	ldrb	r3, [r7, #15]
}
 8003cb2:	4618      	mov	r0, r3
 8003cb4:	3714      	adds	r7, #20
 8003cb6:	46bd      	mov	sp, r7
 8003cb8:	bd90      	pop	{r4, r7, pc}
 8003cba:	bf00      	nop
 8003cbc:	40012000 	.word	0x40012000
 8003cc0:	40012100 	.word	0x40012100
 8003cc4:	40012200 	.word	0x40012200
 8003cc8:	fffc10e0 	.word	0xfffc10e0

08003ccc <LL_ADC_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: ADC registers are initialized
  *          - ERROR: ADC registers are not initialized
  */
ErrorStatus LL_ADC_Init(ADC_TypeDef *ADCx, LL_ADC_InitTypeDef *ADC_InitStruct)
{
 8003ccc:	b580      	push	{r7, lr}
 8003cce:	b084      	sub	sp, #16
 8003cd0:	af00      	add	r7, sp, #0
 8003cd2:	6078      	str	r0, [r7, #4]
 8003cd4:	6039      	str	r1, [r7, #0]
  ErrorStatus status = SUCCESS;
 8003cd6:	2300      	movs	r3, #0
 8003cd8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_LL_ADC_DATA_ALIGN(ADC_InitStruct->DataAlignment));
  assert_param(IS_LL_ADC_SCAN_SELECTION(ADC_InitStruct->SequencersScanMode));
  
  /* Note: Hardware constraint (refer to description of this function):       */
  /*       ADC instance must be disabled.                                     */
  if(LL_ADC_IsEnabled(ADCx) == 0UL)
 8003cda:	6878      	ldr	r0, [r7, #4]
 8003cdc:	f7ff ff9b 	bl	8003c16 <LL_ADC_IsEnabled>
 8003ce0:	4603      	mov	r3, r0
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d117      	bne.n	8003d16 <LL_ADC_Init+0x4a>
  {
    /* Configuration of ADC hierarchical scope:                               */
    /*  - ADC instance                                                        */
    /*    - Set ADC data resolution                                           */
    /*    - Set ADC conversion data alignment                                 */
    MODIFY_REG(ADCx->CR1,
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	685b      	ldr	r3, [r3, #4]
 8003cea:	f023 7340 	bic.w	r3, r3, #50331648	; 0x3000000
 8003cee:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003cf2:	683a      	ldr	r2, [r7, #0]
 8003cf4:	6811      	ldr	r1, [r2, #0]
 8003cf6:	683a      	ldr	r2, [r7, #0]
 8003cf8:	6892      	ldr	r2, [r2, #8]
 8003cfa:	430a      	orrs	r2, r1
 8003cfc:	431a      	orrs	r2, r3
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	605a      	str	r2, [r3, #4]
              ,
                 ADC_InitStruct->Resolution
               | ADC_InitStruct->SequencersScanMode
              );
    
    MODIFY_REG(ADCx->CR2,
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	689b      	ldr	r3, [r3, #8]
 8003d06:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8003d0a:	683b      	ldr	r3, [r7, #0]
 8003d0c:	685b      	ldr	r3, [r3, #4]
 8003d0e:	431a      	orrs	r2, r3
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	609a      	str	r2, [r3, #8]
 8003d14:	e001      	b.n	8003d1a <LL_ADC_Init+0x4e>

  }
  else
  {
    /* Initialization error: ADC instance is not disabled. */
    status = ERROR;
 8003d16:	2301      	movs	r3, #1
 8003d18:	73fb      	strb	r3, [r7, #15]
  }
  return status;
 8003d1a:	7bfb      	ldrb	r3, [r7, #15]
}
 8003d1c:	4618      	mov	r0, r3
 8003d1e:	3710      	adds	r7, #16
 8003d20:	46bd      	mov	sp, r7
 8003d22:	bd80      	pop	{r7, pc}

08003d24 <LL_ADC_REG_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: ADC registers are initialized
  *          - ERROR: ADC registers are not initialized
  */
ErrorStatus LL_ADC_REG_Init(ADC_TypeDef *ADCx, LL_ADC_REG_InitTypeDef *ADC_REG_InitStruct)
{
 8003d24:	b580      	push	{r7, lr}
 8003d26:	b084      	sub	sp, #16
 8003d28:	af00      	add	r7, sp, #0
 8003d2a:	6078      	str	r0, [r7, #4]
 8003d2c:	6039      	str	r1, [r7, #0]
  ErrorStatus status = SUCCESS;
 8003d2e:	2300      	movs	r3, #0
 8003d30:	73fb      	strb	r3, [r7, #15]
  assert_param((ADC_REG_InitStruct->ContinuousMode == LL_ADC_REG_CONV_SINGLE)
               || (ADC_REG_InitStruct->SequencerDiscont == LL_ADC_REG_SEQ_DISCONT_DISABLE));
  
  /* Note: Hardware constraint (refer to description of this function):       */
  /*       ADC instance must be disabled.                                     */
  if(LL_ADC_IsEnabled(ADCx) == 0UL)
 8003d32:	6878      	ldr	r0, [r7, #4]
 8003d34:	f7ff ff6f 	bl	8003c16 <LL_ADC_IsEnabled>
 8003d38:	4603      	mov	r3, r0
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d12b      	bne.n	8003d96 <LL_ADC_REG_Init+0x72>
    /*    - Set ADC group regular conversion data transfer: no transfer or    */
    /*      transfer by DMA, and DMA requests mode                            */
    /* Note: On this STM32 series, ADC trigger edge is set when starting      */
    /*       ADC conversion.                                                  */
    /*       Refer to function @ref LL_ADC_REG_StartConversionExtTrig().      */
    if(ADC_REG_InitStruct->SequencerLength != LL_ADC_REG_SEQ_SCAN_DISABLE)
 8003d3e:	683b      	ldr	r3, [r7, #0]
 8003d40:	685b      	ldr	r3, [r3, #4]
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d009      	beq.n	8003d5a <LL_ADC_REG_Init+0x36>
    {
      MODIFY_REG(ADCx->CR1,
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	685b      	ldr	r3, [r3, #4]
 8003d4a:	f423 4268 	bic.w	r2, r3, #59392	; 0xe800
 8003d4e:	683b      	ldr	r3, [r7, #0]
 8003d50:	689b      	ldr	r3, [r3, #8]
 8003d52:	431a      	orrs	r2, r3
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	605a      	str	r2, [r3, #4]
 8003d58:	e005      	b.n	8003d66 <LL_ADC_REG_Init+0x42>
                   ADC_REG_InitStruct->SequencerDiscont
                );
    }
    else
    {
      MODIFY_REG(ADCx->CR1,
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	685b      	ldr	r3, [r3, #4]
 8003d5e:	f423 4268 	bic.w	r2, r3, #59392	; 0xe800
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	605a      	str	r2, [r3, #4]
                ,
                   LL_ADC_REG_SEQ_DISCONT_DISABLE
                );
    }
    
    MODIFY_REG(ADCx->CR2,
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	689a      	ldr	r2, [r3, #8]
 8003d6a:	4b0e      	ldr	r3, [pc, #56]	; (8003da4 <LL_ADC_REG_Init+0x80>)
 8003d6c:	4013      	ands	r3, r2
 8003d6e:	683a      	ldr	r2, [r7, #0]
 8003d70:	6812      	ldr	r2, [r2, #0]
 8003d72:	f002 6170 	and.w	r1, r2, #251658240	; 0xf000000
 8003d76:	683a      	ldr	r2, [r7, #0]
 8003d78:	68d2      	ldr	r2, [r2, #12]
 8003d7a:	4311      	orrs	r1, r2
 8003d7c:	683a      	ldr	r2, [r7, #0]
 8003d7e:	6912      	ldr	r2, [r2, #16]
 8003d80:	430a      	orrs	r2, r1
 8003d82:	431a      	orrs	r2, r3
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	609a      	str	r2, [r3, #8]
    /* Note: If ADC instance feature scan mode is disabled                    */
    /*       (refer to  ADC instance initialization structure                 */
    /*       parameter @ref SequencersScanMode                                */
    /*       or function @ref LL_ADC_SetSequencersScanMode() ),               */
    /*       this parameter is discarded.                                     */
    LL_ADC_REG_SetSequencerLength(ADCx, ADC_REG_InitStruct->SequencerLength);
 8003d88:	683b      	ldr	r3, [r7, #0]
 8003d8a:	685b      	ldr	r3, [r3, #4]
 8003d8c:	4619      	mov	r1, r3
 8003d8e:	6878      	ldr	r0, [r7, #4]
 8003d90:	f7ff ff2e 	bl	8003bf0 <LL_ADC_REG_SetSequencerLength>
 8003d94:	e001      	b.n	8003d9a <LL_ADC_REG_Init+0x76>
  }
  else
  {
    /* Initialization error: ADC instance is not disabled. */
    status = ERROR;
 8003d96:	2301      	movs	r3, #1
 8003d98:	73fb      	strb	r3, [r7, #15]
  }
  return status;
 8003d9a:	7bfb      	ldrb	r3, [r7, #15]
}
 8003d9c:	4618      	mov	r0, r3
 8003d9e:	3710      	adds	r7, #16
 8003da0:	46bd      	mov	sp, r7
 8003da2:	bd80      	pop	{r7, pc}
 8003da4:	c0fffcfd 	.word	0xc0fffcfd

08003da8 <LL_GPIO_SetPinMode>:
{
 8003da8:	b480      	push	{r7}
 8003daa:	b089      	sub	sp, #36	; 0x24
 8003dac:	af00      	add	r7, sp, #0
 8003dae:	60f8      	str	r0, [r7, #12]
 8003db0:	60b9      	str	r1, [r7, #8]
 8003db2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	681a      	ldr	r2, [r3, #0]
 8003db8:	68bb      	ldr	r3, [r7, #8]
 8003dba:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003dbc:	697b      	ldr	r3, [r7, #20]
 8003dbe:	fa93 f3a3 	rbit	r3, r3
 8003dc2:	613b      	str	r3, [r7, #16]
  return result;
 8003dc4:	693b      	ldr	r3, [r7, #16]
 8003dc6:	fab3 f383 	clz	r3, r3
 8003dca:	b2db      	uxtb	r3, r3
 8003dcc:	005b      	lsls	r3, r3, #1
 8003dce:	2103      	movs	r1, #3
 8003dd0:	fa01 f303 	lsl.w	r3, r1, r3
 8003dd4:	43db      	mvns	r3, r3
 8003dd6:	401a      	ands	r2, r3
 8003dd8:	68bb      	ldr	r3, [r7, #8]
 8003dda:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ddc:	69fb      	ldr	r3, [r7, #28]
 8003dde:	fa93 f3a3 	rbit	r3, r3
 8003de2:	61bb      	str	r3, [r7, #24]
  return result;
 8003de4:	69bb      	ldr	r3, [r7, #24]
 8003de6:	fab3 f383 	clz	r3, r3
 8003dea:	b2db      	uxtb	r3, r3
 8003dec:	005b      	lsls	r3, r3, #1
 8003dee:	6879      	ldr	r1, [r7, #4]
 8003df0:	fa01 f303 	lsl.w	r3, r1, r3
 8003df4:	431a      	orrs	r2, r3
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	601a      	str	r2, [r3, #0]
}
 8003dfa:	bf00      	nop
 8003dfc:	3724      	adds	r7, #36	; 0x24
 8003dfe:	46bd      	mov	sp, r7
 8003e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e04:	4770      	bx	lr

08003e06 <LL_GPIO_SetPinOutputType>:
{
 8003e06:	b480      	push	{r7}
 8003e08:	b085      	sub	sp, #20
 8003e0a:	af00      	add	r7, sp, #0
 8003e0c:	60f8      	str	r0, [r7, #12]
 8003e0e:	60b9      	str	r1, [r7, #8]
 8003e10:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	685a      	ldr	r2, [r3, #4]
 8003e16:	68bb      	ldr	r3, [r7, #8]
 8003e18:	43db      	mvns	r3, r3
 8003e1a:	401a      	ands	r2, r3
 8003e1c:	68bb      	ldr	r3, [r7, #8]
 8003e1e:	6879      	ldr	r1, [r7, #4]
 8003e20:	fb01 f303 	mul.w	r3, r1, r3
 8003e24:	431a      	orrs	r2, r3
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	605a      	str	r2, [r3, #4]
}
 8003e2a:	bf00      	nop
 8003e2c:	3714      	adds	r7, #20
 8003e2e:	46bd      	mov	sp, r7
 8003e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e34:	4770      	bx	lr

08003e36 <LL_GPIO_SetPinSpeed>:
{
 8003e36:	b480      	push	{r7}
 8003e38:	b089      	sub	sp, #36	; 0x24
 8003e3a:	af00      	add	r7, sp, #0
 8003e3c:	60f8      	str	r0, [r7, #12]
 8003e3e:	60b9      	str	r1, [r7, #8]
 8003e40:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDER_OSPEEDR0 << (POSITION_VAL(Pin) * 2U)),
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	689a      	ldr	r2, [r3, #8]
 8003e46:	68bb      	ldr	r3, [r7, #8]
 8003e48:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e4a:	697b      	ldr	r3, [r7, #20]
 8003e4c:	fa93 f3a3 	rbit	r3, r3
 8003e50:	613b      	str	r3, [r7, #16]
  return result;
 8003e52:	693b      	ldr	r3, [r7, #16]
 8003e54:	fab3 f383 	clz	r3, r3
 8003e58:	b2db      	uxtb	r3, r3
 8003e5a:	005b      	lsls	r3, r3, #1
 8003e5c:	2103      	movs	r1, #3
 8003e5e:	fa01 f303 	lsl.w	r3, r1, r3
 8003e62:	43db      	mvns	r3, r3
 8003e64:	401a      	ands	r2, r3
 8003e66:	68bb      	ldr	r3, [r7, #8]
 8003e68:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e6a:	69fb      	ldr	r3, [r7, #28]
 8003e6c:	fa93 f3a3 	rbit	r3, r3
 8003e70:	61bb      	str	r3, [r7, #24]
  return result;
 8003e72:	69bb      	ldr	r3, [r7, #24]
 8003e74:	fab3 f383 	clz	r3, r3
 8003e78:	b2db      	uxtb	r3, r3
 8003e7a:	005b      	lsls	r3, r3, #1
 8003e7c:	6879      	ldr	r1, [r7, #4]
 8003e7e:	fa01 f303 	lsl.w	r3, r1, r3
 8003e82:	431a      	orrs	r2, r3
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	609a      	str	r2, [r3, #8]
}
 8003e88:	bf00      	nop
 8003e8a:	3724      	adds	r7, #36	; 0x24
 8003e8c:	46bd      	mov	sp, r7
 8003e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e92:	4770      	bx	lr

08003e94 <LL_GPIO_SetPinPull>:
{
 8003e94:	b480      	push	{r7}
 8003e96:	b089      	sub	sp, #36	; 0x24
 8003e98:	af00      	add	r7, sp, #0
 8003e9a:	60f8      	str	r0, [r7, #12]
 8003e9c:	60b9      	str	r1, [r7, #8]
 8003e9e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	68da      	ldr	r2, [r3, #12]
 8003ea4:	68bb      	ldr	r3, [r7, #8]
 8003ea6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ea8:	697b      	ldr	r3, [r7, #20]
 8003eaa:	fa93 f3a3 	rbit	r3, r3
 8003eae:	613b      	str	r3, [r7, #16]
  return result;
 8003eb0:	693b      	ldr	r3, [r7, #16]
 8003eb2:	fab3 f383 	clz	r3, r3
 8003eb6:	b2db      	uxtb	r3, r3
 8003eb8:	005b      	lsls	r3, r3, #1
 8003eba:	2103      	movs	r1, #3
 8003ebc:	fa01 f303 	lsl.w	r3, r1, r3
 8003ec0:	43db      	mvns	r3, r3
 8003ec2:	401a      	ands	r2, r3
 8003ec4:	68bb      	ldr	r3, [r7, #8]
 8003ec6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ec8:	69fb      	ldr	r3, [r7, #28]
 8003eca:	fa93 f3a3 	rbit	r3, r3
 8003ece:	61bb      	str	r3, [r7, #24]
  return result;
 8003ed0:	69bb      	ldr	r3, [r7, #24]
 8003ed2:	fab3 f383 	clz	r3, r3
 8003ed6:	b2db      	uxtb	r3, r3
 8003ed8:	005b      	lsls	r3, r3, #1
 8003eda:	6879      	ldr	r1, [r7, #4]
 8003edc:	fa01 f303 	lsl.w	r3, r1, r3
 8003ee0:	431a      	orrs	r2, r3
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	60da      	str	r2, [r3, #12]
}
 8003ee6:	bf00      	nop
 8003ee8:	3724      	adds	r7, #36	; 0x24
 8003eea:	46bd      	mov	sp, r7
 8003eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ef0:	4770      	bx	lr

08003ef2 <LL_GPIO_SetAFPin_0_7>:
{
 8003ef2:	b480      	push	{r7}
 8003ef4:	b089      	sub	sp, #36	; 0x24
 8003ef6:	af00      	add	r7, sp, #0
 8003ef8:	60f8      	str	r0, [r7, #12]
 8003efa:	60b9      	str	r1, [r7, #8]
 8003efc:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	6a1a      	ldr	r2, [r3, #32]
 8003f02:	68bb      	ldr	r3, [r7, #8]
 8003f04:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f06:	697b      	ldr	r3, [r7, #20]
 8003f08:	fa93 f3a3 	rbit	r3, r3
 8003f0c:	613b      	str	r3, [r7, #16]
  return result;
 8003f0e:	693b      	ldr	r3, [r7, #16]
 8003f10:	fab3 f383 	clz	r3, r3
 8003f14:	b2db      	uxtb	r3, r3
 8003f16:	009b      	lsls	r3, r3, #2
 8003f18:	210f      	movs	r1, #15
 8003f1a:	fa01 f303 	lsl.w	r3, r1, r3
 8003f1e:	43db      	mvns	r3, r3
 8003f20:	401a      	ands	r2, r3
 8003f22:	68bb      	ldr	r3, [r7, #8]
 8003f24:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f26:	69fb      	ldr	r3, [r7, #28]
 8003f28:	fa93 f3a3 	rbit	r3, r3
 8003f2c:	61bb      	str	r3, [r7, #24]
  return result;
 8003f2e:	69bb      	ldr	r3, [r7, #24]
 8003f30:	fab3 f383 	clz	r3, r3
 8003f34:	b2db      	uxtb	r3, r3
 8003f36:	009b      	lsls	r3, r3, #2
 8003f38:	6879      	ldr	r1, [r7, #4]
 8003f3a:	fa01 f303 	lsl.w	r3, r1, r3
 8003f3e:	431a      	orrs	r2, r3
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	621a      	str	r2, [r3, #32]
}
 8003f44:	bf00      	nop
 8003f46:	3724      	adds	r7, #36	; 0x24
 8003f48:	46bd      	mov	sp, r7
 8003f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f4e:	4770      	bx	lr

08003f50 <LL_GPIO_SetAFPin_8_15>:
{
 8003f50:	b480      	push	{r7}
 8003f52:	b089      	sub	sp, #36	; 0x24
 8003f54:	af00      	add	r7, sp, #0
 8003f56:	60f8      	str	r0, [r7, #12]
 8003f58:	60b9      	str	r1, [r7, #8]
 8003f5a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003f60:	68bb      	ldr	r3, [r7, #8]
 8003f62:	0a1b      	lsrs	r3, r3, #8
 8003f64:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f66:	697b      	ldr	r3, [r7, #20]
 8003f68:	fa93 f3a3 	rbit	r3, r3
 8003f6c:	613b      	str	r3, [r7, #16]
  return result;
 8003f6e:	693b      	ldr	r3, [r7, #16]
 8003f70:	fab3 f383 	clz	r3, r3
 8003f74:	b2db      	uxtb	r3, r3
 8003f76:	009b      	lsls	r3, r3, #2
 8003f78:	210f      	movs	r1, #15
 8003f7a:	fa01 f303 	lsl.w	r3, r1, r3
 8003f7e:	43db      	mvns	r3, r3
 8003f80:	401a      	ands	r2, r3
 8003f82:	68bb      	ldr	r3, [r7, #8]
 8003f84:	0a1b      	lsrs	r3, r3, #8
 8003f86:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f88:	69fb      	ldr	r3, [r7, #28]
 8003f8a:	fa93 f3a3 	rbit	r3, r3
 8003f8e:	61bb      	str	r3, [r7, #24]
  return result;
 8003f90:	69bb      	ldr	r3, [r7, #24]
 8003f92:	fab3 f383 	clz	r3, r3
 8003f96:	b2db      	uxtb	r3, r3
 8003f98:	009b      	lsls	r3, r3, #2
 8003f9a:	6879      	ldr	r1, [r7, #4]
 8003f9c:	fa01 f303 	lsl.w	r3, r1, r3
 8003fa0:	431a      	orrs	r2, r3
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	625a      	str	r2, [r3, #36]	; 0x24
}
 8003fa6:	bf00      	nop
 8003fa8:	3724      	adds	r7, #36	; 0x24
 8003faa:	46bd      	mov	sp, r7
 8003fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fb0:	4770      	bx	lr

08003fb2 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8003fb2:	b580      	push	{r7, lr}
 8003fb4:	b088      	sub	sp, #32
 8003fb6:	af00      	add	r7, sp, #0
 8003fb8:	6078      	str	r0, [r7, #4]
 8003fba:	6039      	str	r1, [r7, #0]
  uint32_t pinpos     = 0x00000000U;
 8003fbc:	2300      	movs	r3, #0
 8003fbe:	61fb      	str	r3, [r7, #28]
  uint32_t currentpin = 0x00000000U;
 8003fc0:	2300      	movs	r3, #0
 8003fc2:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 8003fc4:	683b      	ldr	r3, [r7, #0]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003fca:	697b      	ldr	r3, [r7, #20]
 8003fcc:	fa93 f3a3 	rbit	r3, r3
 8003fd0:	613b      	str	r3, [r7, #16]
  return result;
 8003fd2:	693b      	ldr	r3, [r7, #16]
 8003fd4:	fab3 f383 	clz	r3, r3
 8003fd8:	b2db      	uxtb	r3, r3
 8003fda:	61fb      	str	r3, [r7, #28]
  
  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8003fdc:	e050      	b.n	8004080 <LL_GPIO_Init+0xce>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001U << pinpos);
 8003fde:	683b      	ldr	r3, [r7, #0]
 8003fe0:	681a      	ldr	r2, [r3, #0]
 8003fe2:	2101      	movs	r1, #1
 8003fe4:	69fb      	ldr	r3, [r7, #28]
 8003fe6:	fa01 f303 	lsl.w	r3, r1, r3
 8003fea:	4013      	ands	r3, r2
 8003fec:	61bb      	str	r3, [r7, #24]
    
    if (currentpin)
 8003fee:	69bb      	ldr	r3, [r7, #24]
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d042      	beq.n	800407a <LL_GPIO_Init+0xc8>
    {
      
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8003ff4:	683b      	ldr	r3, [r7, #0]
 8003ff6:	685b      	ldr	r3, [r3, #4]
 8003ff8:	2b01      	cmp	r3, #1
 8003ffa:	d003      	beq.n	8004004 <LL_GPIO_Init+0x52>
 8003ffc:	683b      	ldr	r3, [r7, #0]
 8003ffe:	685b      	ldr	r3, [r3, #4]
 8004000:	2b02      	cmp	r3, #2
 8004002:	d10d      	bne.n	8004020 <LL_GPIO_Init+0x6e>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));
        
        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 8004004:	683b      	ldr	r3, [r7, #0]
 8004006:	689b      	ldr	r3, [r3, #8]
 8004008:	461a      	mov	r2, r3
 800400a:	69b9      	ldr	r1, [r7, #24]
 800400c:	6878      	ldr	r0, [r7, #4]
 800400e:	f7ff ff12 	bl	8003e36 <LL_GPIO_SetPinSpeed>
        
        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));
        
        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, currentpin, GPIO_InitStruct->OutputType);
 8004012:	683b      	ldr	r3, [r7, #0]
 8004014:	68db      	ldr	r3, [r3, #12]
 8004016:	461a      	mov	r2, r3
 8004018:	69b9      	ldr	r1, [r7, #24]
 800401a:	6878      	ldr	r0, [r7, #4]
 800401c:	f7ff fef3 	bl	8003e06 <LL_GPIO_SetPinOutputType>
      }
      
      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 8004020:	683b      	ldr	r3, [r7, #0]
 8004022:	691b      	ldr	r3, [r3, #16]
 8004024:	461a      	mov	r2, r3
 8004026:	69b9      	ldr	r1, [r7, #24]
 8004028:	6878      	ldr	r0, [r7, #4]
 800402a:	f7ff ff33 	bl	8003e94 <LL_GPIO_SetPinPull>
      
      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 800402e:	683b      	ldr	r3, [r7, #0]
 8004030:	685b      	ldr	r3, [r3, #4]
 8004032:	2b02      	cmp	r3, #2
 8004034:	d11a      	bne.n	800406c <LL_GPIO_Init+0xba>
 8004036:	69bb      	ldr	r3, [r7, #24]
 8004038:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	fa93 f3a3 	rbit	r3, r3
 8004040:	60bb      	str	r3, [r7, #8]
  return result;
 8004042:	68bb      	ldr	r3, [r7, #8]
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));
        
        /* Speed mode configuration */
        if (POSITION_VAL(currentpin) < 0x00000008U)
 8004044:	fab3 f383 	clz	r3, r3
 8004048:	b2db      	uxtb	r3, r3
 800404a:	2b07      	cmp	r3, #7
 800404c:	d807      	bhi.n	800405e <LL_GPIO_Init+0xac>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 800404e:	683b      	ldr	r3, [r7, #0]
 8004050:	695b      	ldr	r3, [r3, #20]
 8004052:	461a      	mov	r2, r3
 8004054:	69b9      	ldr	r1, [r7, #24]
 8004056:	6878      	ldr	r0, [r7, #4]
 8004058:	f7ff ff4b 	bl	8003ef2 <LL_GPIO_SetAFPin_0_7>
 800405c:	e006      	b.n	800406c <LL_GPIO_Init+0xba>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 800405e:	683b      	ldr	r3, [r7, #0]
 8004060:	695b      	ldr	r3, [r3, #20]
 8004062:	461a      	mov	r2, r3
 8004064:	69b9      	ldr	r1, [r7, #24]
 8004066:	6878      	ldr	r0, [r7, #4]
 8004068:	f7ff ff72 	bl	8003f50 <LL_GPIO_SetAFPin_8_15>
        }
      }
      
      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 800406c:	683b      	ldr	r3, [r7, #0]
 800406e:	685b      	ldr	r3, [r3, #4]
 8004070:	461a      	mov	r2, r3
 8004072:	69b9      	ldr	r1, [r7, #24]
 8004074:	6878      	ldr	r0, [r7, #4]
 8004076:	f7ff fe97 	bl	8003da8 <LL_GPIO_SetPinMode>
    }
    pinpos++;
 800407a:	69fb      	ldr	r3, [r7, #28]
 800407c:	3301      	adds	r3, #1
 800407e:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8004080:	683b      	ldr	r3, [r7, #0]
 8004082:	681a      	ldr	r2, [r3, #0]
 8004084:	69fb      	ldr	r3, [r7, #28]
 8004086:	fa22 f303 	lsr.w	r3, r2, r3
 800408a:	2b00      	cmp	r3, #0
 800408c:	d1a7      	bne.n	8003fde <LL_GPIO_Init+0x2c>
  }

  return (SUCCESS);
 800408e:	2300      	movs	r3, #0
}
 8004090:	4618      	mov	r0, r3
 8004092:	3720      	adds	r7, #32
 8004094:	46bd      	mov	sp, r7
 8004096:	bd80      	pop	{r7, pc}

08004098 <LL_TIM_SetPrescaler>:
{
 8004098:	b480      	push	{r7}
 800409a:	b083      	sub	sp, #12
 800409c:	af00      	add	r7, sp, #0
 800409e:	6078      	str	r0, [r7, #4]
 80040a0:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->PSC, Prescaler);
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	683a      	ldr	r2, [r7, #0]
 80040a6:	629a      	str	r2, [r3, #40]	; 0x28
}
 80040a8:	bf00      	nop
 80040aa:	370c      	adds	r7, #12
 80040ac:	46bd      	mov	sp, r7
 80040ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040b2:	4770      	bx	lr

080040b4 <LL_TIM_SetAutoReload>:
{
 80040b4:	b480      	push	{r7}
 80040b6:	b083      	sub	sp, #12
 80040b8:	af00      	add	r7, sp, #0
 80040ba:	6078      	str	r0, [r7, #4]
 80040bc:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->ARR, AutoReload);
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	683a      	ldr	r2, [r7, #0]
 80040c2:	62da      	str	r2, [r3, #44]	; 0x2c
}
 80040c4:	bf00      	nop
 80040c6:	370c      	adds	r7, #12
 80040c8:	46bd      	mov	sp, r7
 80040ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ce:	4770      	bx	lr

080040d0 <LL_TIM_SetRepetitionCounter>:
{
 80040d0:	b480      	push	{r7}
 80040d2:	b083      	sub	sp, #12
 80040d4:	af00      	add	r7, sp, #0
 80040d6:	6078      	str	r0, [r7, #4]
 80040d8:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	683a      	ldr	r2, [r7, #0]
 80040de:	631a      	str	r2, [r3, #48]	; 0x30
}
 80040e0:	bf00      	nop
 80040e2:	370c      	adds	r7, #12
 80040e4:	46bd      	mov	sp, r7
 80040e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ea:	4770      	bx	lr

080040ec <LL_TIM_GenerateEvent_UPDATE>:
  * @rmtoll EGR          UG            LL_TIM_GenerateEvent_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_GenerateEvent_UPDATE(TIM_TypeDef *TIMx)
{
 80040ec:	b480      	push	{r7}
 80040ee:	b083      	sub	sp, #12
 80040f0:	af00      	add	r7, sp, #0
 80040f2:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	695b      	ldr	r3, [r3, #20]
 80040f8:	f043 0201 	orr.w	r2, r3, #1
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	615a      	str	r2, [r3, #20]
}
 8004100:	bf00      	nop
 8004102:	370c      	adds	r7, #12
 8004104:	46bd      	mov	sp, r7
 8004106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800410a:	4770      	bx	lr

0800410c <LL_TIM_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
ErrorStatus LL_TIM_Init(TIM_TypeDef *TIMx, LL_TIM_InitTypeDef *TIM_InitStruct)
{
 800410c:	b580      	push	{r7, lr}
 800410e:	b084      	sub	sp, #16
 8004110:	af00      	add	r7, sp, #0
 8004112:	6078      	str	r0, [r7, #4]
 8004114:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(TIMx));
  assert_param(IS_LL_TIM_COUNTERMODE(TIM_InitStruct->CounterMode));
  assert_param(IS_LL_TIM_CLOCKDIVISION(TIM_InitStruct->ClockDivision));

  tmpcr1 = LL_TIM_ReadReg(TIMx, CR1);
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	4a3d      	ldr	r2, [pc, #244]	; (8004214 <LL_TIM_Init+0x108>)
 8004120:	4293      	cmp	r3, r2
 8004122:	d013      	beq.n	800414c <LL_TIM_Init+0x40>
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800412a:	d00f      	beq.n	800414c <LL_TIM_Init+0x40>
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	4a3a      	ldr	r2, [pc, #232]	; (8004218 <LL_TIM_Init+0x10c>)
 8004130:	4293      	cmp	r3, r2
 8004132:	d00b      	beq.n	800414c <LL_TIM_Init+0x40>
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	4a39      	ldr	r2, [pc, #228]	; (800421c <LL_TIM_Init+0x110>)
 8004138:	4293      	cmp	r3, r2
 800413a:	d007      	beq.n	800414c <LL_TIM_Init+0x40>
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	4a38      	ldr	r2, [pc, #224]	; (8004220 <LL_TIM_Init+0x114>)
 8004140:	4293      	cmp	r3, r2
 8004142:	d003      	beq.n	800414c <LL_TIM_Init+0x40>
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	4a37      	ldr	r2, [pc, #220]	; (8004224 <LL_TIM_Init+0x118>)
 8004148:	4293      	cmp	r3, r2
 800414a:	d106      	bne.n	800415a <LL_TIM_Init+0x4e>
  {
    /* Select the Counter Mode */
    MODIFY_REG(tmpcr1, (TIM_CR1_DIR | TIM_CR1_CMS), TIM_InitStruct->CounterMode);
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004152:	683b      	ldr	r3, [r7, #0]
 8004154:	685b      	ldr	r3, [r3, #4]
 8004156:	4313      	orrs	r3, r2
 8004158:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	4a2d      	ldr	r2, [pc, #180]	; (8004214 <LL_TIM_Init+0x108>)
 800415e:	4293      	cmp	r3, r2
 8004160:	d02b      	beq.n	80041ba <LL_TIM_Init+0xae>
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004168:	d027      	beq.n	80041ba <LL_TIM_Init+0xae>
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	4a2a      	ldr	r2, [pc, #168]	; (8004218 <LL_TIM_Init+0x10c>)
 800416e:	4293      	cmp	r3, r2
 8004170:	d023      	beq.n	80041ba <LL_TIM_Init+0xae>
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	4a29      	ldr	r2, [pc, #164]	; (800421c <LL_TIM_Init+0x110>)
 8004176:	4293      	cmp	r3, r2
 8004178:	d01f      	beq.n	80041ba <LL_TIM_Init+0xae>
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	4a28      	ldr	r2, [pc, #160]	; (8004220 <LL_TIM_Init+0x114>)
 800417e:	4293      	cmp	r3, r2
 8004180:	d01b      	beq.n	80041ba <LL_TIM_Init+0xae>
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	4a27      	ldr	r2, [pc, #156]	; (8004224 <LL_TIM_Init+0x118>)
 8004186:	4293      	cmp	r3, r2
 8004188:	d017      	beq.n	80041ba <LL_TIM_Init+0xae>
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	4a26      	ldr	r2, [pc, #152]	; (8004228 <LL_TIM_Init+0x11c>)
 800418e:	4293      	cmp	r3, r2
 8004190:	d013      	beq.n	80041ba <LL_TIM_Init+0xae>
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	4a25      	ldr	r2, [pc, #148]	; (800422c <LL_TIM_Init+0x120>)
 8004196:	4293      	cmp	r3, r2
 8004198:	d00f      	beq.n	80041ba <LL_TIM_Init+0xae>
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	4a24      	ldr	r2, [pc, #144]	; (8004230 <LL_TIM_Init+0x124>)
 800419e:	4293      	cmp	r3, r2
 80041a0:	d00b      	beq.n	80041ba <LL_TIM_Init+0xae>
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	4a23      	ldr	r2, [pc, #140]	; (8004234 <LL_TIM_Init+0x128>)
 80041a6:	4293      	cmp	r3, r2
 80041a8:	d007      	beq.n	80041ba <LL_TIM_Init+0xae>
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	4a22      	ldr	r2, [pc, #136]	; (8004238 <LL_TIM_Init+0x12c>)
 80041ae:	4293      	cmp	r3, r2
 80041b0:	d003      	beq.n	80041ba <LL_TIM_Init+0xae>
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	4a21      	ldr	r2, [pc, #132]	; (800423c <LL_TIM_Init+0x130>)
 80041b6:	4293      	cmp	r3, r2
 80041b8:	d106      	bne.n	80041c8 <LL_TIM_Init+0xbc>
  {
    /* Set the clock division */
    MODIFY_REG(tmpcr1, TIM_CR1_CKD, TIM_InitStruct->ClockDivision);
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80041c0:	683b      	ldr	r3, [r7, #0]
 80041c2:	68db      	ldr	r3, [r3, #12]
 80041c4:	4313      	orrs	r3, r2
 80041c6:	60fb      	str	r3, [r7, #12]
  }

  /* Write to TIMx CR1 */
  LL_TIM_WriteReg(TIMx, CR1, tmpcr1);
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	68fa      	ldr	r2, [r7, #12]
 80041cc:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  LL_TIM_SetAutoReload(TIMx, TIM_InitStruct->Autoreload);
 80041ce:	683b      	ldr	r3, [r7, #0]
 80041d0:	689b      	ldr	r3, [r3, #8]
 80041d2:	4619      	mov	r1, r3
 80041d4:	6878      	ldr	r0, [r7, #4]
 80041d6:	f7ff ff6d 	bl	80040b4 <LL_TIM_SetAutoReload>

  /* Set the Prescaler value */
  LL_TIM_SetPrescaler(TIMx, TIM_InitStruct->Prescaler);
 80041da:	683b      	ldr	r3, [r7, #0]
 80041dc:	881b      	ldrh	r3, [r3, #0]
 80041de:	4619      	mov	r1, r3
 80041e0:	6878      	ldr	r0, [r7, #4]
 80041e2:	f7ff ff59 	bl	8004098 <LL_TIM_SetPrescaler>

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	4a0a      	ldr	r2, [pc, #40]	; (8004214 <LL_TIM_Init+0x108>)
 80041ea:	4293      	cmp	r3, r2
 80041ec:	d003      	beq.n	80041f6 <LL_TIM_Init+0xea>
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	4a0c      	ldr	r2, [pc, #48]	; (8004224 <LL_TIM_Init+0x118>)
 80041f2:	4293      	cmp	r3, r2
 80041f4:	d105      	bne.n	8004202 <LL_TIM_Init+0xf6>
  {
    /* Set the Repetition Counter value */
    LL_TIM_SetRepetitionCounter(TIMx, TIM_InitStruct->RepetitionCounter);
 80041f6:	683b      	ldr	r3, [r7, #0]
 80041f8:	691b      	ldr	r3, [r3, #16]
 80041fa:	4619      	mov	r1, r3
 80041fc:	6878      	ldr	r0, [r7, #4]
 80041fe:	f7ff ff67 	bl	80040d0 <LL_TIM_SetRepetitionCounter>
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter value (if applicable) immediately */
  LL_TIM_GenerateEvent_UPDATE(TIMx);
 8004202:	6878      	ldr	r0, [r7, #4]
 8004204:	f7ff ff72 	bl	80040ec <LL_TIM_GenerateEvent_UPDATE>

  return SUCCESS;
 8004208:	2300      	movs	r3, #0
}
 800420a:	4618      	mov	r0, r3
 800420c:	3710      	adds	r7, #16
 800420e:	46bd      	mov	sp, r7
 8004210:	bd80      	pop	{r7, pc}
 8004212:	bf00      	nop
 8004214:	40010000 	.word	0x40010000
 8004218:	40000400 	.word	0x40000400
 800421c:	40000800 	.word	0x40000800
 8004220:	40000c00 	.word	0x40000c00
 8004224:	40010400 	.word	0x40010400
 8004228:	40014000 	.word	0x40014000
 800422c:	40014400 	.word	0x40014400
 8004230:	40014800 	.word	0x40014800
 8004234:	40001800 	.word	0x40001800
 8004238:	40001c00 	.word	0x40001c00
 800423c:	40002000 	.word	0x40002000

08004240 <LL_mDelay>:
  *         will configure Systick to 1ms
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
void LL_mDelay(uint32_t Delay)
{
 8004240:	b480      	push	{r7}
 8004242:	b085      	sub	sp, #20
 8004244:	af00      	add	r7, sp, #0
 8004246:	6078      	str	r0, [r7, #4]
  __IO uint32_t  tmp = SysTick->CTRL;  /* Clear the COUNTFLAG first */
 8004248:	4b0f      	ldr	r3, [pc, #60]	; (8004288 <LL_mDelay+0x48>)
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	60fb      	str	r3, [r7, #12]
  /* Add this code to indicate that local variable is not used */
  ((void)tmp);
 800424e:	68fb      	ldr	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if(Delay < LL_MAX_DELAY)
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004256:	d00c      	beq.n	8004272 <LL_mDelay+0x32>
  {
    Delay++;
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	3301      	adds	r3, #1
 800425c:	607b      	str	r3, [r7, #4]
  }

  while (Delay)
 800425e:	e008      	b.n	8004272 <LL_mDelay+0x32>
  {
    if((SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) != 0U)
 8004260:	4b09      	ldr	r3, [pc, #36]	; (8004288 <LL_mDelay+0x48>)
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004268:	2b00      	cmp	r3, #0
 800426a:	d002      	beq.n	8004272 <LL_mDelay+0x32>
    {
      Delay--;
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	3b01      	subs	r3, #1
 8004270:	607b      	str	r3, [r7, #4]
  while (Delay)
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	2b00      	cmp	r3, #0
 8004276:	d1f3      	bne.n	8004260 <LL_mDelay+0x20>
    }
  }
}
 8004278:	bf00      	nop
 800427a:	bf00      	nop
 800427c:	3714      	adds	r7, #20
 800427e:	46bd      	mov	sp, r7
 8004280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004284:	4770      	bx	lr
 8004286:	bf00      	nop
 8004288:	e000e010 	.word	0xe000e010

0800428c <LL_SetSystemCoreClock>:
  * @note   Variable can be calculated also through SystemCoreClockUpdate function.
  * @param  HCLKFrequency HCLK frequency in Hz (can be calculated thanks to RCC helper macro)
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
 800428c:	b480      	push	{r7}
 800428e:	b083      	sub	sp, #12
 8004290:	af00      	add	r7, sp, #0
 8004292:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 8004294:	4a04      	ldr	r2, [pc, #16]	; (80042a8 <LL_SetSystemCoreClock+0x1c>)
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	6013      	str	r3, [r2, #0]
}
 800429a:	bf00      	nop
 800429c:	370c      	adds	r7, #12
 800429e:	46bd      	mov	sp, r7
 80042a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042a4:	4770      	bx	lr
 80042a6:	bf00      	nop
 80042a8:	20000000 	.word	0x20000000

080042ac <malloc>:
 80042ac:	4b02      	ldr	r3, [pc, #8]	; (80042b8 <malloc+0xc>)
 80042ae:	4601      	mov	r1, r0
 80042b0:	6818      	ldr	r0, [r3, #0]
 80042b2:	f000 b823 	b.w	80042fc <_malloc_r>
 80042b6:	bf00      	nop
 80042b8:	20000058 	.word	0x20000058

080042bc <sbrk_aligned>:
 80042bc:	b570      	push	{r4, r5, r6, lr}
 80042be:	4e0e      	ldr	r6, [pc, #56]	; (80042f8 <sbrk_aligned+0x3c>)
 80042c0:	460c      	mov	r4, r1
 80042c2:	6831      	ldr	r1, [r6, #0]
 80042c4:	4605      	mov	r5, r0
 80042c6:	b911      	cbnz	r1, 80042ce <sbrk_aligned+0x12>
 80042c8:	f000 f8ac 	bl	8004424 <_sbrk_r>
 80042cc:	6030      	str	r0, [r6, #0]
 80042ce:	4621      	mov	r1, r4
 80042d0:	4628      	mov	r0, r5
 80042d2:	f000 f8a7 	bl	8004424 <_sbrk_r>
 80042d6:	1c43      	adds	r3, r0, #1
 80042d8:	d00a      	beq.n	80042f0 <sbrk_aligned+0x34>
 80042da:	1cc4      	adds	r4, r0, #3
 80042dc:	f024 0403 	bic.w	r4, r4, #3
 80042e0:	42a0      	cmp	r0, r4
 80042e2:	d007      	beq.n	80042f4 <sbrk_aligned+0x38>
 80042e4:	1a21      	subs	r1, r4, r0
 80042e6:	4628      	mov	r0, r5
 80042e8:	f000 f89c 	bl	8004424 <_sbrk_r>
 80042ec:	3001      	adds	r0, #1
 80042ee:	d101      	bne.n	80042f4 <sbrk_aligned+0x38>
 80042f0:	f04f 34ff 	mov.w	r4, #4294967295
 80042f4:	4620      	mov	r0, r4
 80042f6:	bd70      	pop	{r4, r5, r6, pc}
 80042f8:	20000230 	.word	0x20000230

080042fc <_malloc_r>:
 80042fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004300:	1ccd      	adds	r5, r1, #3
 8004302:	f025 0503 	bic.w	r5, r5, #3
 8004306:	3508      	adds	r5, #8
 8004308:	2d0c      	cmp	r5, #12
 800430a:	bf38      	it	cc
 800430c:	250c      	movcc	r5, #12
 800430e:	2d00      	cmp	r5, #0
 8004310:	4607      	mov	r7, r0
 8004312:	db01      	blt.n	8004318 <_malloc_r+0x1c>
 8004314:	42a9      	cmp	r1, r5
 8004316:	d905      	bls.n	8004324 <_malloc_r+0x28>
 8004318:	230c      	movs	r3, #12
 800431a:	603b      	str	r3, [r7, #0]
 800431c:	2600      	movs	r6, #0
 800431e:	4630      	mov	r0, r6
 8004320:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004324:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80043f8 <_malloc_r+0xfc>
 8004328:	f000 f868 	bl	80043fc <__malloc_lock>
 800432c:	f8d8 3000 	ldr.w	r3, [r8]
 8004330:	461c      	mov	r4, r3
 8004332:	bb5c      	cbnz	r4, 800438c <_malloc_r+0x90>
 8004334:	4629      	mov	r1, r5
 8004336:	4638      	mov	r0, r7
 8004338:	f7ff ffc0 	bl	80042bc <sbrk_aligned>
 800433c:	1c43      	adds	r3, r0, #1
 800433e:	4604      	mov	r4, r0
 8004340:	d155      	bne.n	80043ee <_malloc_r+0xf2>
 8004342:	f8d8 4000 	ldr.w	r4, [r8]
 8004346:	4626      	mov	r6, r4
 8004348:	2e00      	cmp	r6, #0
 800434a:	d145      	bne.n	80043d8 <_malloc_r+0xdc>
 800434c:	2c00      	cmp	r4, #0
 800434e:	d048      	beq.n	80043e2 <_malloc_r+0xe6>
 8004350:	6823      	ldr	r3, [r4, #0]
 8004352:	4631      	mov	r1, r6
 8004354:	4638      	mov	r0, r7
 8004356:	eb04 0903 	add.w	r9, r4, r3
 800435a:	f000 f863 	bl	8004424 <_sbrk_r>
 800435e:	4581      	cmp	r9, r0
 8004360:	d13f      	bne.n	80043e2 <_malloc_r+0xe6>
 8004362:	6821      	ldr	r1, [r4, #0]
 8004364:	1a6d      	subs	r5, r5, r1
 8004366:	4629      	mov	r1, r5
 8004368:	4638      	mov	r0, r7
 800436a:	f7ff ffa7 	bl	80042bc <sbrk_aligned>
 800436e:	3001      	adds	r0, #1
 8004370:	d037      	beq.n	80043e2 <_malloc_r+0xe6>
 8004372:	6823      	ldr	r3, [r4, #0]
 8004374:	442b      	add	r3, r5
 8004376:	6023      	str	r3, [r4, #0]
 8004378:	f8d8 3000 	ldr.w	r3, [r8]
 800437c:	2b00      	cmp	r3, #0
 800437e:	d038      	beq.n	80043f2 <_malloc_r+0xf6>
 8004380:	685a      	ldr	r2, [r3, #4]
 8004382:	42a2      	cmp	r2, r4
 8004384:	d12b      	bne.n	80043de <_malloc_r+0xe2>
 8004386:	2200      	movs	r2, #0
 8004388:	605a      	str	r2, [r3, #4]
 800438a:	e00f      	b.n	80043ac <_malloc_r+0xb0>
 800438c:	6822      	ldr	r2, [r4, #0]
 800438e:	1b52      	subs	r2, r2, r5
 8004390:	d41f      	bmi.n	80043d2 <_malloc_r+0xd6>
 8004392:	2a0b      	cmp	r2, #11
 8004394:	d917      	bls.n	80043c6 <_malloc_r+0xca>
 8004396:	1961      	adds	r1, r4, r5
 8004398:	42a3      	cmp	r3, r4
 800439a:	6025      	str	r5, [r4, #0]
 800439c:	bf18      	it	ne
 800439e:	6059      	strne	r1, [r3, #4]
 80043a0:	6863      	ldr	r3, [r4, #4]
 80043a2:	bf08      	it	eq
 80043a4:	f8c8 1000 	streq.w	r1, [r8]
 80043a8:	5162      	str	r2, [r4, r5]
 80043aa:	604b      	str	r3, [r1, #4]
 80043ac:	4638      	mov	r0, r7
 80043ae:	f104 060b 	add.w	r6, r4, #11
 80043b2:	f000 f829 	bl	8004408 <__malloc_unlock>
 80043b6:	f026 0607 	bic.w	r6, r6, #7
 80043ba:	1d23      	adds	r3, r4, #4
 80043bc:	1af2      	subs	r2, r6, r3
 80043be:	d0ae      	beq.n	800431e <_malloc_r+0x22>
 80043c0:	1b9b      	subs	r3, r3, r6
 80043c2:	50a3      	str	r3, [r4, r2]
 80043c4:	e7ab      	b.n	800431e <_malloc_r+0x22>
 80043c6:	42a3      	cmp	r3, r4
 80043c8:	6862      	ldr	r2, [r4, #4]
 80043ca:	d1dd      	bne.n	8004388 <_malloc_r+0x8c>
 80043cc:	f8c8 2000 	str.w	r2, [r8]
 80043d0:	e7ec      	b.n	80043ac <_malloc_r+0xb0>
 80043d2:	4623      	mov	r3, r4
 80043d4:	6864      	ldr	r4, [r4, #4]
 80043d6:	e7ac      	b.n	8004332 <_malloc_r+0x36>
 80043d8:	4634      	mov	r4, r6
 80043da:	6876      	ldr	r6, [r6, #4]
 80043dc:	e7b4      	b.n	8004348 <_malloc_r+0x4c>
 80043de:	4613      	mov	r3, r2
 80043e0:	e7cc      	b.n	800437c <_malloc_r+0x80>
 80043e2:	230c      	movs	r3, #12
 80043e4:	603b      	str	r3, [r7, #0]
 80043e6:	4638      	mov	r0, r7
 80043e8:	f000 f80e 	bl	8004408 <__malloc_unlock>
 80043ec:	e797      	b.n	800431e <_malloc_r+0x22>
 80043ee:	6025      	str	r5, [r4, #0]
 80043f0:	e7dc      	b.n	80043ac <_malloc_r+0xb0>
 80043f2:	605b      	str	r3, [r3, #4]
 80043f4:	deff      	udf	#255	; 0xff
 80043f6:	bf00      	nop
 80043f8:	2000022c 	.word	0x2000022c

080043fc <__malloc_lock>:
 80043fc:	4801      	ldr	r0, [pc, #4]	; (8004404 <__malloc_lock+0x8>)
 80043fe:	f000 b84b 	b.w	8004498 <__retarget_lock_acquire_recursive>
 8004402:	bf00      	nop
 8004404:	20000370 	.word	0x20000370

08004408 <__malloc_unlock>:
 8004408:	4801      	ldr	r0, [pc, #4]	; (8004410 <__malloc_unlock+0x8>)
 800440a:	f000 b846 	b.w	800449a <__retarget_lock_release_recursive>
 800440e:	bf00      	nop
 8004410:	20000370 	.word	0x20000370

08004414 <memset>:
 8004414:	4402      	add	r2, r0
 8004416:	4603      	mov	r3, r0
 8004418:	4293      	cmp	r3, r2
 800441a:	d100      	bne.n	800441e <memset+0xa>
 800441c:	4770      	bx	lr
 800441e:	f803 1b01 	strb.w	r1, [r3], #1
 8004422:	e7f9      	b.n	8004418 <memset+0x4>

08004424 <_sbrk_r>:
 8004424:	b538      	push	{r3, r4, r5, lr}
 8004426:	4d06      	ldr	r5, [pc, #24]	; (8004440 <_sbrk_r+0x1c>)
 8004428:	2300      	movs	r3, #0
 800442a:	4604      	mov	r4, r0
 800442c:	4608      	mov	r0, r1
 800442e:	602b      	str	r3, [r5, #0]
 8004430:	f7fd ffae 	bl	8002390 <_sbrk>
 8004434:	1c43      	adds	r3, r0, #1
 8004436:	d102      	bne.n	800443e <_sbrk_r+0x1a>
 8004438:	682b      	ldr	r3, [r5, #0]
 800443a:	b103      	cbz	r3, 800443e <_sbrk_r+0x1a>
 800443c:	6023      	str	r3, [r4, #0]
 800443e:	bd38      	pop	{r3, r4, r5, pc}
 8004440:	2000036c 	.word	0x2000036c

08004444 <__errno>:
 8004444:	4b01      	ldr	r3, [pc, #4]	; (800444c <__errno+0x8>)
 8004446:	6818      	ldr	r0, [r3, #0]
 8004448:	4770      	bx	lr
 800444a:	bf00      	nop
 800444c:	20000058 	.word	0x20000058

08004450 <__libc_init_array>:
 8004450:	b570      	push	{r4, r5, r6, lr}
 8004452:	4d0d      	ldr	r5, [pc, #52]	; (8004488 <__libc_init_array+0x38>)
 8004454:	4c0d      	ldr	r4, [pc, #52]	; (800448c <__libc_init_array+0x3c>)
 8004456:	1b64      	subs	r4, r4, r5
 8004458:	10a4      	asrs	r4, r4, #2
 800445a:	2600      	movs	r6, #0
 800445c:	42a6      	cmp	r6, r4
 800445e:	d109      	bne.n	8004474 <__libc_init_array+0x24>
 8004460:	4d0b      	ldr	r5, [pc, #44]	; (8004490 <__libc_init_array+0x40>)
 8004462:	4c0c      	ldr	r4, [pc, #48]	; (8004494 <__libc_init_array+0x44>)
 8004464:	f000 f81a 	bl	800449c <_init>
 8004468:	1b64      	subs	r4, r4, r5
 800446a:	10a4      	asrs	r4, r4, #2
 800446c:	2600      	movs	r6, #0
 800446e:	42a6      	cmp	r6, r4
 8004470:	d105      	bne.n	800447e <__libc_init_array+0x2e>
 8004472:	bd70      	pop	{r4, r5, r6, pc}
 8004474:	f855 3b04 	ldr.w	r3, [r5], #4
 8004478:	4798      	blx	r3
 800447a:	3601      	adds	r6, #1
 800447c:	e7ee      	b.n	800445c <__libc_init_array+0xc>
 800447e:	f855 3b04 	ldr.w	r3, [r5], #4
 8004482:	4798      	blx	r3
 8004484:	3601      	adds	r6, #1
 8004486:	e7f2      	b.n	800446e <__libc_init_array+0x1e>
 8004488:	080044c4 	.word	0x080044c4
 800448c:	080044c4 	.word	0x080044c4
 8004490:	080044c4 	.word	0x080044c4
 8004494:	080044c8 	.word	0x080044c8

08004498 <__retarget_lock_acquire_recursive>:
 8004498:	4770      	bx	lr

0800449a <__retarget_lock_release_recursive>:
 800449a:	4770      	bx	lr

0800449c <_init>:
 800449c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800449e:	bf00      	nop
 80044a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80044a2:	bc08      	pop	{r3}
 80044a4:	469e      	mov	lr, r3
 80044a6:	4770      	bx	lr

080044a8 <_fini>:
 80044a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80044aa:	bf00      	nop
 80044ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80044ae:	bc08      	pop	{r3}
 80044b0:	469e      	mov	lr, r3
 80044b2:	4770      	bx	lr
